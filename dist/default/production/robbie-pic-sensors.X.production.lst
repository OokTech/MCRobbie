

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sat Jun  3 14:41:12 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F14K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    15                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    16                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    18  0000                     
    19                           ; Version 1.42
    20                           ; Generated 13/04/2017 GMT
    21                           ; 
    22                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC18F14K50 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     
    54                           	psect	idataCOMRAM
    55  0002CA                     __pidataCOMRAM:
    56                           	opt stack 0
    57                           
    58                           ;initializer for _leftDuty
    59  0002CA  0080               	dw	128
    60                           
    61                           ;initializer for _rightDuty
    62  0002CC  00C8               	dw	200
    63                           
    64                           ;initializer for _PWMEnable
    65  0002CE  0001               	dw	1
    66  0000                     _TMR0	set	4054
    67  0000                     _LATC	set	3979
    68  0000                     _TRISCbits	set	3988
    69  0000                     _OSCCONbits	set	4051
    70  0000                     _TRISAbits	set	3986
    71  0000                     _T0CONbits	set	4053
    72  0000                     _LATCbits	set	3979
    73  0000                     _LATAbits	set	3977
    74  0000                     _SSPBUF	set	4041
    75  0000                     _INTCONbits	set	4082
    76  0000                     _PIE1bits	set	3997
    77  0000                     _PIR1bits	set	3998
    78  0000                     _SSPADD	set	4040
    79  0000                     _SSPMSKbits	set	3951
    80  0000                     _SSPCON2bits	set	4037
    81  0000                     _SSPCON1bits	set	4038
    82  0000                     _SSPSTATbits	set	4039
    83  0000                     _WPUBbits	set	3960
    84  0000                     _INTCON2bits	set	4081
    85  0000                     _TRISBbits	set	3987
    86                           
    87                           ; #config settings
    88  0000                     
    89                           	psect	cinit
    90  00022E                     __pcinit:
    91                           	opt stack 0
    92  00022E                     start_initialization:
    93                           	opt stack 0
    94  00022E                     __initialization:
    95                           	opt stack 0
    96                           
    97                           ; Initialize objects allocated to COMRAM (6 bytes)
    98                           ; load TBLPTR registers with __pidataCOMRAM
    99  00022E  0ECA               	movlw	low __pidataCOMRAM
   100  000230  6EF6               	movwf	tblptrl,c
   101  000232  0E02               	movlw	high __pidataCOMRAM
   102  000234  6EF7               	movwf	tblptrh,c
   103  000236  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   104  000238  6EF8               	movwf	tblptru,c
   105  00023A  EE00  F01B         	lfsr	0,__pdataCOMRAM
   106  00023E  EE10 F006          	lfsr	1,6
   107  000242                     copy_data0:
   108  000242  0009               	tblrd		*+
   109  000244  CFF5 FFEE          	movff	tablat,postinc0
   110  000248  50E5               	movf	postdec1,w,c
   111  00024A  50E1               	movf	fsr1l,w,c
   112  00024C  E1FA               	bnz	copy_data0
   113                           
   114                           ; Clear objects allocated to COMRAM (10 bytes)
   115  00024E  EE00  F011         	lfsr	0,__pbssCOMRAM
   116  000252  0E0A               	movlw	10
   117  000254                     clear_0:
   118  000254  6AEE               	clrf	postinc0,c
   119  000256  06E8               	decf	wreg,f,c
   120  000258  E1FD               	bnz	clear_0
   121  00025A                     end_of_initialization:
   122                           	opt stack 0
   123  00025A                     __end_of__initialization:
   124                           	opt stack 0
   125  00025A  9021               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   126  00025C  9221               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   127  00025E  0100               	movlb	0
   128  000260  EF47  F001         	goto	_main	;jump to C main() function
   129                           tblptru	equ	0xFF8
   130                           tblptrh	equ	0xFF7
   131                           tblptrl	equ	0xFF6
   132                           tablat	equ	0xFF5
   133                           postinc0	equ	0xFEE
   134                           wreg	equ	0xFE8
   135                           postdec1	equ	0xFE5
   136                           fsr1l	equ	0xFE1
   137                           
   138                           	psect	bssCOMRAM
   139  000011                     __pbssCOMRAM:
   140                           	opt stack 0
   141  000011                     _state:
   142                           	opt stack 0
   143  000011                     	ds	2
   144  000013                     _count:
   145                           	opt stack 0
   146  000013                     	ds	2
   147  000015                     _z:
   148                           	opt stack 0
   149  000015                     	ds	2
   150  000017                     _rightState:
   151                           	opt stack 0
   152  000017                     	ds	2
   153  000019                     _leftState:
   154                           	opt stack 0
   155  000019                     	ds	2
   156                           tblptru	equ	0xFF8
   157                           tblptrh	equ	0xFF7
   158                           tblptrl	equ	0xFF6
   159                           tablat	equ	0xFF5
   160                           postinc0	equ	0xFEE
   161                           wreg	equ	0xFE8
   162                           postdec1	equ	0xFE5
   163                           fsr1l	equ	0xFE1
   164                           
   165                           	psect	dataCOMRAM
   166  00001B                     __pdataCOMRAM:
   167                           	opt stack 0
   168  00001B                     _leftDuty:
   169                           	opt stack 0
   170  00001B                     	ds	2
   171  00001D                     _rightDuty:
   172                           	opt stack 0
   173  00001D                     	ds	2
   174  00001F                     _PWMEnable:
   175                           	opt stack 0
   176  00001F                     	ds	2
   177                           tblptru	equ	0xFF8
   178                           tblptrh	equ	0xFF7
   179                           tblptrl	equ	0xFF6
   180                           tablat	equ	0xFF5
   181                           postinc0	equ	0xFEE
   182                           wreg	equ	0xFE8
   183                           postdec1	equ	0xFE5
   184                           fsr1l	equ	0xFE1
   185                           
   186                           	psect	cstackCOMRAM
   187  000001                     __pcstackCOMRAM:
   188                           	opt stack 0
   189  000001                     ??_I2C_Slave_Read:
   190  000001                     
   191                           ; 1 bytes @ 0x0
   192  000001                     	ds	16
   193  000011                     tblptru	equ	0xFF8
   194                           tblptrh	equ	0xFF7
   195                           tblptrl	equ	0xFF6
   196                           tablat	equ	0xFF5
   197                           postinc0	equ	0xFEE
   198                           wreg	equ	0xFE8
   199                           postdec1	equ	0xFE5
   200                           fsr1l	equ	0xFE1
   201                           
   202                           ; 1 bytes @ 0x10
   203 ;;
   204 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   205 ;;
   206 ;; *************** function _main *****************
   207 ;; Defined at:
   208 ;;		line 338 in file "main.c"
   209 ;; Parameters:    Size  Location     Type
   210 ;;		None
   211 ;; Auto vars:     Size  Location     Type
   212 ;;		None
   213 ;; Return value:  Size  Location     Type
   214 ;;                  1    wreg      void 
   215 ;; Registers used:
   216 ;;		wreg, status,2, status,0, cstack
   217 ;; Tracked objects:
   218 ;;		On entry : 0/0
   219 ;;		On exit  : 0/0
   220 ;;		Unchanged: 0/0
   221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   222 ;;      Params:         0       0       0       0
   223 ;;      Locals:         0       0       0       0
   224 ;;      Temps:          0       0       0       0
   225 ;;      Totals:         0       0       0       0
   226 ;;Total ram usage:        0 bytes
   227 ;; Hardware stack levels required when called:    2
   228 ;; This function calls:
   229 ;;		_CheckPWMOutput
   230 ;;		_InitI2C
   231 ;;		_InitPWM
   232 ;; This function is called by:
   233 ;;		Startup code after reset
   234 ;; This function uses a non-reentrant model
   235 ;;
   236                           
   237                           	psect	text0
   238  00028E                     __ptext0:
   239                           	opt stack 0
   240  00028E                     _main:
   241                           	opt stack 29
   242                           
   243                           ;main.c: 339: OSCCONbits.IRCF = 0b111;
   244                           
   245                           ;incstack = 0
   246  00028E  88D3               	bsf	4051,4,c	;volatile
   247  000290  8AD3               	bsf	4051,5,c	;volatile
   248  000292  8CD3               	bsf	4051,6,c	;volatile
   249                           
   250                           ;main.c: 341: TRISBbits.RB7 = 0;
   251  000294  9E93               	bcf	3987,7,c	;volatile
   252                           
   253                           ;main.c: 342: TRISCbits.RC0 = 0;
   254  000296  9094               	bcf	3988,0,c	;volatile
   255                           
   256                           ;main.c: 343: TRISCbits.RC1 = 0;
   257  000298  9294               	bcf	3988,1,c	;volatile
   258                           
   259                           ;main.c: 344: TRISCbits.RC2 = 0;
   260  00029A  9494               	bcf	3988,2,c	;volatile
   261                           
   262                           ;main.c: 345: TRISCbits.RC3 = 0;
   263  00029C  9694               	bcf	3988,3,c	;volatile
   264                           
   265                           ;main.c: 346: LATC = 0x00;
   266  00029E  0E00               	movlw	0
   267  0002A0  6E8B               	movwf	3979,c	;volatile
   268                           
   269                           ;main.c: 347: InitI2C();
   270  0002A2  EC32  F001         	call	_InitI2C	;wreg free
   271                           
   272                           ;main.c: 348: InitPWM();
   273  0002A6  EC58  F001         	call	_InitPWM	;wreg free
   274  0002AA                     l875:
   275                           
   276                           ;main.c: 350: CheckPWMOutput();
   277  0002AA  ECB4  F000         	call	_CheckPWMOutput	;wreg free
   278  0002AE  D7FD               	goto	l875
   279  0002B0                     __end_of_main:
   280                           	opt stack 0
   281                           tblptru	equ	0xFF8
   282                           tblptrh	equ	0xFF7
   283                           tblptrl	equ	0xFF6
   284                           tablat	equ	0xFF5
   285                           postinc0	equ	0xFEE
   286                           wreg	equ	0xFE8
   287                           postdec1	equ	0xFE5
   288                           fsr1l	equ	0xFE1
   289                           
   290 ;; *************** function _InitPWM *****************
   291 ;; Defined at:
   292 ;;		line 317 in file "main.c"
   293 ;; Parameters:    Size  Location     Type
   294 ;;		None
   295 ;; Auto vars:     Size  Location     Type
   296 ;;		None
   297 ;; Return value:  Size  Location     Type
   298 ;;                  1    wreg      void 
   299 ;; Registers used:
   300 ;;		wreg, status,2
   301 ;; Tracked objects:
   302 ;;		On entry : 0/0
   303 ;;		On exit  : 0/0
   304 ;;		Unchanged: 0/0
   305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   306 ;;      Params:         0       0       0       0
   307 ;;      Locals:         0       0       0       0
   308 ;;      Temps:          0       0       0       0
   309 ;;      Totals:         0       0       0       0
   310 ;;Total ram usage:        0 bytes
   311 ;; Hardware stack levels used:    1
   312 ;; Hardware stack levels required when called:    1
   313 ;; This function calls:
   314 ;;		Nothing
   315 ;; This function is called by:
   316 ;;		_main
   317 ;; This function uses a non-reentrant model
   318 ;;
   319                           
   320                           	psect	text1
   321  0002B0                     __ptext1:
   322                           	opt stack 0
   323  0002B0                     _InitPWM:
   324                           	opt stack 29
   325                           
   326                           ;main.c: 319: T0CONbits.T0PS = 0b011;
   327                           
   328                           ;incstack = 0
   329  0002B0  50D5               	movf	4053,w,c	;volatile
   330  0002B2  0BF8               	andlw	-8
   331  0002B4  0903               	iorlw	3
   332  0002B6  6ED5               	movwf	4053,c	;volatile
   333                           
   334                           ;main.c: 321: T0CONbits.PSA = 0;
   335  0002B8  96D5               	bcf	4053,3,c	;volatile
   336                           
   337                           ;main.c: 323: T0CONbits.T0CS = 0;
   338  0002BA  9AD5               	bcf	4053,5,c	;volatile
   339                           
   340                           ;main.c: 325: T0CONbits.T08BIT = 1;
   341  0002BC  8CD5               	bsf	4053,6,c	;volatile
   342                           
   343                           ;main.c: 327: T0CONbits.TMR0ON = 1;
   344  0002BE  8ED5               	bsf	4053,7,c	;volatile
   345                           
   346                           ;main.c: 331: TRISAbits.RA4 = 0;
   347  0002C0  9892               	bcf	3986,4,c	;volatile
   348                           
   349                           ;main.c: 332: TRISAbits.RA5 = 0;
   350  0002C2  9A92               	bcf	3986,5,c	;volatile
   351                           
   352                           ;main.c: 334: LATAbits.LATA4 = 0;
   353  0002C4  9889               	bcf	3977,4,c	;volatile
   354                           
   355                           ;main.c: 335: LATAbits.LATA5 = 0;
   356  0002C6  9A89               	bcf	3977,5,c	;volatile
   357  0002C8  0012               	return		;funcret
   358  0002CA                     __end_of_InitPWM:
   359                           	opt stack 0
   360                           tblptru	equ	0xFF8
   361                           tblptrh	equ	0xFF7
   362                           tblptrl	equ	0xFF6
   363                           tablat	equ	0xFF5
   364                           postinc0	equ	0xFEE
   365                           wreg	equ	0xFE8
   366                           postdec1	equ	0xFE5
   367                           fsr1l	equ	0xFE1
   368                           
   369 ;; *************** function _InitI2C *****************
   370 ;; Defined at:
   371 ;;		line 150 in file "main.c"
   372 ;; Parameters:    Size  Location     Type
   373 ;;		None
   374 ;; Auto vars:     Size  Location     Type
   375 ;;		None
   376 ;; Return value:  Size  Location     Type
   377 ;;                  1    wreg      void 
   378 ;; Registers used:
   379 ;;		wreg, status,2
   380 ;; Tracked objects:
   381 ;;		On entry : 0/0
   382 ;;		On exit  : 0/0
   383 ;;		Unchanged: 0/0
   384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   385 ;;      Params:         0       0       0       0
   386 ;;      Locals:         0       0       0       0
   387 ;;      Temps:          0       0       0       0
   388 ;;      Totals:         0       0       0       0
   389 ;;Total ram usage:        0 bytes
   390 ;; Hardware stack levels used:    1
   391 ;; Hardware stack levels required when called:    1
   392 ;; This function calls:
   393 ;;		Nothing
   394 ;; This function is called by:
   395 ;;		_main
   396 ;; This function uses a non-reentrant model
   397 ;;
   398                           
   399                           	psect	text2
   400  000264                     __ptext2:
   401                           	opt stack 0
   402  000264                     _InitI2C:
   403                           	opt stack 29
   404                           
   405                           ;main.c: 152: TRISBbits.RB4 = 1;
   406                           
   407                           ;incstack = 0
   408  000264  8893               	bsf	3987,4,c	;volatile
   409                           
   410                           ;main.c: 153: TRISBbits.RB6 = 1;
   411  000266  8C93               	bsf	3987,6,c	;volatile
   412                           
   413                           ;main.c: 156: INTCON2bits.NOT_RABPU = 0;
   414  000268  9EF1               	bcf	intcon2,7,c	;volatile
   415                           
   416                           ;main.c: 158: WPUBbits.WPUB4 = 1;
   417  00026A  8878               	bsf	3960,4,c	;volatile
   418                           
   419                           ;main.c: 159: WPUBbits.WPUB6 = 1;
   420  00026C  8C78               	bsf	3960,6,c	;volatile
   421                           
   422                           ;main.c: 161: SSPSTATbits.SMP = 1;
   423  00026E  8EC7               	bsf	4039,7,c	;volatile
   424                           
   425                           ;main.c: 164: SSPCON1bits.SSPM = 0b0110;
   426  000270  50C6               	movf	4038,w,c	;volatile
   427  000272  0BF0               	andlw	-16
   428  000274  0906               	iorlw	6
   429  000276  6EC6               	movwf	4038,c	;volatile
   430                           
   431                           ;main.c: 166: SSPCON2bits.SEN = 1;
   432  000278  80C5               	bsf	4037,0,c	;volatile
   433                           
   434                           ;main.c: 171: SSPMSKbits.MSK = 0b01000110;
   435  00027A  0E46               	movlw	70
   436  00027C  6E6F               	movwf	3951,c	;volatile
   437                           
   438                           ;main.c: 175: SSPADD = 0x23<<1;
   439  00027E  0E46               	movlw	70
   440  000280  6EC8               	movwf	4040,c	;volatile
   441                           
   442                           ;main.c: 178: PIR1bits.SSPIF = 0;
   443  000282  969E               	bcf	3998,3,c	;volatile
   444                           
   445                           ;main.c: 180: PIE1bits.SSPIE = 1;
   446  000284  869D               	bsf	3997,3,c	;volatile
   447                           
   448                           ;main.c: 183: INTCONbits.GIE = 1;
   449  000286  8EF2               	bsf	intcon,7,c	;volatile
   450                           
   451                           ;main.c: 185: INTCONbits.PEIE = 1;
   452  000288  8CF2               	bsf	intcon,6,c	;volatile
   453                           
   454                           ;main.c: 188: SSPCON1bits.SSPEN = 1;
   455  00028A  8AC6               	bsf	4038,5,c	;volatile
   456  00028C  0012               	return		;funcret
   457  00028E                     __end_of_InitI2C:
   458                           	opt stack 0
   459                           tblptru	equ	0xFF8
   460                           tblptrh	equ	0xFF7
   461                           tblptrl	equ	0xFF6
   462                           tablat	equ	0xFF5
   463                           intcon	equ	0xFF2
   464                           intcon2	equ	0xFF1
   465                           postinc0	equ	0xFEE
   466                           wreg	equ	0xFE8
   467                           postdec1	equ	0xFE5
   468                           fsr1l	equ	0xFE1
   469                           
   470 ;; *************** function _CheckPWMOutput *****************
   471 ;; Defined at:
   472 ;;		line 264 in file "main.c"
   473 ;; Parameters:    Size  Location     Type
   474 ;;		None
   475 ;; Auto vars:     Size  Location     Type
   476 ;;		None
   477 ;; Return value:  Size  Location     Type
   478 ;;                  1    wreg      void 
   479 ;; Registers used:
   480 ;;		wreg, status,2, status,0
   481 ;; Tracked objects:
   482 ;;		On entry : 0/0
   483 ;;		On exit  : 0/0
   484 ;;		Unchanged: 0/0
   485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   486 ;;      Params:         0       0       0       0
   487 ;;      Locals:         0       0       0       0
   488 ;;      Temps:          0       0       0       0
   489 ;;      Totals:         0       0       0       0
   490 ;;Total ram usage:        0 bytes
   491 ;; Hardware stack levels used:    1
   492 ;; Hardware stack levels required when called:    1
   493 ;; This function calls:
   494 ;;		Nothing
   495 ;; This function is called by:
   496 ;;		_main
   497 ;; This function uses a non-reentrant model
   498 ;;
   499                           
   500                           	psect	text3
   501  000168                     __ptext3:
   502                           	opt stack 0
   503  000168                     _CheckPWMOutput:
   504                           	opt stack 29
   505                           
   506                           ;main.c: 266: if (PWMEnable) {
   507                           
   508                           ;incstack = 0
   509  000168  501F               	movf	_PWMEnable,w,c
   510  00016A  1020               	iorwf	_PWMEnable+1,w,c
   511  00016C  B4D8               	btfsc	status,2,c
   512  00016E  D04C               	goto	l799
   513                           
   514                           ;main.c: 268: if (TMR0 < leftDuty && leftState == 0) {
   515  000170  501B               	movf	_leftDuty,w,c
   516  000172  5CD6               	subwf	4054,w,c	;volatile
   517  000174  501C               	movf	_leftDuty+1,w,c
   518  000176  58D7               	subwfb	4055,w,c	;volatile
   519  000178  B0D8               	btfsc	status,0,c
   520  00017A  D00B               	goto	l765
   521  00017C  5019               	movf	_leftState,w,c
   522  00017E  101A               	iorwf	_leftState+1,w,c
   523  000180  A4D8               	btfss	status,2,c
   524  000182  D007               	goto	l765
   525                           
   526                           ;main.c: 271: leftState = 1;
   527  000184  0E00               	movlw	0
   528  000186  6E1A               	movwf	_leftState+1,c
   529  000188  0E01               	movlw	1
   530  00018A  6E19               	movwf	_leftState,c
   531                           
   532                           ;main.c: 273: LATAbits.LATA4 = 1;
   533  00018C  8889               	bsf	3977,4,c	;volatile
   534                           
   535                           ;main.c: 275: LATCbits.LATC0 = 1;
   536  00018E  808B               	bsf	3979,0,c	;volatile
   537                           
   538                           ;main.c: 276: } else if (TMR0 > leftDuty && leftState == 1) {
   539  000190  D010               	goto	l775
   540  000192                     l765:
   541  000192  50D6               	movf	4054,w,c	;volatile
   542  000194  5C1B               	subwf	_leftDuty,w,c
   543  000196  50D7               	movf	4055,w,c	;volatile
   544  000198  581C               	subwfb	_leftDuty+1,w,c
   545  00019A  B0D8               	btfsc	status,0,c
   546  00019C  D00A               	goto	l775
   547  00019E  0419               	decf	_leftState,w,c
   548  0001A0  101A               	iorwf	_leftState+1,w,c
   549  0001A2  A4D8               	btfss	status,2,c
   550  0001A4  D006               	goto	l775
   551                           
   552                           ;main.c: 279: leftState = 0;
   553  0001A6  0E00               	movlw	0
   554  0001A8  6E1A               	movwf	_leftState+1,c
   555  0001AA  0E00               	movlw	0
   556  0001AC  6E19               	movwf	_leftState,c
   557                           
   558                           ;main.c: 281: LATAbits.LATA4 = 0;
   559  0001AE  9889               	bcf	3977,4,c	;volatile
   560                           
   561                           ;main.c: 283: LATCbits.LATC0 = 0;
   562  0001B0  908B               	bcf	3979,0,c	;volatile
   563  0001B2                     l775:
   564                           
   565                           ;main.c: 284: }
   566                           ;main.c: 287: if (TMR0 < rightDuty && rightState == 0) {
   567  0001B2  501D               	movf	_rightDuty,w,c
   568  0001B4  5CD6               	subwf	4054,w,c	;volatile
   569  0001B6  501E               	movf	_rightDuty+1,w,c
   570  0001B8  58D7               	subwfb	4055,w,c	;volatile
   571  0001BA  B0D8               	btfsc	status,0,c
   572  0001BC  D00B               	goto	l785
   573  0001BE  5017               	movf	_rightState,w,c
   574  0001C0  1018               	iorwf	_rightState+1,w,c
   575  0001C2  A4D8               	btfss	status,2,c
   576  0001C4  D007               	goto	l785
   577                           
   578                           ;main.c: 288: rightState = 1;
   579  0001C6  0E00               	movlw	0
   580  0001C8  6E18               	movwf	_rightState+1,c
   581  0001CA  0E01               	movlw	1
   582  0001CC  6E17               	movwf	_rightState,c
   583                           
   584                           ;main.c: 290: LATAbits.LATA5 = 1;
   585  0001CE  8A89               	bsf	3977,5,c	;volatile
   586                           
   587                           ;main.c: 292: LATCbits.LATC1 = 1;
   588  0001D0  828B               	bsf	3979,1,c	;volatile
   589                           
   590                           ;main.c: 293: } else if (TMR0 > rightDuty && rightState == 1) {
   591  0001D2  D010               	goto	l795
   592  0001D4                     l785:
   593  0001D4  50D6               	movf	4054,w,c	;volatile
   594  0001D6  5C1D               	subwf	_rightDuty,w,c
   595  0001D8  50D7               	movf	4055,w,c	;volatile
   596  0001DA  581E               	subwfb	_rightDuty+1,w,c
   597  0001DC  B0D8               	btfsc	status,0,c
   598  0001DE  D00A               	goto	l795
   599  0001E0  0417               	decf	_rightState,w,c
   600  0001E2  1018               	iorwf	_rightState+1,w,c
   601  0001E4  A4D8               	btfss	status,2,c
   602  0001E6  D006               	goto	l795
   603                           
   604                           ;main.c: 294: rightState = 0;
   605  0001E8  0E00               	movlw	0
   606  0001EA  6E18               	movwf	_rightState+1,c
   607  0001EC  0E00               	movlw	0
   608  0001EE  6E17               	movwf	_rightState,c
   609                           
   610                           ;main.c: 296: LATAbits.LATA5 = 0;
   611  0001F0  9A89               	bcf	3977,5,c	;volatile
   612                           
   613                           ;main.c: 298: LATCbits.LATC1 = 0;
   614  0001F2  928B               	bcf	3979,1,c	;volatile
   615  0001F4                     l795:
   616                           
   617                           ;main.c: 299: }
   618                           ;main.c: 301: if (TMR0 > 256*8) {
   619  0001F4  04D6               	decf	4054,w,c	;volatile
   620  0001F6  0E08               	movlw	8
   621  0001F8  58D7               	subwfb	4055,w,c	;volatile
   622  0001FA  A0D8               	btfss	status,0,c
   623  0001FC  0012               	return	
   624                           
   625                           ;main.c: 302: TMR0 = 0x00;
   626  0001FE  0E00               	movlw	0
   627  000200  6ED7               	movwf	4055,c	;volatile
   628  000202  0E00               	movlw	0
   629  000204  6ED6               	movwf	4054,c	;volatile
   630                           
   631                           ;main.c: 303: }
   632                           ;main.c: 304: } else if (rightState || leftState) {
   633  000206  0012               	return	
   634  000208                     l799:
   635  000208  5017               	movf	_rightState,w,c
   636  00020A  1018               	iorwf	_rightState+1,w,c
   637  00020C  A4D8               	btfss	status,2,c
   638  00020E  D004               	goto	l103
   639  000210  5019               	movf	_leftState,w,c
   640  000212  101A               	iorwf	_leftState+1,w,c
   641  000214  B4D8               	btfsc	status,2,c
   642  000216  0012               	return	
   643  000218                     l103:
   644                           
   645                           ;main.c: 307: LATAbits.LATA4 = 0;
   646  000218  9889               	bcf	3977,4,c	;volatile
   647                           
   648                           ;main.c: 308: LATAbits.LATA5 = 0;
   649  00021A  9A89               	bcf	3977,5,c	;volatile
   650                           
   651                           ;main.c: 309: rightState = 0;
   652  00021C  0E00               	movlw	0
   653  00021E  6E18               	movwf	_rightState+1,c
   654  000220  0E00               	movlw	0
   655  000222  6E17               	movwf	_rightState,c
   656                           
   657                           ;main.c: 310: leftState = 0;
   658  000224  0E00               	movlw	0
   659  000226  6E1A               	movwf	_leftState+1,c
   660  000228  0E00               	movlw	0
   661  00022A  6E19               	movwf	_leftState,c
   662  00022C  0012               	return	
   663  00022E                     __end_of_CheckPWMOutput:
   664                           	opt stack 0
   665                           tblptru	equ	0xFF8
   666                           tblptrh	equ	0xFF7
   667                           tblptrl	equ	0xFF6
   668                           tablat	equ	0xFF5
   669                           intcon	equ	0xFF2
   670                           intcon2	equ	0xFF1
   671                           postinc0	equ	0xFEE
   672                           wreg	equ	0xFE8
   673                           postdec1	equ	0xFE5
   674                           fsr1l	equ	0xFE1
   675                           status	equ	0xFD8
   676                           
   677 ;; *************** function _I2C_Slave_Read *****************
   678 ;; Defined at:
   679 ;;		line 191 in file "main.c"
   680 ;; Parameters:    Size  Location     Type
   681 ;;		None
   682 ;; Auto vars:     Size  Location     Type
   683 ;;		None
   684 ;; Return value:  Size  Location     Type
   685 ;;                  1    wreg      void 
   686 ;; Registers used:
   687 ;;		wreg, status,2, status,0
   688 ;; Tracked objects:
   689 ;;		On entry : 0/0
   690 ;;		On exit  : 0/0
   691 ;;		Unchanged: 0/0
   692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   693 ;;      Params:         0       0       0       0
   694 ;;      Locals:         0       0       0       0
   695 ;;      Temps:         16       0       0       0
   696 ;;      Totals:        16       0       0       0
   697 ;;Total ram usage:       16 bytes
   698 ;; Hardware stack levels used:    1
   699 ;; This function calls:
   700 ;;		Nothing
   701 ;; This function is called by:
   702 ;;		Interrupt level 2
   703 ;; This function uses a non-reentrant model
   704 ;;
   705                           
   706                           	psect	intcode
   707  000008                     __pintcode:
   708                           	opt stack 0
   709  000008                     _I2C_Slave_Read:
   710                           	opt stack 29
   711                           
   712                           ;incstack = 0
   713  000008  8221               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
   714  00000A  CFFA F003          	movff	pclath,??_I2C_Slave_Read+2
   715  00000E  CFFB F004          	movff	pclatu,??_I2C_Slave_Read+3
   716  000012  CFE9 F005          	movff	fsr0l,??_I2C_Slave_Read+4
   717  000016  CFEA F006          	movff	fsr0h,??_I2C_Slave_Read+5
   718  00001A  CFE1 F007          	movff	fsr1l,??_I2C_Slave_Read+6
   719  00001E  CFE2 F008          	movff	fsr1h,??_I2C_Slave_Read+7
   720  000022  CFD9 F009          	movff	fsr2l,??_I2C_Slave_Read+8
   721  000026  CFDA F00A          	movff	fsr2h,??_I2C_Slave_Read+9
   722  00002A  CFF3 F00B          	movff	prodl,??_I2C_Slave_Read+10
   723  00002E  CFF4 F00C          	movff	prodh,??_I2C_Slave_Read+11
   724  000032  CFF6 F00D          	movff	tblptrl,??_I2C_Slave_Read+12
   725  000036  CFF7 F00E          	movff	tblptrh,??_I2C_Slave_Read+13
   726  00003A  CFF8 F00F          	movff	tblptru,??_I2C_Slave_Read+14
   727  00003E  CFF5 F010          	movff	tablat,??_I2C_Slave_Read+15
   728                           
   729                           ;main.c: 194: if(PIR1bits.SSPIF == 1)
   730  000042  A69E               	btfss	3998,3,c	;volatile
   731  000044  D071               	goto	i2l89
   732                           
   733                           ;main.c: 195: {
   734                           ;main.c: 196: z = SSPBUF;
   735  000046  CFC9 F015          	movff	4041,_z	;volatile
   736  00004A  6A16               	clrf	_z+1,c
   737                           
   738                           ;main.c: 199: SSPCON1bits.CKP = 0;
   739  00004C  98C6               	bcf	4038,4,c	;volatile
   740                           
   741                           ;main.c: 202: if ((SSPCON1bits.SSPOV) || (SSPCON1bits.WCOL))
   742  00004E  BCC6               	btfsc	4038,6,c	;volatile
   743  000050  D002               	goto	i2l67
   744  000052  AEC6               	btfss	4038,7,c	;volatile
   745  000054  D003               	goto	i2l65
   746  000056                     i2l67:
   747                           
   748                           ;main.c: 203: {
   749                           ;main.c: 204: SSPCON1bits.SSPOV = 0;
   750  000056  9CC6               	bcf	4038,6,c	;volatile
   751                           
   752                           ;main.c: 205: SSPCON1bits.WCOL = 0;
   753  000058  9EC6               	bcf	4038,7,c	;volatile
   754  00005A  D02B               	goto	i2l73
   755  00005C                     i2l65:
   756  00005C  AAC7               	btfss	4039,5,c	;volatile
   757  00005E  B4C7               	btfsc	4039,2,c	;volatile
   758  000060  D008               	goto	i2l69
   759                           
   760                           ;main.c: 210: state = z>>1;
   761  000062  90D8               	bcf	status,0,c
   762  000064  3016               	rrcf	_z+1,w,c
   763  000066  6E01               	movwf	??_I2C_Slave_Read& (0+255),c
   764  000068  3015               	rrcf	_z,w,c
   765  00006A  6E11               	movwf	_state,c
   766  00006C  C001  F012         	movff	??_I2C_Slave_Read,_state+1
   767  000070  D020               	goto	i2l73
   768  000072                     i2l69:
   769  000072  BAC7               	btfsc	4039,5,c	;volatile
   770  000074  B4C7               	btfsc	4039,2,c	;volatile
   771  000076  D01F               	goto	i2l71
   772                           
   773                           ;main.c: 214: if (state == 0b0100011) {
   774  000078  0E23               	movlw	35
   775  00007A  1811               	xorwf	_state,w,c
   776  00007C  1012               	iorwf	_state+1,w,c
   777  00007E  A4D8               	btfss	status,2,c
   778  000080  D005               	goto	i2l841
   779                           
   780                           ;main.c: 215: leftDuty = z;
   781  000082  C015  F01B         	movff	_z,_leftDuty
   782  000086  C016  F01C         	movff	_z+1,_leftDuty+1
   783                           
   784                           ;main.c: 216: } else if (state == 0b0100111) {
   785  00008A  D013               	goto	i2l73
   786  00008C                     i2l841:
   787  00008C  0E27               	movlw	39
   788  00008E  1811               	xorwf	_state,w,c
   789  000090  1012               	iorwf	_state+1,w,c
   790  000092  A4D8               	btfss	status,2,c
   791  000094  D005               	goto	i2l845
   792                           
   793                           ;main.c: 217: rightDuty = z;
   794  000096  C015  F01D         	movff	_z,_rightDuty
   795  00009A  C016  F01E         	movff	_z+1,_rightDuty+1
   796                           
   797                           ;main.c: 218: } else if (state == 0b0101011) {
   798  00009E  D009               	goto	i2l73
   799  0000A0                     i2l845:
   800  0000A0  0E2B               	movlw	43
   801  0000A2  1811               	xorwf	_state,w,c
   802  0000A4  1012               	iorwf	_state+1,w,c
   803  0000A6  A4D8               	btfss	status,2,c
   804  0000A8  D004               	goto	i2l73
   805                           
   806                           ;main.c: 219: PWMEnable = z;
   807  0000AA  C015  F01F         	movff	_z,_PWMEnable
   808  0000AE  C016  F020         	movff	_z+1,_PWMEnable+1
   809  0000B2                     i2l73:
   810                           
   811                           ;main.c: 220: }
   812                           ;main.c: 221: SSPCON1bits.CKP = 1;
   813  0000B2  88C6               	bsf	4038,4,c	;volatile
   814                           
   815                           ;main.c: 222: } else if(!SSPSTATbits.D_nA && SSPSTATbits.R_nW) {
   816  0000B4  D038               	goto	i2l68
   817  0000B6                     i2l71:
   818  0000B6  AAC7               	btfss	4039,5,c	;volatile
   819  0000B8  A4C7               	btfss	4039,2,c	;volatile
   820  0000BA  D035               	goto	i2l68
   821                           
   822                           ;main.c: 223: if (z>>1 == 0b0100011){
   823  0000BC  90D8               	bcf	status,0,c
   824  0000BE  3016               	rrcf	_z+1,w,c
   825  0000C0  6E02               	movwf	(??_I2C_Slave_Read+1)& (0+255),c
   826  0000C2  3015               	rrcf	_z,w,c
   827  0000C4  6E01               	movwf	??_I2C_Slave_Read& (0+255),c
   828  0000C6  0E23               	movlw	35
   829  0000C8  1801               	xorwf	??_I2C_Slave_Read,w,c
   830  0000CA  1002               	iorwf	??_I2C_Slave_Read+1,w,c
   831  0000CC  A4D8               	btfss	status,2,c
   832  0000CE  D003               	goto	i2l855
   833                           
   834                           ;main.c: 225: SSPBUF = leftDuty;
   835  0000D0  C01B  FFC9         	movff	_leftDuty,4041	;volatile
   836                           
   837                           ;main.c: 226: } else if (z>>1 == 0b0100111){
   838  0000D4  D025               	goto	i2l80
   839  0000D6                     i2l855:
   840  0000D6  90D8               	bcf	status,0,c
   841  0000D8  3016               	rrcf	_z+1,w,c
   842  0000DA  6E02               	movwf	(??_I2C_Slave_Read+1)& (0+255),c
   843  0000DC  3015               	rrcf	_z,w,c
   844  0000DE  6E01               	movwf	??_I2C_Slave_Read& (0+255),c
   845  0000E0  0E27               	movlw	39
   846  0000E2  1801               	xorwf	??_I2C_Slave_Read,w,c
   847  0000E4  1002               	iorwf	??_I2C_Slave_Read+1,w,c
   848  0000E6  A4D8               	btfss	status,2,c
   849  0000E8  D003               	goto	i2l859
   850                           
   851                           ;main.c: 228: SSPBUF = rightDuty;
   852  0000EA  C01D  FFC9         	movff	_rightDuty,4041	;volatile
   853                           
   854                           ;main.c: 229: } else if (z>>1 == 0b0101011){
   855  0000EE  D018               	goto	i2l80
   856  0000F0                     i2l859:
   857  0000F0  90D8               	bcf	status,0,c
   858  0000F2  3016               	rrcf	_z+1,w,c
   859  0000F4  6E02               	movwf	(??_I2C_Slave_Read+1)& (0+255),c
   860  0000F6  3015               	rrcf	_z,w,c
   861  0000F8  6E01               	movwf	??_I2C_Slave_Read& (0+255),c
   862  0000FA  0E2B               	movlw	43
   863  0000FC  1801               	xorwf	??_I2C_Slave_Read,w,c
   864  0000FE  1002               	iorwf	??_I2C_Slave_Read+1,w,c
   865  000100  A4D8               	btfss	status,2,c
   866  000102  D003               	goto	i2l863
   867                           
   868                           ;main.c: 231: SSPBUF = PWMEnable;
   869  000104  C01F  FFC9         	movff	_PWMEnable,4041	;volatile
   870                           
   871                           ;main.c: 232: } else if (z>>1 == 0b0101111){
   872  000108  D00B               	goto	i2l80
   873  00010A                     i2l863:
   874  00010A  90D8               	bcf	status,0,c
   875  00010C  3016               	rrcf	_z+1,w,c
   876  00010E  6E02               	movwf	(??_I2C_Slave_Read+1)& (0+255),c
   877  000110  3015               	rrcf	_z,w,c
   878  000112  6E01               	movwf	??_I2C_Slave_Read& (0+255),c
   879  000114  0E2F               	movlw	47
   880  000116  1801               	xorwf	??_I2C_Slave_Read,w,c
   881  000118  1002               	iorwf	??_I2C_Slave_Read+1,w,c
   882  00011A  B4D8               	btfsc	status,2,c
   883                           
   884                           ;main.c: 234: SSPBUF = TMR0;
   885  00011C  CFD6 FFC9          	movff	4054,4041	;volatile
   886  000120                     i2l80:
   887                           
   888                           ;main.c: 235: }
   889                           ;main.c: 237: SSPCON1bits.CKP = 1;
   890  000120  88C6               	bsf	4038,4,c	;volatile
   891  000122                     i2l86:
   892  000122  B0C7               	btfsc	4039,0,c	;volatile
   893  000124  D7FE               	goto	i2l86
   894  000126                     i2l68:
   895                           
   896                           ;main.c: 240: }
   897                           ;main.c: 242: PIR1bits.SSPIF = 0;
   898  000126  969E               	bcf	3998,3,c	;volatile
   899  000128                     i2l89:
   900  000128  C010  FFF5         	movff	??_I2C_Slave_Read+15,tablat
   901  00012C  C00F  FFF8         	movff	??_I2C_Slave_Read+14,tblptru
   902  000130  C00E  FFF7         	movff	??_I2C_Slave_Read+13,tblptrh
   903  000134  C00D  FFF6         	movff	??_I2C_Slave_Read+12,tblptrl
   904  000138  C00C  FFF4         	movff	??_I2C_Slave_Read+11,prodh
   905  00013C  C00B  FFF3         	movff	??_I2C_Slave_Read+10,prodl
   906  000140  C00A  FFDA         	movff	??_I2C_Slave_Read+9,fsr2h
   907  000144  C009  FFD9         	movff	??_I2C_Slave_Read+8,fsr2l
   908  000148  C008  FFE2         	movff	??_I2C_Slave_Read+7,fsr1h
   909  00014C  C007  FFE1         	movff	??_I2C_Slave_Read+6,fsr1l
   910  000150  C006  FFEA         	movff	??_I2C_Slave_Read+5,fsr0h
   911  000154  C005  FFE9         	movff	??_I2C_Slave_Read+4,fsr0l
   912  000158  C004  FFFB         	movff	??_I2C_Slave_Read+3,pclatu
   913  00015C  C003  FFFA         	movff	??_I2C_Slave_Read+2,pclath
   914  000160  9221               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
   915  000162  0011               	retfie		f
   916  000164                     __end_of_I2C_Slave_Read:
   917                           	opt stack 0
   918  0000                     pclatu	equ	0xFFB
   919                           pclath	equ	0xFFA
   920                           tblptru	equ	0xFF8
   921                           tblptrh	equ	0xFF7
   922                           tblptrl	equ	0xFF6
   923                           tablat	equ	0xFF5
   924                           prodh	equ	0xFF4
   925                           prodl	equ	0xFF3
   926                           intcon	equ	0xFF2
   927                           intcon2	equ	0xFF1
   928                           postinc0	equ	0xFEE
   929                           fsr0h	equ	0xFEA
   930                           fsr0l	equ	0xFE9
   931                           wreg	equ	0xFE8
   932                           postdec1	equ	0xFE5
   933                           fsr1h	equ	0xFE2
   934                           fsr1l	equ	0xFE1
   935                           fsr2h	equ	0xFDA
   936                           fsr2l	equ	0xFD9
   937                           status	equ	0xFD8
   938                           pclatu	equ	0xFFB
   939                           pclath	equ	0xFFA
   940                           tblptru	equ	0xFF8
   941                           tblptrh	equ	0xFF7
   942                           tblptrl	equ	0xFF6
   943                           tablat	equ	0xFF5
   944                           prodh	equ	0xFF4
   945                           prodl	equ	0xFF3
   946                           intcon	equ	0xFF2
   947                           intcon2	equ	0xFF1
   948                           postinc0	equ	0xFEE
   949                           fsr0h	equ	0xFEA
   950                           fsr0l	equ	0xFE9
   951                           wreg	equ	0xFE8
   952                           postdec1	equ	0xFE5
   953                           fsr1h	equ	0xFE2
   954                           fsr1l	equ	0xFE1
   955                           fsr2h	equ	0xFDA
   956                           fsr2l	equ	0xFD9
   957                           status	equ	0xFD8
   958                           
   959                           	psect	rparam
   960  0000                     pclatu	equ	0xFFB
   961                           pclath	equ	0xFFA
   962                           tblptru	equ	0xFF8
   963                           tblptrh	equ	0xFF7
   964                           tblptrl	equ	0xFF6
   965                           tablat	equ	0xFF5
   966                           prodh	equ	0xFF4
   967                           prodl	equ	0xFF3
   968                           intcon	equ	0xFF2
   969                           intcon2	equ	0xFF1
   970                           postinc0	equ	0xFEE
   971                           fsr0h	equ	0xFEA
   972                           fsr0l	equ	0xFE9
   973                           wreg	equ	0xFE8
   974                           postdec1	equ	0xFE5
   975                           fsr1h	equ	0xFE2
   976                           fsr1l	equ	0xFE1
   977                           fsr2h	equ	0xFDA
   978                           fsr2l	equ	0xFD9
   979                           status	equ	0xFD8
   980                           
   981                           	psect	temp
   982  000021                     btemp:
   983                           	opt stack 0
   984  000021                     	ds	1
   985  0000                     int$flags	set	btemp
   986                           pclatu	equ	0xFFB
   987                           pclath	equ	0xFFA
   988                           tblptru	equ	0xFF8
   989                           tblptrh	equ	0xFF7
   990                           tblptrl	equ	0xFF6
   991                           tablat	equ	0xFF5
   992                           prodh	equ	0xFF4
   993                           prodl	equ	0xFF3
   994                           intcon	equ	0xFF2
   995                           intcon2	equ	0xFF1
   996                           postinc0	equ	0xFEE
   997                           fsr0h	equ	0xFEA
   998                           fsr0l	equ	0xFE9
   999                           wreg	equ	0xFE8
  1000                           postdec1	equ	0xFE5
  1001                           fsr1h	equ	0xFE2
  1002                           fsr1l	equ	0xFE1
  1003                           fsr2h	equ	0xFDA
  1004                           fsr2l	equ	0xFD9
  1005                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        6
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     16      32
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    None.

Critical Paths under _I2C_Slave_Read in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _I2C_Slave_Read in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _I2C_Slave_Read in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _I2C_Slave_Read in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                     _CheckPWMOutput
                            _InitI2C
                            _InitPWM
 ---------------------------------------------------------------------------------
 (1) _InitPWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckPWMOutput                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _I2C_Slave_Read                                      16    16      0       0
                                              0 COMRAM    16    16      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckPWMOutput
   _InitI2C
   _InitPWM

 _I2C_Slave_Read (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       6        0.0%
BANK2              100      0       0       7        0.0%
BITBANK1           100      0       0       9        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     10      20       1       34.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      20       8        0.0%
DATA                 0      0      20      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sat Jun  3 14:41:12 2017

             _SSPMSKbits 000F6F                        _z 0015              _SSPSTATbits 000FC7  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000                      l103 0218  
                    l765 0192                      l775 01B2                      l785 01D4  
                    l795 01F4                      l875 02AA                      l799 0208  
           __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000             __CFG_BORV$19 000000  
                    wreg 000FE8             __CFG_LVP$OFF 000000                     _LATC 000F8B  
                   i2l71 00B6                     i2l80 0120                     i2l73 00B2  
                   i2l65 005C                     i2l67 0056                     i2l68 0126  
                   i2l69 0072                     i2l86 0122                     i2l89 0128  
                   _TMR0 000FD6                     _main 028E                     fsr0h 000FEA  
                   fsr1h 000FE2                     fsr2h 000FDA                     fsr0l 000FE9  
                   fsr1l 000FE1                     fsr2l 000FD9                     btemp 0021  
                   prodh 000FF4                     prodl 000FF3                     start 0164  
          __CFG_IESO$OFF 000000            __CFG_FOSC$IRC 000000             ___param_bank 000000  
        __end_of_InitI2C 028E          __end_of_InitPWM 02CA                    ?_main 0001  
                  i2l841 008C                    i2l845 00A0                    i2l863 010A  
                  i2l855 00D6                    i2l859 00F0           __CFG_BBSIZ$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
                  _count 0013                    _state 0011                    pclath 000FFA  
                  tablat 000FF5                    status 000FD8           __CFG_HFOFST$ON 000000  
         __CFG_MCLRE$OFF 000000          __initialization 022E             __end_of_main 02B0  
         __CFG_PCLKEN$ON 000000                   ??_main 0011            __activetblptr 000000  
         __CFG_PLLEN$OFF 000000           __CFG_WDTEN$OFF 000000                   _SSPADD 000FC8  
                 _SSPBUF 000FC9                ??_InitI2C 0011                ??_InitPWM 0011  
         __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000                   clear_0 0254  
           __pdataCOMRAM 001B                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0060  __end_of__initialization 025A  
          ___rparam_used 000001           __pcstackCOMRAM 0001  __size_of_I2C_Slave_Read 015C  
__size_of_CheckPWMOutput 00C6          __CFG_USBDIV$OFF 000000                  _InitI2C 0264  
                _InitPWM 02B0          __CFG_PWRTEN$OFF 000000                  __Hparam 0000  
                __Lparam 0000                  __pcinit 022E                  __ramtop 0300  
                __ptext0 028E                  __ptext1 02B0                  __ptext2 0264  
                __ptext3 0168                _T0CONbits 000FD5     end_of_initialization 025A  
             _rightState 0017           _I2C_Slave_Read 0008                  postdec1 000FE5  
                postinc0 000FEE                _TRISAbits 000F92                _TRISBbits 000F93  
              _TRISCbits 000F94                _PWMEnable 001F   __end_of_I2C_Slave_Read 0164  
          __pidataCOMRAM 02CA           _CheckPWMOutput 0168      start_initialization 022E  
        ?_I2C_Slave_Read 0001   __end_of_CheckPWMOutput 022E              __pbssCOMRAM 0011  
               ?_InitI2C 0001                 ?_InitPWM 0001                __pintcode 0008  
        ?_CheckPWMOutput 0001                _leftState 0019                 _LATAbits 000F89  
               _LATCbits 000F8B                 _PIE1bits 000F9D                _rightDuty 001D  
               _PIR1bits 000F9E         __CFG_WDTPS$32768 000000                 _WPUBbits 000F78  
            _INTCON2bits 000FF1                copy_data0 0242         __size_of_InitI2C 002A  
       __size_of_InitPWM 001A                 __Hrparam 0000                 __Lrparam 0000  
     __CFG_BOREN$SBORDIS 000000                 _leftDuty 001B         ??_I2C_Slave_Read 0001  
          __size_of_main 0022                 int$flags 0021               _INTCONbits 000FF2  
               intlevel2 0000               _OSCCONbits 000FD3         ??_CheckPWMOutput 0011  
   __CFG_CPUDIV$NOCLKDIV 000000              _SSPCON1bits 000FC6              _SSPCON2bits 000FC5  
