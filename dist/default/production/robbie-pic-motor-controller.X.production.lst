

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Mon Jun  5 12:03:41 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F14K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    27  0000                     
    28                           ; Version 1.42
    29                           ; Generated 13/04/2017 GMT
    30                           ; 
    31                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F14K50 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     
    63                           	psect	idataCOMRAM
    64  0019F2                     __pidataCOMRAM:
    65                           	opt stack 0
    66                           
    67                           ;initializer for _AccelRate
    68  0019F2  0096               	dw	150
    69                           
    70                           ;initializer for _PWMEnable
    71  0019F4  01                 	db	1
    72  0000                     _TMR0	set	4054
    73  0000                     _T0CONbits	set	4053
    74  0000                     _LATAbits	set	3977
    75  0000                     _LATBbits	set	3978
    76  0000                     _LATCbits	set	3979
    77  0000                     _SSPBUF	set	4041
    78  0000                     _INTCONbits	set	4082
    79  0000                     _PIE1bits	set	3997
    80  0000                     _PIR1bits	set	3998
    81  0000                     _SSPADD	set	4040
    82  0000                     _SSPCON2bits	set	4037
    83  0000                     _SSPCON1bits	set	4038
    84  0000                     _SSPSTATbits	set	4039
    85  0000                     _WPUBbits	set	3960
    86  0000                     _INTCON2bits	set	4081
    87  0000                     _OSCCONbits	set	4051
    88  0000                     _TRISC	set	3988
    89  0000                     _TRISB	set	3987
    90  0000                     _TRISA	set	3986
    91                           
    92                           ; #config settings
    93  0000                     
    94                           	psect	cinit
    95  001926                     __pcinit:
    96                           	opt stack 0
    97  001926                     start_initialization:
    98                           	opt stack 0
    99  001926                     __initialization:
   100                           	opt stack 0
   101                           
   102                           ; Initialize objects allocated to COMRAM (3 bytes)
   103                           ; load TBLPTR registers with __pidataCOMRAM
   104  001926  0EF2               	movlw	low __pidataCOMRAM
   105  001928  6EF6               	movwf	tblptrl,c
   106  00192A  0E19               	movlw	high __pidataCOMRAM
   107  00192C  6EF7               	movwf	tblptrh,c
   108  00192E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   109  001930  6EF8               	movwf	tblptru,c
   110  001932  0009               	tblrd		*+	;fetch initializer
   111  001934  CFF5 F046          	movff	tablat,__pdataCOMRAM
   112  001938  0009               	tblrd		*+	;fetch initializer
   113  00193A  CFF5 F047          	movff	tablat,__pdataCOMRAM+1
   114  00193E  0009               	tblrd		*+	;fetch initializer
   115  001940  CFF5 F048          	movff	tablat,__pdataCOMRAM+2
   116                           
   117                           ; Clear objects allocated to COMRAM (37 bytes)
   118  001944  EE00  F001         	lfsr	0,__pbssCOMRAM
   119  001948  0E25               	movlw	37
   120  00194A                     clear_0:
   121  00194A  6AEE               	clrf	postinc0,c
   122  00194C  06E8               	decf	wreg,f,c
   123  00194E  E1FD               	bnz	clear_0
   124  001950                     end_of_initialization:
   125                           	opt stack 0
   126  001950                     __end_of__initialization:
   127                           	opt stack 0
   128  001950  9049               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   129  001952  9249               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   130  001954  0E00               	movlw	low (__Lmediumconst shr (0+16))
   131  001956  6EF8               	movwf	tblptru,c
   132  001958  0100               	movlb	0
   133  00195A  EFE6  F00C         	goto	_main	;jump to C main() function
   134                           tblptru	equ	0xFF8
   135                           tblptrh	equ	0xFF7
   136                           tblptrl	equ	0xFF6
   137                           tablat	equ	0xFF5
   138                           postinc0	equ	0xFEE
   139                           wreg	equ	0xFE8
   140                           
   141                           	psect	bssCOMRAM
   142  000001                     __pbssCOMRAM:
   143                           	opt stack 0
   144  000001                     _Motors:
   145                           	opt stack 0
   146  000001                     	ds	28
   147  00001D                     _i:
   148                           	opt stack 0
   149  00001D                     	ds	2
   150  00001F                     _AccelCount:
   151                           	opt stack 0
   152  00001F                     	ds	2
   153  000021                     _state:
   154                           	opt stack 0
   155  000021                     	ds	1
   156  000022                     _currentByte:
   157                           	opt stack 0
   158  000022                     	ds	1
   159  000023                     _MinimumDuty:
   160                           	opt stack 0
   161  000023                     	ds	1
   162  000024                     _AccelType:
   163                           	opt stack 0
   164  000024                     	ds	1
   165  000025                     _PWMPause:
   166                           	opt stack 0
   167  000025                     	ds	1
   168                           tblptru	equ	0xFF8
   169                           tblptrh	equ	0xFF7
   170                           tblptrl	equ	0xFF6
   171                           tablat	equ	0xFF5
   172                           postinc0	equ	0xFEE
   173                           wreg	equ	0xFE8
   174                           
   175                           	psect	dataCOMRAM
   176  000046                     __pdataCOMRAM:
   177                           	opt stack 0
   178  000046                     _AccelRate:
   179                           	opt stack 0
   180  000046                     	ds	2
   181  000048                     _PWMEnable:
   182                           	opt stack 0
   183  000048                     	ds	1
   184                           tblptru	equ	0xFF8
   185                           tblptrh	equ	0xFF7
   186                           tblptrl	equ	0xFF6
   187                           tablat	equ	0xFF5
   188                           postinc0	equ	0xFEE
   189                           wreg	equ	0xFE8
   190                           
   191                           	psect	cstackBANK0
   192  000060                     __pcstackBANK0:
   193                           	opt stack 0
   194  000060                     ??_ExponentialProfile:
   195  000060                     InitPWM@i:
   196                           	opt stack 0
   197                           
   198                           ; 2 bytes @ 0x0
   199  000060                     	ds	2
   200  000062                     InitPWM@n:
   201                           	opt stack 0
   202                           
   203                           ; 2 bytes @ 0x2
   204  000062                     	ds	5
   205  000067                     StopMotor@index:
   206                           	opt stack 0
   207  000067                     AccelerateMotor@index:
   208                           	opt stack 0
   209                           
   210                           ; 2 bytes @ 0x7
   211  000067                     	ds	2
   212  000069                     ??_AccelerateMotor:
   213                           
   214                           ; 1 bytes @ 0x9
   215  000069                     	ds	2
   216  00006B                     ??_AcceleratePWM:
   217                           
   218                           ; 1 bytes @ 0xB
   219  00006B                     	ds	2
   220  00006D                     AcceleratePWM@i:
   221                           	opt stack 0
   222                           
   223                           ; 2 bytes @ 0xD
   224  00006D                     	ds	2
   225  00006F                     ??_CheckPWMOutput:
   226                           
   227                           ; 1 bytes @ 0xF
   228  00006F                     	ds	2
   229  000071                     CheckPWMOutput@i:
   230                           	opt stack 0
   231                           
   232                           ; 2 bytes @ 0x11
   233  000071                     	ds	2
   234                           tblptru	equ	0xFF8
   235                           tblptrh	equ	0xFF7
   236                           tblptrl	equ	0xFF6
   237                           tablat	equ	0xFF5
   238                           postinc0	equ	0xFEE
   239                           wreg	equ	0xFE8
   240                           
   241                           	psect	cstackCOMRAM
   242  000026                     __pcstackCOMRAM:
   243                           	opt stack 0
   244  000026                     ?i2___wmul:
   245                           	opt stack 0
   246  000026                     i2___wmul@multiplier:
   247                           	opt stack 0
   248                           
   249                           ; 2 bytes @ 0x0
   250  000026                     	ds	2
   251  000028                     i2___wmul@multiplicand:
   252                           	opt stack 0
   253                           
   254                           ; 2 bytes @ 0x2
   255  000028                     	ds	2
   256  00002A                     i2___wmul@product:
   257                           	opt stack 0
   258                           
   259                           ; 2 bytes @ 0x4
   260  00002A                     	ds	2
   261  00002C                     ??_I2C_Slave_Read:
   262                           
   263                           ; 1 bytes @ 0x6
   264  00002C                     	ds	16
   265  00003C                     ?___wmul:
   266                           	opt stack 0
   267  00003C                     ___wmul@multiplier:
   268                           	opt stack 0
   269                           
   270                           ; 2 bytes @ 0x16
   271  00003C                     	ds	2
   272  00003E                     ___wmul@multiplicand:
   273                           	opt stack 0
   274                           
   275                           ; 2 bytes @ 0x18
   276  00003E                     	ds	2
   277  000040                     ___wmul@product:
   278                           	opt stack 0
   279                           
   280                           ; 2 bytes @ 0x1A
   281  000040                     	ds	2
   282  000042                     SetPin@value:
   283                           	opt stack 0
   284  000042                     ExponentialProfile@target:
   285                           	opt stack 0
   286                           
   287                           ; 1 bytes @ 0x1C
   288  000042                     	ds	1
   289  000043                     SetPin@pin:
   290                           	opt stack 0
   291  000043                     ExponentialProfile@change:
   292                           	opt stack 0
   293                           
   294                           ; 1 bytes @ 0x1D
   295  000043                     	ds	1
   296  000044                     ExponentialProfile@current:
   297                           	opt stack 0
   298                           
   299                           ; 1 bytes @ 0x1E
   300  000044                     	ds	1
   301  000045                     ??_StopMotor:
   302                           
   303                           ; 1 bytes @ 0x1F
   304  000045                     	ds	1
   305  000046                     tblptru	equ	0xFF8
   306                           tblptrh	equ	0xFF7
   307                           tblptrl	equ	0xFF6
   308                           tablat	equ	0xFF5
   309                           postinc0	equ	0xFEE
   310                           wreg	equ	0xFE8
   311                           
   312                           ; 1 bytes @ 0x20
   313 ;;
   314 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   315 ;;
   316 ;; *************** function _main *****************
   317 ;; Defined at:
   318 ;;		line 115 in file "main.c"
   319 ;; Parameters:    Size  Location     Type
   320 ;;		None
   321 ;; Auto vars:     Size  Location     Type
   322 ;;		None
   323 ;; Return value:  Size  Location     Type
   324 ;;                  1    wreg      void 
   325 ;; Registers used:
   326 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   327 ;; Tracked objects:
   328 ;;		On entry : 0/0
   329 ;;		On exit  : 0/0
   330 ;;		Unchanged: 0/0
   331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   332 ;;      Params:         0       0       0       0
   333 ;;      Locals:         0       0       0       0
   334 ;;      Temps:          0       0       0       0
   335 ;;      Totals:         0       0       0       0
   336 ;;Total ram usage:        0 bytes
   337 ;; Hardware stack levels required when called:    6
   338 ;; This function calls:
   339 ;;		_CheckPWMOutput
   340 ;;		_InitI2C
   341 ;;		_InitPWM
   342 ;;		_InitPorts
   343 ;; This function is called by:
   344 ;;		Startup code after reset
   345 ;; This function uses a non-reentrant model
   346 ;;
   347                           
   348                           	psect	text0
   349  0019CC                     __ptext0:
   350                           	opt stack 0
   351  0019CC                     _main:
   352                           	opt stack 25
   353                           
   354                           ;main.c: 117: OSCCONbits.IRCF = 0b111;
   355                           
   356                           ;incstack = 0
   357  0019CC  88D3               	bsf	4051,4,c	;volatile
   358  0019CE  8AD3               	bsf	4051,5,c	;volatile
   359  0019D0  8CD3               	bsf	4051,6,c	;volatile
   360                           
   361                           ;main.c: 120: InitPorts();
   362  0019D2  ECF2  F00C         	call	_InitPorts	;wreg free
   363                           
   364                           ;main.c: 121: InitI2C();
   365  0019D6  ECD5  F00C         	call	_InitI2C	;wreg free
   366                           
   367                           ;main.c: 122: InitPWM();
   368  0019DA  EC6C  F00A         	call	_InitPWM	;wreg free
   369  0019DE                     l1982:
   370                           
   371                           ;main.c: 127: CheckPWMOutput();
   372  0019DE  ECD3  F001         	call	_CheckPWMOutput	;wreg free
   373  0019E2  D7FD               	goto	l1982
   374  0019E4                     __end_of_main:
   375                           	opt stack 0
   376                           tblptru	equ	0xFF8
   377                           tblptrh	equ	0xFF7
   378                           tblptrl	equ	0xFF6
   379                           tablat	equ	0xFF5
   380                           postinc0	equ	0xFEE
   381                           wreg	equ	0xFE8
   382                           
   383 ;; *************** function _InitPorts *****************
   384 ;; Defined at:
   385 ;;		line 106 in file "main.c"
   386 ;; Parameters:    Size  Location     Type
   387 ;;		None
   388 ;; Auto vars:     Size  Location     Type
   389 ;;		None
   390 ;; Return value:  Size  Location     Type
   391 ;;                  1    wreg      void 
   392 ;; Registers used:
   393 ;;		wreg, status,2
   394 ;; Tracked objects:
   395 ;;		On entry : 0/0
   396 ;;		On exit  : 0/0
   397 ;;		Unchanged: 0/0
   398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   399 ;;      Params:         0       0       0       0
   400 ;;      Locals:         0       0       0       0
   401 ;;      Temps:          0       0       0       0
   402 ;;      Totals:         0       0       0       0
   403 ;;Total ram usage:        0 bytes
   404 ;; Hardware stack levels used:    1
   405 ;; Hardware stack levels required when called:    2
   406 ;; This function calls:
   407 ;;		Nothing
   408 ;; This function is called by:
   409 ;;		_main
   410 ;; This function uses a non-reentrant model
   411 ;;
   412                           
   413                           	psect	text1
   414  0019E4                     __ptext1:
   415                           	opt stack 0
   416  0019E4                     _InitPorts:
   417                           	opt stack 28
   418                           
   419                           ;main.c: 108: TRISA = 0x00;
   420                           
   421                           ;incstack = 0
   422  0019E4  0E00               	movlw	0
   423  0019E6  6E92               	movwf	3986,c	;volatile
   424                           
   425                           ;main.c: 110: TRISB = 0b01010000;
   426  0019E8  0E50               	movlw	80
   427  0019EA  6E93               	movwf	3987,c	;volatile
   428                           
   429                           ;main.c: 112: TRISC = 0x00;
   430  0019EC  0E00               	movlw	0
   431  0019EE  6E94               	movwf	3988,c	;volatile
   432  0019F0  0012               	return		;funcret
   433  0019F2                     __end_of_InitPorts:
   434                           	opt stack 0
   435                           tblptru	equ	0xFF8
   436                           tblptrh	equ	0xFF7
   437                           tblptrl	equ	0xFF6
   438                           tablat	equ	0xFF5
   439                           postinc0	equ	0xFEE
   440                           wreg	equ	0xFE8
   441                           
   442 ;; *************** function _InitPWM *****************
   443 ;; Defined at:
   444 ;;		line 56 in file "pwm.c"
   445 ;; Parameters:    Size  Location     Type
   446 ;;		None
   447 ;; Auto vars:     Size  Location     Type
   448 ;;  n               2    2[BANK0 ] int 
   449 ;;  i               2    0[BANK0 ] int 
   450 ;; Return value:  Size  Location     Type
   451 ;;                  1    wreg      void 
   452 ;; Registers used:
   453 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   454 ;; Tracked objects:
   455 ;;		On entry : 0/0
   456 ;;		On exit  : 0/0
   457 ;;		Unchanged: 0/0
   458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   459 ;;      Params:         0       0       0       0
   460 ;;      Locals:         0       4       0       0
   461 ;;      Temps:          0       0       0       0
   462 ;;      Totals:         0       4       0       0
   463 ;;Total ram usage:        4 bytes
   464 ;; Hardware stack levels used:    1
   465 ;; Hardware stack levels required when called:    3
   466 ;; This function calls:
   467 ;;		_SetPin
   468 ;;		___wmul
   469 ;; This function is called by:
   470 ;;		_main
   471 ;; This function uses a non-reentrant model
   472 ;;
   473                           
   474                           	psect	text2
   475  0014D8                     __ptext2:
   476                           	opt stack 0
   477  0014D8                     _InitPWM:
   478                           	opt stack 27
   479                           
   480                           ;pwm.c: 58: T0CONbits.T0PS = 0b011;
   481                           
   482                           ;incstack = 0
   483  0014D8  50D5               	movf	4053,w,c	;volatile
   484  0014DA  0BF8               	andlw	-8
   485  0014DC  0903               	iorlw	3
   486  0014DE  6ED5               	movwf	4053,c	;volatile
   487                           
   488                           ;pwm.c: 60: T0CONbits.PSA = 0;
   489  0014E0  96D5               	bcf	4053,3,c	;volatile
   490                           
   491                           ;pwm.c: 62: T0CONbits.T0CS = 0;
   492  0014E2  9AD5               	bcf	4053,5,c	;volatile
   493                           
   494                           ;pwm.c: 64: T0CONbits.T08BIT = 1;
   495  0014E4  8CD5               	bsf	4053,6,c	;volatile
   496                           
   497                           ;pwm.c: 66: T0CONbits.TMR0ON = 1;
   498  0014E6  8ED5               	bsf	4053,7,c	;volatile
   499                           
   500                           ;pwm.c: 69: int n;
   501                           ;pwm.c: 70: for (n = 0; n < 4; n++) {
   502  0014E8  0E00               	movlw	0
   503  0014EA  0100               	movlb	0	; () banked
   504  0014EC  6F63               	movwf	(InitPWM@n+1)& (0+255),b
   505  0014EE  0E00               	movlw	0
   506  0014F0  6F62               	movwf	InitPWM@n& (0+255),b
   507                           
   508                           ; BSR set to: 0
   509  0014F2  0100               	movlb	0	; () banked
   510  0014F4  BF63               	btfsc	(InitPWM@n+1)& (0+255),7,b
   511  0014F6  D00A               	goto	l1886
   512  0014F8  0100               	movlb	0	; () banked
   513  0014FA  5163               	movf	(InitPWM@n+1)& (0+255),w,b
   514  0014FC  E106               	bnz	u2680
   515  0014FE  0E04               	movlw	4
   516  001500  0100               	movlb	0	; () banked
   517  001502  5D62               	subwf	InitPWM@n& (0+255),w,b
   518  001504  B0D8               	btfsc	status,0,c
   519  001506  D09E               	goto	l1892
   520  001508  D001               	goto	l1886
   521  00150A                     u2680:
   522                           
   523                           ; BSR set to: 0
   524  00150A  D09C               	goto	l1892
   525  00150C                     l1886:
   526                           
   527                           ; BSR set to: 0
   528                           ;pwm.c: 71: Motors[n].state = (unsigned char)0;
   529  00150C  C062  F03C         	movff	InitPWM@n,___wmul@multiplier
   530  001510  C063  F03D         	movff	InitPWM@n+1,___wmul@multiplier+1
   531  001514  0E00               	movlw	0
   532  001516  6E3F               	movwf	___wmul@multiplicand+1,c
   533  001518  0E07               	movlw	7
   534  00151A  6E3E               	movwf	___wmul@multiplicand,c
   535  00151C  ECAF  F00C         	call	___wmul	;wreg free
   536  001520  0E01               	movlw	low _Motors
   537  001522  243C               	addwf	?___wmul,w,c
   538  001524  6ED9               	movwf	fsr2l,c
   539  001526  0E00               	movlw	high _Motors
   540  001528  203D               	addwfc	?___wmul+1,w,c
   541  00152A  6EDA               	movwf	fsr2h,c
   542  00152C  90DF               	bcf	indf2,0,c
   543                           
   544                           ;pwm.c: 72: Motors[n].paused = (unsigned char)0;
   545  00152E  C062  F03C         	movff	InitPWM@n,___wmul@multiplier
   546  001532  C063  F03D         	movff	InitPWM@n+1,___wmul@multiplier+1
   547  001536  0E00               	movlw	0
   548  001538  6E3F               	movwf	___wmul@multiplicand+1,c
   549  00153A  0E07               	movlw	7
   550  00153C  6E3E               	movwf	___wmul@multiplicand,c
   551  00153E  ECAF  F00C         	call	___wmul	;wreg free
   552  001542  0E01               	movlw	low _Motors
   553  001544  243C               	addwf	?___wmul,w,c
   554  001546  6ED9               	movwf	fsr2l,c
   555  001548  0E00               	movlw	high _Motors
   556  00154A  203D               	addwfc	?___wmul+1,w,c
   557  00154C  6EDA               	movwf	fsr2h,c
   558  00154E  94DF               	bcf	indf2,2,c
   559                           
   560                           ;pwm.c: 73: Motors[n].enabled = (unsigned char)1;
   561  001550  C062  F03C         	movff	InitPWM@n,___wmul@multiplier
   562  001554  C063  F03D         	movff	InitPWM@n+1,___wmul@multiplier+1
   563  001558  0E00               	movlw	0
   564  00155A  6E3F               	movwf	___wmul@multiplicand+1,c
   565  00155C  0E07               	movlw	7
   566  00155E  6E3E               	movwf	___wmul@multiplicand,c
   567  001560  ECAF  F00C         	call	___wmul	;wreg free
   568  001564  0E01               	movlw	low _Motors
   569  001566  243C               	addwf	?___wmul,w,c
   570  001568  6ED9               	movwf	fsr2l,c
   571  00156A  0E00               	movlw	high _Motors
   572  00156C  203D               	addwfc	?___wmul+1,w,c
   573  00156E  6EDA               	movwf	fsr2h,c
   574  001570  82DF               	bsf	indf2,1,c
   575                           
   576                           ;pwm.c: 74: Motors[n].direction = (unsigned char)1;
   577  001572  C062  F03C         	movff	InitPWM@n,___wmul@multiplier
   578  001576  C063  F03D         	movff	InitPWM@n+1,___wmul@multiplier+1
   579  00157A  0E00               	movlw	0
   580  00157C  6E3F               	movwf	___wmul@multiplicand+1,c
   581  00157E  0E07               	movlw	7
   582  001580  6E3E               	movwf	___wmul@multiplicand,c
   583  001582  ECAF  F00C         	call	___wmul	;wreg free
   584  001586  0E01               	movlw	low _Motors
   585  001588  243C               	addwf	?___wmul,w,c
   586  00158A  6ED9               	movwf	fsr2l,c
   587  00158C  0E00               	movlw	high _Motors
   588  00158E  203D               	addwfc	?___wmul+1,w,c
   589  001590  6EDA               	movwf	fsr2h,c
   590  001592  86DF               	bsf	indf2,3,c
   591                           
   592                           ;pwm.c: 75: Motors[n].targetDirection = (unsigned char)1;
   593  001594  C062  F03C         	movff	InitPWM@n,___wmul@multiplier
   594  001598  C063  F03D         	movff	InitPWM@n+1,___wmul@multiplier+1
   595  00159C  0E00               	movlw	0
   596  00159E  6E3F               	movwf	___wmul@multiplicand+1,c
   597  0015A0  0E07               	movlw	7
   598  0015A2  6E3E               	movwf	___wmul@multiplicand,c
   599  0015A4  ECAF  F00C         	call	___wmul	;wreg free
   600  0015A8  0E01               	movlw	low _Motors
   601  0015AA  243C               	addwf	?___wmul,w,c
   602  0015AC  6ED9               	movwf	fsr2l,c
   603  0015AE  0E00               	movlw	high _Motors
   604  0015B0  203D               	addwfc	?___wmul+1,w,c
   605  0015B2  6EDA               	movwf	fsr2h,c
   606  0015B4  88DF               	bsf	indf2,4,c
   607                           
   608                           ;pwm.c: 76: Motors[n].duty = (unsigned char)0;
   609  0015B6  C062  F03C         	movff	InitPWM@n,___wmul@multiplier
   610  0015BA  C063  F03D         	movff	InitPWM@n+1,___wmul@multiplier+1
   611  0015BE  0E00               	movlw	0
   612  0015C0  6E3F               	movwf	___wmul@multiplicand+1,c
   613  0015C2  0E07               	movlw	7
   614  0015C4  6E3E               	movwf	___wmul@multiplicand,c
   615  0015C6  ECAF  F00C         	call	___wmul	;wreg free
   616  0015CA  0E04               	movlw	4
   617  0015CC  263C               	addwf	?___wmul,f,c
   618  0015CE  0E00               	movlw	0
   619  0015D0  223D               	addwfc	?___wmul+1,f,c
   620  0015D2  0E01               	movlw	low _Motors
   621  0015D4  243C               	addwf	?___wmul,w,c
   622  0015D6  6ED9               	movwf	fsr2l,c
   623  0015D8  0E00               	movlw	high _Motors
   624  0015DA  203D               	addwfc	?___wmul+1,w,c
   625  0015DC  6EDA               	movwf	fsr2h,c
   626  0015DE  0E00               	movlw	0
   627  0015E0  6EDF               	movwf	indf2,c
   628                           
   629                           ;pwm.c: 77: Motors[n].target = (unsigned char)0;
   630  0015E2  C062  F03C         	movff	InitPWM@n,___wmul@multiplier
   631  0015E6  C063  F03D         	movff	InitPWM@n+1,___wmul@multiplier+1
   632  0015EA  0E00               	movlw	0
   633  0015EC  6E3F               	movwf	___wmul@multiplicand+1,c
   634  0015EE  0E07               	movlw	7
   635  0015F0  6E3E               	movwf	___wmul@multiplicand,c
   636  0015F2  ECAF  F00C         	call	___wmul	;wreg free
   637  0015F6  0E05               	movlw	5
   638  0015F8  263C               	addwf	?___wmul,f,c
   639  0015FA  0E00               	movlw	0
   640  0015FC  223D               	addwfc	?___wmul+1,f,c
   641  0015FE  0E01               	movlw	low _Motors
   642  001600  243C               	addwf	?___wmul,w,c
   643  001602  6ED9               	movwf	fsr2l,c
   644  001604  0E00               	movlw	high _Motors
   645  001606  203D               	addwfc	?___wmul+1,w,c
   646  001608  6EDA               	movwf	fsr2h,c
   647  00160A  0E00               	movlw	0
   648  00160C  6EDF               	movwf	indf2,c
   649                           
   650                           ;pwm.c: 78: Motors[n].motorType = (unsigned char)0;
   651  00160E  C062  F03C         	movff	InitPWM@n,___wmul@multiplier
   652  001612  C063  F03D         	movff	InitPWM@n+1,___wmul@multiplier+1
   653  001616  0E00               	movlw	0
   654  001618  6E3F               	movwf	___wmul@multiplicand+1,c
   655  00161A  0E07               	movlw	7
   656  00161C  6E3E               	movwf	___wmul@multiplicand,c
   657  00161E  ECAF  F00C         	call	___wmul	;wreg free
   658  001622  0E01               	movlw	low _Motors
   659  001624  243C               	addwf	?___wmul,w,c
   660  001626  6ED9               	movwf	fsr2l,c
   661  001628  0E00               	movlw	high _Motors
   662  00162A  203D               	addwfc	?___wmul+1,w,c
   663  00162C  6EDA               	movwf	fsr2h,c
   664  00162E  9ADF               	bcf	indf2,5,c
   665  001630  0100               	movlb	0	; () banked
   666  001632  4B62               	infsnz	InitPWM@n& (0+255),f,b
   667  001634  2B63               	incf	(InitPWM@n+1)& (0+255),f,b
   668                           
   669                           ; BSR set to: 0
   670  001636  0100               	movlb	0	; () banked
   671  001638  BF63               	btfsc	(InitPWM@n+1)& (0+255),7,b
   672  00163A  D768               	goto	l1886
   673  00163C  0100               	movlb	0	; () banked
   674  00163E  5163               	movf	(InitPWM@n+1)& (0+255),w,b
   675  001640  E101               	bnz	l1892
   676  001642  D75D               	goto	L1
   677  001644                     l1892:
   678                           
   679                           ; BSR set to: 0
   680                           ;pwm.c: 79: }
   681                           ;pwm.c: 82: Motors[0].PWMPin = 0;
   682  001644  0E00               	movlw	0
   683  001646  6E02               	movwf	_Motors+1,c
   684                           
   685                           ;pwm.c: 83: Motors[0].dirPin = 1;
   686  001648  0E01               	movlw	1
   687  00164A  6E03               	movwf	_Motors+2,c
   688                           
   689                           ;pwm.c: 84: Motors[0].cdirPin = 2;
   690  00164C  0E02               	movlw	2
   691  00164E  6E04               	movwf	_Motors+3,c
   692                           
   693                           ;pwm.c: 86: Motors[1].PWMPin = 3;
   694  001650  0E03               	movlw	3
   695  001652  6E09               	movwf	_Motors+8,c
   696                           
   697                           ;pwm.c: 87: Motors[1].dirPin = 4;
   698  001654  0E04               	movlw	4
   699  001656  6E0A               	movwf	_Motors+9,c
   700                           
   701                           ;pwm.c: 88: Motors[1].cdirPin = 5;
   702  001658  0E05               	movlw	5
   703  00165A  6E0B               	movwf	_Motors+10,c
   704                           
   705                           ;pwm.c: 90: Motors[2].PWMPin = 6;
   706  00165C  0E06               	movlw	6
   707  00165E  6E10               	movwf	_Motors+15,c
   708                           
   709                           ;pwm.c: 91: Motors[2].dirPin = 7;
   710  001660  0E07               	movlw	7
   711  001662  6E11               	movwf	_Motors+16,c
   712                           
   713                           ;pwm.c: 92: Motors[2].cdirPin = 9;
   714  001664  0E09               	movlw	9
   715  001666  6E12               	movwf	_Motors+17,c
   716                           
   717                           ;pwm.c: 94: Motors[3].PWMPin = 10;
   718  001668  0E0A               	movlw	10
   719  00166A  6E17               	movwf	_Motors+22,c
   720                           
   721                           ;pwm.c: 95: Motors[3].dirPin = 11;
   722  00166C  0E0B               	movlw	11
   723  00166E  6E18               	movwf	_Motors+23,c
   724                           
   725                           ;pwm.c: 96: Motors[3].cdirPin = 8;
   726  001670  0E08               	movlw	8
   727  001672  6E19               	movwf	_Motors+24,c
   728                           
   729                           ;pwm.c: 99: int i;
   730                           ;pwm.c: 100: for (i = 0; i < 4; i++) {
   731  001674  0E00               	movlw	0
   732  001676  0100               	movlb	0	; () banked
   733  001678  6F61               	movwf	(InitPWM@i+1)& (0+255),b
   734  00167A  0E00               	movlw	0
   735  00167C  6F60               	movwf	InitPWM@i& (0+255),b
   736  00167E                     l1894:
   737                           
   738                           ; BSR set to: 0
   739  00167E  0100               	movlb	0	; () banked
   740  001680  BF61               	btfsc	(InitPWM@i+1)& (0+255),7,b
   741  001682  D008               	goto	l1898
   742  001684  0100               	movlb	0	; () banked
   743  001686  5161               	movf	(InitPWM@i+1)& (0+255),w,b
   744  001688  E13B               	bnz	l187
   745  00168A  0E04               	movlw	4
   746  00168C  0100               	movlb	0	; () banked
   747  00168E  5D60               	subwf	InitPWM@i& (0+255),w,b
   748  001690  B0D8               	btfsc	status,0,c
   749  001692  0012               	return	
   750  001694                     l1898:
   751                           
   752                           ; BSR set to: 0
   753                           ;pwm.c: 101: SetPin(Motors[i].dirPin,1);
   754  001694  0E01               	movlw	1
   755  001696  6E42               	movwf	SetPin@value,c
   756  001698  C060  F03C         	movff	InitPWM@i,___wmul@multiplier
   757  00169C  C061  F03D         	movff	InitPWM@i+1,___wmul@multiplier+1
   758  0016A0  0E00               	movlw	0
   759  0016A2  6E3F               	movwf	___wmul@multiplicand+1,c
   760  0016A4  0E07               	movlw	7
   761  0016A6  6E3E               	movwf	___wmul@multiplicand,c
   762  0016A8  ECAF  F00C         	call	___wmul	;wreg free
   763  0016AC  0E02               	movlw	2
   764  0016AE  263C               	addwf	?___wmul,f,c
   765  0016B0  0E00               	movlw	0
   766  0016B2  223D               	addwfc	?___wmul+1,f,c
   767  0016B4  0E01               	movlw	low _Motors
   768  0016B6  243C               	addwf	?___wmul,w,c
   769  0016B8  6ED9               	movwf	fsr2l,c
   770  0016BA  0E00               	movlw	high _Motors
   771  0016BC  203D               	addwfc	?___wmul+1,w,c
   772  0016BE  6EDA               	movwf	fsr2h,c
   773  0016C0  50DF               	movf	indf2,w,c
   774  0016C2  EC23  F00C         	call	_SetPin
   775                           
   776                           ;pwm.c: 102: SetPin(Motors[i].cdirPin,0);
   777  0016C6  0E00               	movlw	0
   778  0016C8  6E42               	movwf	SetPin@value,c
   779  0016CA  C060  F03C         	movff	InitPWM@i,___wmul@multiplier
   780  0016CE  C061  F03D         	movff	InitPWM@i+1,___wmul@multiplier+1
   781  0016D2  0E00               	movlw	0
   782  0016D4  6E3F               	movwf	___wmul@multiplicand+1,c
   783  0016D6  0E07               	movlw	7
   784  0016D8  6E3E               	movwf	___wmul@multiplicand,c
   785  0016DA  ECAF  F00C         	call	___wmul	;wreg free
   786  0016DE  0E03               	movlw	3
   787  0016E0  263C               	addwf	?___wmul,f,c
   788  0016E2  0E00               	movlw	0
   789  0016E4  223D               	addwfc	?___wmul+1,f,c
   790  0016E6  0E01               	movlw	low _Motors
   791  0016E8  243C               	addwf	?___wmul,w,c
   792  0016EA  6ED9               	movwf	fsr2l,c
   793  0016EC  0E00               	movlw	high _Motors
   794  0016EE  203D               	addwfc	?___wmul+1,w,c
   795  0016F0  6EDA               	movwf	fsr2h,c
   796  0016F2  50DF               	movf	indf2,w,c
   797  0016F4  EC23  F00C         	call	_SetPin
   798  0016F8  0100               	movlb	0	; () banked
   799  0016FA  4B60               	infsnz	InitPWM@i& (0+255),f,b
   800  0016FC  2B61               	incf	(InitPWM@i+1)& (0+255),f,b
   801  0016FE  D7BF               	goto	l1894
   802  001700                     l187:
   803                           
   804                           ; BSR set to: 0
   805  001700  0012               	return		;funcret
   806  001702                     __end_of_InitPWM:
   807                           	opt stack 0
   808                           tblptru	equ	0xFF8
   809                           tblptrh	equ	0xFF7
   810                           tblptrl	equ	0xFF6
   811                           tablat	equ	0xFF5
   812                           postinc0	equ	0xFEE
   813                           wreg	equ	0xFE8
   814                           indf2	equ	0xFDF
   815                           fsr2h	equ	0xFDA
   816                           fsr2l	equ	0xFD9
   817                           status	equ	0xFD8
   818                           
   819 ;; *************** function _InitI2C *****************
   820 ;; Defined at:
   821 ;;		line 8 in file "i2c.c"
   822 ;; Parameters:    Size  Location     Type
   823 ;;		None
   824 ;; Auto vars:     Size  Location     Type
   825 ;;		None
   826 ;; Return value:  Size  Location     Type
   827 ;;                  1    wreg      void 
   828 ;; Registers used:
   829 ;;		wreg, status,2
   830 ;; Tracked objects:
   831 ;;		On entry : 0/0
   832 ;;		On exit  : 0/0
   833 ;;		Unchanged: 0/0
   834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   835 ;;      Params:         0       0       0       0
   836 ;;      Locals:         0       0       0       0
   837 ;;      Temps:          0       0       0       0
   838 ;;      Totals:         0       0       0       0
   839 ;;Total ram usage:        0 bytes
   840 ;; Hardware stack levels used:    1
   841 ;; Hardware stack levels required when called:    2
   842 ;; This function calls:
   843 ;;		Nothing
   844 ;; This function is called by:
   845 ;;		_main
   846 ;; This function uses a non-reentrant model
   847 ;;
   848                           
   849                           	psect	text3
   850  0019AA                     __ptext3:
   851                           	opt stack 0
   852  0019AA                     _InitI2C:
   853                           	opt stack 28
   854                           
   855                           ;i2c.c: 10: INTCON2bits.NOT_RABPU = 0;
   856                           
   857                           ; BSR set to: 0
   858                           ;incstack = 0
   859  0019AA  9EF1               	bcf	intcon2,7,c	;volatile
   860                           
   861                           ;i2c.c: 12: WPUBbits.WPUB4 = 1;
   862  0019AC  8878               	bsf	3960,4,c	;volatile
   863                           
   864                           ;i2c.c: 13: WPUBbits.WPUB6 = 1;
   865  0019AE  8C78               	bsf	3960,6,c	;volatile
   866                           
   867                           ;i2c.c: 16: SSPSTATbits.SMP = 1;
   868  0019B0  8EC7               	bsf	4039,7,c	;volatile
   869                           
   870                           ;i2c.c: 19: SSPCON1bits.SSPM = 0b0110;
   871  0019B2  50C6               	movf	4038,w,c	;volatile
   872  0019B4  0BF0               	andlw	-16
   873  0019B6  0906               	iorlw	6
   874  0019B8  6EC6               	movwf	4038,c	;volatile
   875                           
   876                           ;i2c.c: 21: SSPCON2bits.SEN = 1;
   877  0019BA  80C5               	bsf	4037,0,c	;volatile
   878                           
   879                           ;i2c.c: 30: SSPADD = 0x23<<1;
   880  0019BC  0E46               	movlw	70
   881  0019BE  6EC8               	movwf	4040,c	;volatile
   882                           
   883                           ;i2c.c: 33: PIR1bits.SSPIF = 0;
   884  0019C0  969E               	bcf	3998,3,c	;volatile
   885                           
   886                           ;i2c.c: 35: PIE1bits.SSPIE = 1;
   887  0019C2  869D               	bsf	3997,3,c	;volatile
   888                           
   889                           ;i2c.c: 38: INTCONbits.GIE = 1;
   890  0019C4  8EF2               	bsf	intcon,7,c	;volatile
   891                           
   892                           ;i2c.c: 40: INTCONbits.PEIE = 1;
   893  0019C6  8CF2               	bsf	intcon,6,c	;volatile
   894                           
   895                           ;i2c.c: 43: SSPCON1bits.SSPEN = 1;
   896  0019C8  8AC6               	bsf	4038,5,c	;volatile
   897  0019CA  0012               	return		;funcret
   898  0019CC                     __end_of_InitI2C:
   899                           	opt stack 0
   900                           tblptru	equ	0xFF8
   901                           tblptrh	equ	0xFF7
   902                           tblptrl	equ	0xFF6
   903                           tablat	equ	0xFF5
   904                           intcon	equ	0xFF2
   905                           intcon2	equ	0xFF1
   906                           postinc0	equ	0xFEE
   907                           wreg	equ	0xFE8
   908                           indf2	equ	0xFDF
   909                           fsr2h	equ	0xFDA
   910                           fsr2l	equ	0xFD9
   911                           status	equ	0xFD8
   912                           
   913 ;; *************** function _CheckPWMOutput *****************
   914 ;; Defined at:
   915 ;;		line 261 in file "pwm.c"
   916 ;; Parameters:    Size  Location     Type
   917 ;;		None
   918 ;; Auto vars:     Size  Location     Type
   919 ;;  i               2   17[BANK0 ] int 
   920 ;; Return value:  Size  Location     Type
   921 ;;                  1    wreg      void 
   922 ;; Registers used:
   923 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   924 ;; Tracked objects:
   925 ;;		On entry : 0/0
   926 ;;		On exit  : 0/0
   927 ;;		Unchanged: 0/0
   928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   929 ;;      Params:         0       0       0       0
   930 ;;      Locals:         0       2       0       0
   931 ;;      Temps:          0       2       0       0
   932 ;;      Totals:         0       4       0       0
   933 ;;Total ram usage:        4 bytes
   934 ;; Hardware stack levels used:    1
   935 ;; Hardware stack levels required when called:    5
   936 ;; This function calls:
   937 ;;		_AcceleratePWM
   938 ;;		_SetPin
   939 ;;		___wmul
   940 ;; This function is called by:
   941 ;;		_main
   942 ;; This function uses a non-reentrant model
   943 ;;
   944                           
   945                           	psect	text4
   946  0003A6                     __ptext4:
   947                           	opt stack 0
   948  0003A6                     _CheckPWMOutput:
   949                           	opt stack 25
   950                           
   951                           ;pwm.c: 262: int i;
   952                           ;pwm.c: 263: for (i = 0; i < 4; i++) {
   953                           
   954                           ;incstack = 0
   955  0003A6  0E00               	movlw	0
   956  0003A8  0100               	movlb	0	; () banked
   957  0003AA  6F72               	movwf	(CheckPWMOutput@i+1)& (0+255),b
   958  0003AC  0E00               	movlw	0
   959  0003AE  6F71               	movwf	CheckPWMOutput@i& (0+255),b
   960                           
   961                           ; BSR set to: 0
   962  0003B0  0100               	movlb	0	; () banked
   963  0003B2  BF72               	btfsc	(CheckPWMOutput@i+1)& (0+255),7,b
   964  0003B4  D00A               	goto	l1910
   965  0003B6  0100               	movlb	0	; () banked
   966  0003B8  5172               	movf	(CheckPWMOutput@i+1)& (0+255),w,b
   967  0003BA  E106               	bnz	u2720
   968  0003BC  0E04               	movlw	4
   969  0003BE  0100               	movlb	0	; () banked
   970  0003C0  5D71               	subwf	CheckPWMOutput@i& (0+255),w,b
   971  0003C2  B0D8               	btfsc	status,0,c
   972  0003C4  D2EC               	goto	l1968
   973  0003C6  D001               	goto	l1910
   974  0003C8                     u2720:
   975                           
   976                           ; BSR set to: 0
   977  0003C8  D2EA               	goto	l1968
   978  0003CA                     l1910:
   979                           
   980                           ; BSR set to: 0
   981                           ;pwm.c: 264: if (PWMEnable && Motors[i].enabled) {
   982  0003CA  5048               	movf	_PWMEnable,w,c
   983  0003CC  B4D8               	btfsc	status,2,c
   984  0003CE  D2A1               	goto	l1960
   985                           
   986                           ; BSR set to: 0
   987  0003D0  C071  F03C         	movff	CheckPWMOutput@i,___wmul@multiplier
   988  0003D4  C072  F03D         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
   989  0003D8  0E00               	movlw	0
   990  0003DA  6E3F               	movwf	___wmul@multiplicand+1,c
   991  0003DC  0E07               	movlw	7
   992  0003DE  6E3E               	movwf	___wmul@multiplicand,c
   993  0003E0  ECAF  F00C         	call	___wmul	;wreg free
   994  0003E4  0E01               	movlw	low _Motors
   995  0003E6  243C               	addwf	?___wmul,w,c
   996  0003E8  6ED9               	movwf	fsr2l,c
   997  0003EA  0E00               	movlw	high _Motors
   998  0003EC  203D               	addwfc	?___wmul+1,w,c
   999  0003EE  6EDA               	movwf	fsr2h,c
  1000  0003F0  A2DF               	btfss	indf2,1,c
  1001  0003F2  D28F               	goto	l1960
  1002                           
  1003                           ;pwm.c: 265: if (Motors[i].motorType) {
  1004  0003F4  C071  F03C         	movff	CheckPWMOutput@i,___wmul@multiplier
  1005  0003F8  C072  F03D         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1006  0003FC  0E00               	movlw	0
  1007  0003FE  6E3F               	movwf	___wmul@multiplicand+1,c
  1008  000400  0E07               	movlw	7
  1009  000402  6E3E               	movwf	___wmul@multiplicand,c
  1010  000404  ECAF  F00C         	call	___wmul	;wreg free
  1011  000408  0E01               	movlw	low _Motors
  1012  00040A  243C               	addwf	?___wmul,w,c
  1013  00040C  6ED9               	movwf	fsr2l,c
  1014  00040E  0E00               	movlw	high _Motors
  1015  000410  203D               	addwfc	?___wmul+1,w,c
  1016  000412  6EDA               	movwf	fsr2h,c
  1017  000414  AADF               	btfss	indf2,5,c
  1018  000416  D1C5               	goto	l1948
  1019                           
  1020                           ;pwm.c: 266: if (TMR0 < Motors[i].duty && Motors[i].state == 0 && Motors[i].servoCount <
      +                           19) {
  1021  000418  C071  F03C         	movff	CheckPWMOutput@i,___wmul@multiplier
  1022  00041C  C072  F03D         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1023  000420  0E00               	movlw	0
  1024  000422  6E3F               	movwf	___wmul@multiplicand+1,c
  1025  000424  0E07               	movlw	7
  1026  000426  6E3E               	movwf	___wmul@multiplicand,c
  1027  000428  ECAF  F00C         	call	___wmul	;wreg free
  1028  00042C  0E04               	movlw	4
  1029  00042E  263C               	addwf	?___wmul,f,c
  1030  000430  0E00               	movlw	0
  1031  000432  223D               	addwfc	?___wmul+1,f,c
  1032  000434  0E01               	movlw	low _Motors
  1033  000436  243C               	addwf	?___wmul,w,c
  1034  000438  6ED9               	movwf	fsr2l,c
  1035  00043A  0E00               	movlw	high _Motors
  1036  00043C  203D               	addwfc	?___wmul+1,w,c
  1037  00043E  6EDA               	movwf	fsr2h,c
  1038  000440  50DF               	movf	indf2,w,c
  1039  000442  0100               	movlb	0	; () banked
  1040  000444  6F6F               	movwf	??_CheckPWMOutput& (0+255),b
  1041  000446  0100               	movlb	0	; () banked
  1042  000448  516F               	movf	??_CheckPWMOutput& (0+255),w,b
  1043  00044A  5CD6               	subwf	4054,w,c	;volatile
  1044  00044C  0E00               	movlw	0
  1045  00044E  58D7               	subwfb	4055,w,c	;volatile
  1046  000450  B0D8               	btfsc	status,0,c
  1047  000452  D050               	goto	l1924
  1048                           
  1049                           ; BSR set to: 0
  1050  000454  C071  F03C         	movff	CheckPWMOutput@i,___wmul@multiplier
  1051  000458  C072  F03D         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1052  00045C  0E00               	movlw	0
  1053  00045E  6E3F               	movwf	___wmul@multiplicand+1,c
  1054  000460  0E07               	movlw	7
  1055  000462  6E3E               	movwf	___wmul@multiplicand,c
  1056  000464  ECAF  F00C         	call	___wmul	;wreg free
  1057  000468  0E01               	movlw	low _Motors
  1058  00046A  243C               	addwf	?___wmul,w,c
  1059  00046C  6ED9               	movwf	fsr2l,c
  1060  00046E  0E00               	movlw	high _Motors
  1061  000470  203D               	addwfc	?___wmul+1,w,c
  1062  000472  6EDA               	movwf	fsr2h,c
  1063  000474  B0DF               	btfsc	indf2,0,c
  1064  000476  D03E               	goto	l1924
  1065  000478  C071  F03C         	movff	CheckPWMOutput@i,___wmul@multiplier
  1066  00047C  C072  F03D         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1067  000480  0E00               	movlw	0
  1068  000482  6E3F               	movwf	___wmul@multiplicand+1,c
  1069  000484  0E07               	movlw	7
  1070  000486  6E3E               	movwf	___wmul@multiplicand,c
  1071  000488  ECAF  F00C         	call	___wmul	;wreg free
  1072  00048C  0E06               	movlw	6
  1073  00048E  263C               	addwf	?___wmul,f,c
  1074  000490  0E00               	movlw	0
  1075  000492  223D               	addwfc	?___wmul+1,f,c
  1076  000494  0E01               	movlw	low _Motors
  1077  000496  243C               	addwf	?___wmul,w,c
  1078  000498  6ED9               	movwf	fsr2l,c
  1079  00049A  0E00               	movlw	high _Motors
  1080  00049C  203D               	addwfc	?___wmul+1,w,c
  1081  00049E  6EDA               	movwf	fsr2h,c
  1082  0004A0  0E13               	movlw	19
  1083  0004A2  60DF               	cpfslt	indf2,c
  1084  0004A4  D027               	goto	l1924
  1085                           
  1086                           ;pwm.c: 267: Motors[i].servoCount++;
  1087  0004A6  C071  F03C         	movff	CheckPWMOutput@i,___wmul@multiplier
  1088  0004AA  C072  F03D         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1089  0004AE  0E00               	movlw	0
  1090  0004B0  6E3F               	movwf	___wmul@multiplicand+1,c
  1091  0004B2  0E07               	movlw	7
  1092  0004B4  6E3E               	movwf	___wmul@multiplicand,c
  1093  0004B6  ECAF  F00C         	call	___wmul	;wreg free
  1094  0004BA  0E06               	movlw	6
  1095  0004BC  263C               	addwf	?___wmul,f,c
  1096  0004BE  0E00               	movlw	0
  1097  0004C0  223D               	addwfc	?___wmul+1,f,c
  1098  0004C2  0E01               	movlw	low _Motors
  1099  0004C4  243C               	addwf	?___wmul,w,c
  1100  0004C6  6ED9               	movwf	fsr2l,c
  1101  0004C8  0E00               	movlw	high _Motors
  1102  0004CA  203D               	addwfc	?___wmul+1,w,c
  1103  0004CC  6EDA               	movwf	fsr2h,c
  1104  0004CE  2ADF               	incf	indf2,f,c
  1105                           
  1106                           ;pwm.c: 268: Motors[i].state = 1;
  1107  0004D0  C071  F03C         	movff	CheckPWMOutput@i,___wmul@multiplier
  1108  0004D4  C072  F03D         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1109  0004D8  0E00               	movlw	0
  1110  0004DA  6E3F               	movwf	___wmul@multiplicand+1,c
  1111  0004DC  0E07               	movlw	7
  1112  0004DE  6E3E               	movwf	___wmul@multiplicand,c
  1113  0004E0  ECAF  F00C         	call	___wmul	;wreg free
  1114  0004E4  0E01               	movlw	low _Motors
  1115  0004E6  243C               	addwf	?___wmul,w,c
  1116  0004E8  6ED9               	movwf	fsr2l,c
  1117  0004EA  0E00               	movlw	high _Motors
  1118  0004EC  203D               	addwfc	?___wmul+1,w,c
  1119  0004EE  6EDA               	movwf	fsr2h,c
  1120  0004F0  80DF               	bsf	indf2,0,c
  1121                           
  1122                           ;pwm.c: 269: } else if (TMR0 < Motors[i].duty && Motors[i].state == 0 && Motors[i].servo
      +                          Count == 20) {
  1123  0004F2  D24B               	goto	l1964
  1124  0004F4                     l1924:
  1125  0004F4  C071  F03C         	movff	CheckPWMOutput@i,___wmul@multiplier
  1126  0004F8  C072  F03D         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1127  0004FC  0E00               	movlw	0
  1128  0004FE  6E3F               	movwf	___wmul@multiplicand+1,c
  1129  000500  0E07               	movlw	7
  1130  000502  6E3E               	movwf	___wmul@multiplicand,c
  1131  000504  ECAF  F00C         	call	___wmul	;wreg free
  1132  000508  0E04               	movlw	4
  1133  00050A  263C               	addwf	?___wmul,f,c
  1134  00050C  0E00               	movlw	0
  1135  00050E  223D               	addwfc	?___wmul+1,f,c
  1136  000510  0E01               	movlw	low _Motors
  1137  000512  243C               	addwf	?___wmul,w,c
  1138  000514  6ED9               	movwf	fsr2l,c
  1139  000516  0E00               	movlw	high _Motors
  1140  000518  203D               	addwfc	?___wmul+1,w,c
  1141  00051A  6EDA               	movwf	fsr2h,c
  1142  00051C  50DF               	movf	indf2,w,c
  1143  00051E  0100               	movlb	0	; () banked
  1144  000520  6F6F               	movwf	??_CheckPWMOutput& (0+255),b
  1145  000522  0100               	movlb	0	; () banked
  1146  000524  516F               	movf	??_CheckPWMOutput& (0+255),w,b
  1147  000526  5CD6               	subwf	4054,w,c	;volatile
  1148  000528  0E00               	movlw	0
  1149  00052A  58D7               	subwfb	4055,w,c	;volatile
  1150  00052C  B0D8               	btfsc	status,0,c
  1151  00052E  D055               	goto	l1932
  1152                           
  1153                           ; BSR set to: 0
  1154  000530  C071  F03C         	movff	CheckPWMOutput@i,___wmul@multiplier
  1155  000534  C072  F03D         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1156  000538  0E00               	movlw	0
  1157  00053A  6E3F               	movwf	___wmul@multiplicand+1,c
  1158  00053C  0E07               	movlw	7
  1159  00053E  6E3E               	movwf	___wmul@multiplicand,c
  1160  000540  ECAF  F00C         	call	___wmul	;wreg free
  1161  000544  0E01               	movlw	low _Motors
  1162  000546  243C               	addwf	?___wmul,w,c
  1163  000548  6ED9               	movwf	fsr2l,c
  1164  00054A  0E00               	movlw	high _Motors
  1165  00054C  203D               	addwfc	?___wmul+1,w,c
  1166  00054E  6EDA               	movwf	fsr2h,c
  1167  000550  B0DF               	btfsc	indf2,0,c
  1168  000552  D043               	goto	l1932
  1169  000554  C071  F03C         	movff	CheckPWMOutput@i,___wmul@multiplier
  1170  000558  C072  F03D         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1171  00055C  0E00               	movlw	0
  1172  00055E  6E3F               	movwf	___wmul@multiplicand+1,c
  1173  000560  0E07               	movlw	7
  1174  000562  6E3E               	movwf	___wmul@multiplicand,c
  1175  000564  ECAF  F00C         	call	___wmul	;wreg free
  1176  000568  0E06               	movlw	6
  1177  00056A  263C               	addwf	?___wmul,f,c
  1178  00056C  0E00               	movlw	0
  1179  00056E  223D               	addwfc	?___wmul+1,f,c
  1180  000570  0E01               	movlw	low _Motors
  1181  000572  243C               	addwf	?___wmul,w,c
  1182  000574  6ED9               	movwf	fsr2l,c
  1183  000576  0E00               	movlw	high _Motors
  1184  000578  203D               	addwfc	?___wmul+1,w,c
  1185  00057A  6EDA               	movwf	fsr2h,c
  1186  00057C  0E14               	movlw	20
  1187  00057E  18DE               	xorwf	postinc2,w,c
  1188  000580  A4D8               	btfss	status,2,c
  1189  000582  D02B               	goto	l1932
  1190                           
  1191                           ;pwm.c: 270: Motors[i].state = 1;
  1192  000584  C071  F03C         	movff	CheckPWMOutput@i,___wmul@multiplier
  1193  000588  C072  F03D         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1194  00058C  0E00               	movlw	0
  1195  00058E  6E3F               	movwf	___wmul@multiplicand+1,c
  1196  000590  0E07               	movlw	7
  1197  000592  6E3E               	movwf	___wmul@multiplicand,c
  1198  000594  ECAF  F00C         	call	___wmul	;wreg free
  1199  000598  0E01               	movlw	low _Motors
  1200  00059A  243C               	addwf	?___wmul,w,c
  1201  00059C  6ED9               	movwf	fsr2l,c
  1202  00059E  0E00               	movlw	high _Motors
  1203  0005A0  203D               	addwfc	?___wmul+1,w,c
  1204  0005A2  6EDA               	movwf	fsr2h,c
  1205  0005A4  80DF               	bsf	indf2,0,c
  1206                           
  1207                           ;pwm.c: 271: SetPin(Motors[i].PWMPin,1);
  1208  0005A6  0E01               	movlw	1
  1209  0005A8  6E42               	movwf	SetPin@value,c
  1210  0005AA  C071  F03C         	movff	CheckPWMOutput@i,___wmul@multiplier
  1211  0005AE  C072  F03D         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1212  0005B2  0E00               	movlw	0
  1213  0005B4  6E3F               	movwf	___wmul@multiplicand+1,c
  1214  0005B6  0E07               	movlw	7
  1215  0005B8  6E3E               	movwf	___wmul@multiplicand,c
  1216  0005BA  ECAF  F00C         	call	___wmul	;wreg free
  1217  0005BE  0E01               	movlw	1
  1218  0005C0  263C               	addwf	?___wmul,f,c
  1219  0005C2  0E00               	movlw	0
  1220  0005C4  223D               	addwfc	?___wmul+1,f,c
  1221  0005C6  0E01               	movlw	low _Motors
  1222  0005C8  243C               	addwf	?___wmul,w,c
  1223  0005CA  6ED9               	movwf	fsr2l,c
  1224  0005CC  0E00               	movlw	high _Motors
  1225  0005CE  203D               	addwfc	?___wmul+1,w,c
  1226  0005D0  6EDA               	movwf	fsr2h,c
  1227  0005D2  50DF               	movf	indf2,w,c
  1228  0005D4  EC23  F00C         	call	_SetPin
  1229                           
  1230                           ;pwm.c: 272: } else if (TMR0 >= Motors[i].duty && Motors[i].state == 1 && Motors[i].serv
      +                          oCount < 19) {
  1231  0005D8  D1D8               	goto	l1964
  1232  0005DA                     l1932:
  1233  0005DA  C071  F03C         	movff	CheckPWMOutput@i,___wmul@multiplier
  1234  0005DE  C072  F03D         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1235  0005E2  0E00               	movlw	0
  1236  0005E4  6E3F               	movwf	___wmul@multiplicand+1,c
  1237  0005E6  0E07               	movlw	7
  1238  0005E8  6E3E               	movwf	___wmul@multiplicand,c
  1239  0005EA  ECAF  F00C         	call	___wmul	;wreg free
  1240  0005EE  0E04               	movlw	4
  1241  0005F0  263C               	addwf	?___wmul,f,c
  1242  0005F2  0E00               	movlw	0
  1243  0005F4  223D               	addwfc	?___wmul+1,f,c
  1244  0005F6  0E01               	movlw	low _Motors
  1245  0005F8  243C               	addwf	?___wmul,w,c
  1246  0005FA  6ED9               	movwf	fsr2l,c
  1247  0005FC  0E00               	movlw	high _Motors
  1248  0005FE  203D               	addwfc	?___wmul+1,w,c
  1249  000600  6EDA               	movwf	fsr2h,c
  1250  000602  50DF               	movf	indf2,w,c
  1251  000604  0100               	movlb	0	; () banked
  1252  000606  6F6F               	movwf	??_CheckPWMOutput& (0+255),b
  1253  000608  6B70               	clrf	(??_CheckPWMOutput+1)& (0+255),b
  1254  00060A  0100               	movlb	0	; () banked
  1255  00060C  516F               	movf	??_CheckPWMOutput& (0+255),w,b
  1256  00060E  5CD6               	subwf	4054,w,c	;volatile
  1257  000610  0100               	movlb	0	; () banked
  1258  000612  5170               	movf	(??_CheckPWMOutput+1)& (0+255),w,b
  1259  000614  58D7               	subwfb	4055,w,c	;volatile
  1260  000616  A0D8               	btfss	status,0,c
  1261  000618  D03B               	goto	l1940
  1262                           
  1263                           ; BSR set to: 0
  1264  00061A  C071  F03C         	movff	CheckPWMOutput@i,___wmul@multiplier
  1265  00061E  C072  F03D         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1266  000622  0E00               	movlw	0
  1267  000624  6E3F               	movwf	___wmul@multiplicand+1,c
  1268  000626  0E07               	movlw	7
  1269  000628  6E3E               	movwf	___wmul@multiplicand,c
  1270  00062A  ECAF  F00C         	call	___wmul	;wreg free
  1271  00062E  0E01               	movlw	low _Motors
  1272  000630  243C               	addwf	?___wmul,w,c
  1273  000632  6ED9               	movwf	fsr2l,c
  1274  000634  0E00               	movlw	high _Motors
  1275  000636  203D               	addwfc	?___wmul+1,w,c
  1276  000638  6EDA               	movwf	fsr2h,c
  1277  00063A  A0DF               	btfss	indf2,0,c
  1278  00063C  D029               	goto	l1940
  1279  00063E  C071  F03C         	movff	CheckPWMOutput@i,___wmul@multiplier
  1280  000642  C072  F03D         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1281  000646  0E00               	movlw	0
  1282  000648  6E3F               	movwf	___wmul@multiplicand+1,c
  1283  00064A  0E07               	movlw	7
  1284  00064C  6E3E               	movwf	___wmul@multiplicand,c
  1285  00064E  ECAF  F00C         	call	___wmul	;wreg free
  1286  000652  0E06               	movlw	6
  1287  000654  263C               	addwf	?___wmul,f,c
  1288  000656  0E00               	movlw	0
  1289  000658  223D               	addwfc	?___wmul+1,f,c
  1290  00065A  0E01               	movlw	low _Motors
  1291  00065C  243C               	addwf	?___wmul,w,c
  1292  00065E  6ED9               	movwf	fsr2l,c
  1293  000660  0E00               	movlw	high _Motors
  1294  000662  203D               	addwfc	?___wmul+1,w,c
  1295  000664  6EDA               	movwf	fsr2h,c
  1296  000666  0E13               	movlw	19
  1297  000668  60DF               	cpfslt	indf2,c
  1298  00066A  D012               	goto	l1940
  1299                           
  1300                           ;pwm.c: 273: Motors[i].state = 0;
  1301  00066C  C071  F03C         	movff	CheckPWMOutput@i,___wmul@multiplier
  1302  000670  C072  F03D         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1303  000674  0E00               	movlw	0
  1304  000676  6E3F               	movwf	___wmul@multiplicand+1,c
  1305  000678  0E07               	movlw	7
  1306  00067A  6E3E               	movwf	___wmul@multiplicand,c
  1307  00067C  ECAF  F00C         	call	___wmul	;wreg free
  1308  000680  0E01               	movlw	low _Motors
  1309  000682  243C               	addwf	?___wmul,w,c
  1310  000684  6ED9               	movwf	fsr2l,c
  1311  000686  0E00               	movlw	high _Motors
  1312  000688  203D               	addwfc	?___wmul+1,w,c
  1313  00068A  6EDA               	movwf	fsr2h,c
  1314  00068C  90DF               	bcf	indf2,0,c
  1315                           
  1316                           ;pwm.c: 274: } else if (TMR0 < Motors[i].duty && Motors[i].state == 0 && Motors[i].servo
      +                          Count == 20) {
  1317  00068E  D17D               	goto	l1964
  1318  000690                     l1940:
  1319  000690  C071  F03C         	movff	CheckPWMOutput@i,___wmul@multiplier
  1320  000694  C072  F03D         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1321  000698  0E00               	movlw	0
  1322  00069A  6E3F               	movwf	___wmul@multiplicand+1,c
  1323  00069C  0E07               	movlw	7
  1324  00069E  6E3E               	movwf	___wmul@multiplicand,c
  1325  0006A0  ECAF  F00C         	call	___wmul	;wreg free
  1326  0006A4  0E04               	movlw	4
  1327  0006A6  263C               	addwf	?___wmul,f,c
  1328  0006A8  0E00               	movlw	0
  1329  0006AA  223D               	addwfc	?___wmul+1,f,c
  1330  0006AC  0E01               	movlw	low _Motors
  1331  0006AE  243C               	addwf	?___wmul,w,c
  1332  0006B0  6ED9               	movwf	fsr2l,c
  1333  0006B2  0E00               	movlw	high _Motors
  1334  0006B4  203D               	addwfc	?___wmul+1,w,c
  1335  0006B6  6EDA               	movwf	fsr2h,c
  1336  0006B8  50DF               	movf	indf2,w,c
  1337  0006BA  0100               	movlb	0	; () banked
  1338  0006BC  6F6F               	movwf	??_CheckPWMOutput& (0+255),b
  1339  0006BE  0100               	movlb	0	; () banked
  1340  0006C0  516F               	movf	??_CheckPWMOutput& (0+255),w,b
  1341  0006C2  5CD6               	subwf	4054,w,c	;volatile
  1342  0006C4  0E00               	movlw	0
  1343  0006C6  58D7               	subwfb	4055,w,c	;volatile
  1344  0006C8  B0D8               	btfsc	status,0,c
  1345  0006CA  D15F               	goto	l1964
  1346                           
  1347                           ; BSR set to: 0
  1348  0006CC  C071  F03C         	movff	CheckPWMOutput@i,___wmul@multiplier
  1349  0006D0  C072  F03D         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1350  0006D4  0E00               	movlw	0
  1351  0006D6  6E3F               	movwf	___wmul@multiplicand+1,c
  1352  0006D8  0E07               	movlw	7
  1353  0006DA  6E3E               	movwf	___wmul@multiplicand,c
  1354  0006DC  ECAF  F00C         	call	___wmul	;wreg free
  1355  0006E0  0E01               	movlw	low _Motors
  1356  0006E2  243C               	addwf	?___wmul,w,c
  1357  0006E4  6ED9               	movwf	fsr2l,c
  1358  0006E6  0E00               	movlw	high _Motors
  1359  0006E8  203D               	addwfc	?___wmul+1,w,c
  1360  0006EA  6EDA               	movwf	fsr2h,c
  1361  0006EC  B0DF               	btfsc	indf2,0,c
  1362  0006EE  D14D               	goto	l1964
  1363  0006F0  C071  F03C         	movff	CheckPWMOutput@i,___wmul@multiplier
  1364  0006F4  C072  F03D         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1365  0006F8  0E00               	movlw	0
  1366  0006FA  6E3F               	movwf	___wmul@multiplicand+1,c
  1367  0006FC  0E07               	movlw	7
  1368  0006FE  6E3E               	movwf	___wmul@multiplicand,c
  1369  000700  ECAF  F00C         	call	___wmul	;wreg free
  1370  000704  0E06               	movlw	6
  1371  000706  263C               	addwf	?___wmul,f,c
  1372  000708  0E00               	movlw	0
  1373  00070A  223D               	addwfc	?___wmul+1,f,c
  1374  00070C  0E01               	movlw	low _Motors
  1375  00070E  243C               	addwf	?___wmul,w,c
  1376  000710  6ED9               	movwf	fsr2l,c
  1377  000712  0E00               	movlw	high _Motors
  1378  000714  203D               	addwfc	?___wmul+1,w,c
  1379  000716  6EDA               	movwf	fsr2h,c
  1380  000718  0E14               	movlw	20
  1381  00071A  18DE               	xorwf	postinc2,w,c
  1382  00071C  A4D8               	btfss	status,2,c
  1383  00071E  D135               	goto	l1964
  1384                           
  1385                           ;pwm.c: 275: Motors[i].state = 0;
  1386  000720  C071  F03C         	movff	CheckPWMOutput@i,___wmul@multiplier
  1387  000724  C072  F03D         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1388  000728  0E00               	movlw	0
  1389  00072A  6E3F               	movwf	___wmul@multiplicand+1,c
  1390  00072C  0E07               	movlw	7
  1391  00072E  6E3E               	movwf	___wmul@multiplicand,c
  1392  000730  ECAF  F00C         	call	___wmul	;wreg free
  1393  000734  0E01               	movlw	low _Motors
  1394  000736  243C               	addwf	?___wmul,w,c
  1395  000738  6ED9               	movwf	fsr2l,c
  1396  00073A  0E00               	movlw	high _Motors
  1397  00073C  203D               	addwfc	?___wmul+1,w,c
  1398  00073E  6EDA               	movwf	fsr2h,c
  1399  000740  90DF               	bcf	indf2,0,c
  1400                           
  1401                           ;pwm.c: 276: Motors[i].servoCount = 0;
  1402  000742  C071  F03C         	movff	CheckPWMOutput@i,___wmul@multiplier
  1403  000746  C072  F03D         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1404  00074A  0E00               	movlw	0
  1405  00074C  6E3F               	movwf	___wmul@multiplicand+1,c
  1406  00074E  0E07               	movlw	7
  1407  000750  6E3E               	movwf	___wmul@multiplicand,c
  1408  000752  ECAF  F00C         	call	___wmul	;wreg free
  1409  000756  0E06               	movlw	6
  1410  000758  263C               	addwf	?___wmul,f,c
  1411  00075A  0E00               	movlw	0
  1412  00075C  223D               	addwfc	?___wmul+1,f,c
  1413  00075E  0E01               	movlw	low _Motors
  1414  000760  243C               	addwf	?___wmul,w,c
  1415  000762  6ED9               	movwf	fsr2l,c
  1416  000764  0E00               	movlw	high _Motors
  1417  000766  203D               	addwfc	?___wmul+1,w,c
  1418  000768  6EDA               	movwf	fsr2h,c
  1419  00076A  0E00               	movlw	0
  1420  00076C  6EDF               	movwf	indf2,c
  1421                           
  1422                           ;pwm.c: 277: SetPin(Motors[i].PWMPin,0);
  1423  00076E  0E00               	movlw	0
  1424  000770  6E42               	movwf	SetPin@value,c
  1425  000772  C071  F03C         	movff	CheckPWMOutput@i,___wmul@multiplier
  1426  000776  C072  F03D         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1427  00077A  0E00               	movlw	0
  1428  00077C  6E3F               	movwf	___wmul@multiplicand+1,c
  1429  00077E  0E07               	movlw	7
  1430  000780  6E3E               	movwf	___wmul@multiplicand,c
  1431  000782  ECAF  F00C         	call	___wmul	;wreg free
  1432  000786  0E01               	movlw	1
  1433  000788  263C               	addwf	?___wmul,f,c
  1434  00078A  0E00               	movlw	0
  1435  00078C  223D               	addwfc	?___wmul+1,f,c
  1436  00078E  0E01               	movlw	low _Motors
  1437  000790  243C               	addwf	?___wmul,w,c
  1438  000792  6ED9               	movwf	fsr2l,c
  1439  000794  0E00               	movlw	high _Motors
  1440  000796  203D               	addwfc	?___wmul+1,w,c
  1441  000798  6EDA               	movwf	fsr2h,c
  1442  00079A  50DF               	movf	indf2,w,c
  1443  00079C  EC23  F00C         	call	_SetPin
  1444                           
  1445                           ;pwm.c: 278: }
  1446                           ;pwm.c: 279: } else {
  1447  0007A0  D0F4               	goto	l1964
  1448  0007A2                     l1948:
  1449                           
  1450                           ;pwm.c: 281: if (TMR0 < Motors[i].duty && Motors[i].state == 0) {
  1451  0007A2  C071  F03C         	movff	CheckPWMOutput@i,___wmul@multiplier
  1452  0007A6  C072  F03D         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1453  0007AA  0E00               	movlw	0
  1454  0007AC  6E3F               	movwf	___wmul@multiplicand+1,c
  1455  0007AE  0E07               	movlw	7
  1456  0007B0  6E3E               	movwf	___wmul@multiplicand,c
  1457  0007B2  ECAF  F00C         	call	___wmul	;wreg free
  1458  0007B6  0E04               	movlw	4
  1459  0007B8  263C               	addwf	?___wmul,f,c
  1460  0007BA  0E00               	movlw	0
  1461  0007BC  223D               	addwfc	?___wmul+1,f,c
  1462  0007BE  0E01               	movlw	low _Motors
  1463  0007C0  243C               	addwf	?___wmul,w,c
  1464  0007C2  6ED9               	movwf	fsr2l,c
  1465  0007C4  0E00               	movlw	high _Motors
  1466  0007C6  203D               	addwfc	?___wmul+1,w,c
  1467  0007C8  6EDA               	movwf	fsr2h,c
  1468  0007CA  50DF               	movf	indf2,w,c
  1469  0007CC  0100               	movlb	0	; () banked
  1470  0007CE  6F6F               	movwf	??_CheckPWMOutput& (0+255),b
  1471  0007D0  0100               	movlb	0	; () banked
  1472  0007D2  516F               	movf	??_CheckPWMOutput& (0+255),w,b
  1473  0007D4  5CD6               	subwf	4054,w,c	;volatile
  1474  0007D6  0E00               	movlw	0
  1475  0007D8  58D7               	subwfb	4055,w,c	;volatile
  1476  0007DA  B0D8               	btfsc	status,0,c
  1477  0007DC  D03D               	goto	l1954
  1478                           
  1479                           ; BSR set to: 0
  1480  0007DE  C071  F03C         	movff	CheckPWMOutput@i,___wmul@multiplier
  1481  0007E2  C072  F03D         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1482  0007E6  0E00               	movlw	0
  1483  0007E8  6E3F               	movwf	___wmul@multiplicand+1,c
  1484  0007EA  0E07               	movlw	7
  1485  0007EC  6E3E               	movwf	___wmul@multiplicand,c
  1486  0007EE  ECAF  F00C         	call	___wmul	;wreg free
  1487  0007F2  0E01               	movlw	low _Motors
  1488  0007F4  243C               	addwf	?___wmul,w,c
  1489  0007F6  6ED9               	movwf	fsr2l,c
  1490  0007F8  0E00               	movlw	high _Motors
  1491  0007FA  203D               	addwfc	?___wmul+1,w,c
  1492  0007FC  6EDA               	movwf	fsr2h,c
  1493  0007FE  B0DF               	btfsc	indf2,0,c
  1494  000800  D02B               	goto	l1954
  1495                           
  1496                           ;pwm.c: 283: Motors[i].state = 1;
  1497  000802  C071  F03C         	movff	CheckPWMOutput@i,___wmul@multiplier
  1498  000806  C072  F03D         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1499  00080A  0E00               	movlw	0
  1500  00080C  6E3F               	movwf	___wmul@multiplicand+1,c
  1501  00080E  0E07               	movlw	7
  1502  000810  6E3E               	movwf	___wmul@multiplicand,c
  1503  000812  ECAF  F00C         	call	___wmul	;wreg free
  1504  000816  0E01               	movlw	low _Motors
  1505  000818  243C               	addwf	?___wmul,w,c
  1506  00081A  6ED9               	movwf	fsr2l,c
  1507  00081C  0E00               	movlw	high _Motors
  1508  00081E  203D               	addwfc	?___wmul+1,w,c
  1509  000820  6EDA               	movwf	fsr2h,c
  1510  000822  80DF               	bsf	indf2,0,c
  1511                           
  1512                           ;pwm.c: 285: SetPin(Motors[i].PWMPin,1);
  1513  000824  0E01               	movlw	1
  1514  000826  6E42               	movwf	SetPin@value,c
  1515  000828  C071  F03C         	movff	CheckPWMOutput@i,___wmul@multiplier
  1516  00082C  C072  F03D         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1517  000830  0E00               	movlw	0
  1518  000832  6E3F               	movwf	___wmul@multiplicand+1,c
  1519  000834  0E07               	movlw	7
  1520  000836  6E3E               	movwf	___wmul@multiplicand,c
  1521  000838  ECAF  F00C         	call	___wmul	;wreg free
  1522  00083C  0E01               	movlw	1
  1523  00083E  263C               	addwf	?___wmul,f,c
  1524  000840  0E00               	movlw	0
  1525  000842  223D               	addwfc	?___wmul+1,f,c
  1526  000844  0E01               	movlw	low _Motors
  1527  000846  243C               	addwf	?___wmul,w,c
  1528  000848  6ED9               	movwf	fsr2l,c
  1529  00084A  0E00               	movlw	high _Motors
  1530  00084C  203D               	addwfc	?___wmul+1,w,c
  1531  00084E  6EDA               	movwf	fsr2h,c
  1532  000850  50DF               	movf	indf2,w,c
  1533  000852  EC23  F00C         	call	_SetPin
  1534                           
  1535                           ;pwm.c: 286: } else if (TMR0 >= Motors[i].duty && Motors[i].state == 1) {
  1536  000856  D099               	goto	l1964
  1537  000858                     l1954:
  1538  000858  C071  F03C         	movff	CheckPWMOutput@i,___wmul@multiplier
  1539  00085C  C072  F03D         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1540  000860  0E00               	movlw	0
  1541  000862  6E3F               	movwf	___wmul@multiplicand+1,c
  1542  000864  0E07               	movlw	7
  1543  000866  6E3E               	movwf	___wmul@multiplicand,c
  1544  000868  ECAF  F00C         	call	___wmul	;wreg free
  1545  00086C  0E04               	movlw	4
  1546  00086E  263C               	addwf	?___wmul,f,c
  1547  000870  0E00               	movlw	0
  1548  000872  223D               	addwfc	?___wmul+1,f,c
  1549  000874  0E01               	movlw	low _Motors
  1550  000876  243C               	addwf	?___wmul,w,c
  1551  000878  6ED9               	movwf	fsr2l,c
  1552  00087A  0E00               	movlw	high _Motors
  1553  00087C  203D               	addwfc	?___wmul+1,w,c
  1554  00087E  6EDA               	movwf	fsr2h,c
  1555  000880  50DF               	movf	indf2,w,c
  1556  000882  0100               	movlb	0	; () banked
  1557  000884  6F6F               	movwf	??_CheckPWMOutput& (0+255),b
  1558  000886  6B70               	clrf	(??_CheckPWMOutput+1)& (0+255),b
  1559  000888  0100               	movlb	0	; () banked
  1560  00088A  516F               	movf	??_CheckPWMOutput& (0+255),w,b
  1561  00088C  5CD6               	subwf	4054,w,c	;volatile
  1562  00088E  0100               	movlb	0	; () banked
  1563  000890  5170               	movf	(??_CheckPWMOutput+1)& (0+255),w,b
  1564  000892  58D7               	subwfb	4055,w,c	;volatile
  1565  000894  A0D8               	btfss	status,0,c
  1566  000896  D079               	goto	l1964
  1567                           
  1568                           ; BSR set to: 0
  1569  000898  C071  F03C         	movff	CheckPWMOutput@i,___wmul@multiplier
  1570  00089C  C072  F03D         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1571  0008A0  0E00               	movlw	0
  1572  0008A2  6E3F               	movwf	___wmul@multiplicand+1,c
  1573  0008A4  0E07               	movlw	7
  1574  0008A6  6E3E               	movwf	___wmul@multiplicand,c
  1575  0008A8  ECAF  F00C         	call	___wmul	;wreg free
  1576  0008AC  0E01               	movlw	low _Motors
  1577  0008AE  243C               	addwf	?___wmul,w,c
  1578  0008B0  6ED9               	movwf	fsr2l,c
  1579  0008B2  0E00               	movlw	high _Motors
  1580  0008B4  203D               	addwfc	?___wmul+1,w,c
  1581  0008B6  6EDA               	movwf	fsr2h,c
  1582  0008B8  A0DF               	btfss	indf2,0,c
  1583  0008BA  D067               	goto	l1964
  1584                           
  1585                           ;pwm.c: 288: Motors[i].state = 0;
  1586  0008BC  C071  F03C         	movff	CheckPWMOutput@i,___wmul@multiplier
  1587  0008C0  C072  F03D         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1588  0008C4  0E00               	movlw	0
  1589  0008C6  6E3F               	movwf	___wmul@multiplicand+1,c
  1590  0008C8  0E07               	movlw	7
  1591  0008CA  6E3E               	movwf	___wmul@multiplicand,c
  1592  0008CC  ECAF  F00C         	call	___wmul	;wreg free
  1593  0008D0  0E01               	movlw	low _Motors
  1594  0008D2  243C               	addwf	?___wmul,w,c
  1595  0008D4  6ED9               	movwf	fsr2l,c
  1596  0008D6  0E00               	movlw	high _Motors
  1597  0008D8  203D               	addwfc	?___wmul+1,w,c
  1598  0008DA  6EDA               	movwf	fsr2h,c
  1599  0008DC  90DF               	bcf	indf2,0,c
  1600                           
  1601                           ;pwm.c: 290: SetPin(Motors[i].PWMPin,0);
  1602  0008DE  0E00               	movlw	0
  1603  0008E0  6E42               	movwf	SetPin@value,c
  1604  0008E2  C071  F03C         	movff	CheckPWMOutput@i,___wmul@multiplier
  1605  0008E6  C072  F03D         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1606  0008EA  0E00               	movlw	0
  1607  0008EC  6E3F               	movwf	___wmul@multiplicand+1,c
  1608  0008EE  0E07               	movlw	7
  1609  0008F0  6E3E               	movwf	___wmul@multiplicand,c
  1610  0008F2  ECAF  F00C         	call	___wmul	;wreg free
  1611  0008F6  0E01               	movlw	1
  1612  0008F8  263C               	addwf	?___wmul,f,c
  1613  0008FA  0E00               	movlw	0
  1614  0008FC  223D               	addwfc	?___wmul+1,f,c
  1615  0008FE  0E01               	movlw	low _Motors
  1616  000900  243C               	addwf	?___wmul,w,c
  1617  000902  6ED9               	movwf	fsr2l,c
  1618  000904  0E00               	movlw	high _Motors
  1619  000906  203D               	addwfc	?___wmul+1,w,c
  1620  000908  6EDA               	movwf	fsr2h,c
  1621  00090A  50DF               	movf	indf2,w,c
  1622  00090C  EC23  F00C         	call	_SetPin
  1623                           
  1624                           ;pwm.c: 291: }
  1625                           ;pwm.c: 292: }
  1626                           ;pwm.c: 293: } else if (Motors[i].state) {
  1627  000910  D03C               	goto	l1964
  1628  000912                     l1960:
  1629  000912  C071  F03C         	movff	CheckPWMOutput@i,___wmul@multiplier
  1630  000916  C072  F03D         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1631  00091A  0E00               	movlw	0
  1632  00091C  6E3F               	movwf	___wmul@multiplicand+1,c
  1633  00091E  0E07               	movlw	7
  1634  000920  6E3E               	movwf	___wmul@multiplicand,c
  1635  000922  ECAF  F00C         	call	___wmul	;wreg free
  1636  000926  0E01               	movlw	low _Motors
  1637  000928  243C               	addwf	?___wmul,w,c
  1638  00092A  6ED9               	movwf	fsr2l,c
  1639  00092C  0E00               	movlw	high _Motors
  1640  00092E  203D               	addwfc	?___wmul+1,w,c
  1641  000930  6EDA               	movwf	fsr2h,c
  1642  000932  A0DF               	btfss	indf2,0,c
  1643  000934  D02A               	goto	l1964
  1644                           
  1645                           ;pwm.c: 296: Motors[i].state = 0;
  1646  000936  C071  F03C         	movff	CheckPWMOutput@i,___wmul@multiplier
  1647  00093A  C072  F03D         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1648  00093E  0E00               	movlw	0
  1649  000940  6E3F               	movwf	___wmul@multiplicand+1,c
  1650  000942  0E07               	movlw	7
  1651  000944  6E3E               	movwf	___wmul@multiplicand,c
  1652  000946  ECAF  F00C         	call	___wmul	;wreg free
  1653  00094A  0E01               	movlw	low _Motors
  1654  00094C  243C               	addwf	?___wmul,w,c
  1655  00094E  6ED9               	movwf	fsr2l,c
  1656  000950  0E00               	movlw	high _Motors
  1657  000952  203D               	addwfc	?___wmul+1,w,c
  1658  000954  6EDA               	movwf	fsr2h,c
  1659  000956  90DF               	bcf	indf2,0,c
  1660                           
  1661                           ;pwm.c: 297: SetPin(Motors[i].PWMPin,0);
  1662  000958  0E00               	movlw	0
  1663  00095A  6E42               	movwf	SetPin@value,c
  1664  00095C  C071  F03C         	movff	CheckPWMOutput@i,___wmul@multiplier
  1665  000960  C072  F03D         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1666  000964  0E00               	movlw	0
  1667  000966  6E3F               	movwf	___wmul@multiplicand+1,c
  1668  000968  0E07               	movlw	7
  1669  00096A  6E3E               	movwf	___wmul@multiplicand,c
  1670  00096C  ECAF  F00C         	call	___wmul	;wreg free
  1671  000970  0E01               	movlw	1
  1672  000972  263C               	addwf	?___wmul,f,c
  1673  000974  0E00               	movlw	0
  1674  000976  223D               	addwfc	?___wmul+1,f,c
  1675  000978  0E01               	movlw	low _Motors
  1676  00097A  243C               	addwf	?___wmul,w,c
  1677  00097C  6ED9               	movwf	fsr2l,c
  1678  00097E  0E00               	movlw	high _Motors
  1679  000980  203D               	addwfc	?___wmul+1,w,c
  1680  000982  6EDA               	movwf	fsr2h,c
  1681  000984  50DF               	movf	indf2,w,c
  1682  000986  EC23  F00C         	call	_SetPin
  1683  00098A                     l1964:
  1684  00098A  0100               	movlb	0	; () banked
  1685  00098C  4B71               	infsnz	CheckPWMOutput@i& (0+255),f,b
  1686  00098E  2B72               	incf	(CheckPWMOutput@i+1)& (0+255),f,b
  1687                           
  1688                           ; BSR set to: 0
  1689  000990  0100               	movlb	0	; () banked
  1690  000992  BF72               	btfsc	(CheckPWMOutput@i+1)& (0+255),7,b
  1691  000994  D51A               	goto	l1910
  1692  000996  0100               	movlb	0	; () banked
  1693  000998  5172               	movf	(CheckPWMOutput@i+1)& (0+255),w,b
  1694  00099A  E101               	bnz	l1968
  1695  00099C  D50F               	goto	L2
  1696  00099E                     l1968:
  1697                           
  1698                           ; BSR set to: 0
  1699                           ;pwm.c: 298: }
  1700                           ;pwm.c: 299: }
  1701                           ;pwm.c: 301: if (AccelCount >= AccelRate) {
  1702  00099E  5046               	movf	_AccelRate,w,c
  1703  0009A0  5C1F               	subwf	_AccelCount,w,c
  1704  0009A2  5047               	movf	_AccelRate+1,w,c
  1705  0009A4  5820               	subwfb	_AccelCount+1,w,c
  1706  0009A6  A0D8               	btfss	status,0,c
  1707  0009A8  D007               	goto	l1974
  1708                           
  1709                           ; BSR set to: 0
  1710                           ;pwm.c: 302: AcceleratePWM();
  1711  0009AA  EC81  F00B         	call	_AcceleratePWM	;wreg free
  1712                           
  1713                           ;pwm.c: 303: AccelCount = 0;
  1714  0009AE  0E00               	movlw	0
  1715  0009B0  6E20               	movwf	_AccelCount+1,c
  1716  0009B2  0E00               	movlw	0
  1717  0009B4  6E1F               	movwf	_AccelCount,c
  1718                           
  1719                           ;pwm.c: 304: } else {
  1720  0009B6  0012               	return	
  1721  0009B8                     l1974:
  1722                           
  1723                           ;pwm.c: 305: AccelCount++;
  1724  0009B8  4A1F               	infsnz	_AccelCount,f,c
  1725  0009BA  2A20               	incf	_AccelCount+1,f,c
  1726  0009BC  0012               	return	
  1727  0009BE                     __end_of_CheckPWMOutput:
  1728                           	opt stack 0
  1729                           tblptru	equ	0xFF8
  1730                           tblptrh	equ	0xFF7
  1731                           tblptrl	equ	0xFF6
  1732                           tablat	equ	0xFF5
  1733                           intcon	equ	0xFF2
  1734                           intcon2	equ	0xFF1
  1735                           postinc0	equ	0xFEE
  1736                           wreg	equ	0xFE8
  1737                           indf2	equ	0xFDF
  1738                           postinc2	equ	0xFDE
  1739                           fsr2h	equ	0xFDA
  1740                           fsr2l	equ	0xFD9
  1741                           status	equ	0xFD8
  1742                           
  1743 ;; *************** function _AcceleratePWM *****************
  1744 ;; Defined at:
  1745 ;;		line 225 in file "pwm.c"
  1746 ;; Parameters:    Size  Location     Type
  1747 ;;		None
  1748 ;; Auto vars:     Size  Location     Type
  1749 ;;  i               2   13[BANK0 ] int 
  1750 ;; Return value:  Size  Location     Type
  1751 ;;                  1    wreg      void 
  1752 ;; Registers used:
  1753 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1754 ;; Tracked objects:
  1755 ;;		On entry : 0/0
  1756 ;;		On exit  : 0/0
  1757 ;;		Unchanged: 0/0
  1758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1759 ;;      Params:         0       0       0       0
  1760 ;;      Locals:         0       2       0       0
  1761 ;;      Temps:          0       2       0       0
  1762 ;;      Totals:         0       4       0       0
  1763 ;;Total ram usage:        4 bytes
  1764 ;; Hardware stack levels used:    1
  1765 ;; Hardware stack levels required when called:    4
  1766 ;; This function calls:
  1767 ;;		_AccelerateMotor
  1768 ;;		_StopMotor
  1769 ;;		___wmul
  1770 ;; This function is called by:
  1771 ;;		_CheckPWMOutput
  1772 ;; This function uses a non-reentrant model
  1773 ;;
  1774                           
  1775                           	psect	text5
  1776  001702                     __ptext5:
  1777                           	opt stack 0
  1778  001702                     _AcceleratePWM:
  1779                           	opt stack 25
  1780                           
  1781                           ;pwm.c: 226: int i;
  1782                           ;pwm.c: 227: for (i = 0; i < 4; i++) {
  1783                           
  1784                           ;incstack = 0
  1785  001702  0E00               	movlw	0
  1786  001704  0100               	movlb	0	; () banked
  1787  001706  6F6E               	movwf	(AcceleratePWM@i+1)& (0+255),b
  1788  001708  0E00               	movlw	0
  1789  00170A  6F6D               	movwf	AcceleratePWM@i& (0+255),b
  1790                           
  1791                           ; BSR set to: 0
  1792  00170C  0100               	movlb	0	; () banked
  1793  00170E  BF6E               	btfsc	(AcceleratePWM@i+1)& (0+255),7,b
  1794  001710  D00A               	goto	l1854
  1795  001712  0100               	movlb	0	; () banked
  1796  001714  516E               	movf	(AcceleratePWM@i+1)& (0+255),w,b
  1797  001716  E106               	bnz	u2600
  1798  001718  0E04               	movlw	4
  1799  00171A  0100               	movlb	0	; () banked
  1800  00171C  5D6D               	subwf	AcceleratePWM@i& (0+255),w,b
  1801  00171E  B0D8               	btfsc	status,0,c
  1802  001720  0012               	return	
  1803  001722  D001               	goto	l1854
  1804  001724                     u2600:
  1805                           
  1806                           ; BSR set to: 0
  1807  001724  0012               	return	
  1808  001726                     l1854:
  1809                           
  1810                           ; BSR set to: 0
  1811                           ;pwm.c: 228: if (PWMPause || Motors[i].paused) {
  1812  001726  5025               	movf	_PWMPause,w,c
  1813  001728  A4D8               	btfss	status,2,c
  1814  00172A  D012               	goto	l1858
  1815                           
  1816                           ; BSR set to: 0
  1817  00172C  C06D  F03C         	movff	AcceleratePWM@i,___wmul@multiplier
  1818  001730  C06E  F03D         	movff	AcceleratePWM@i+1,___wmul@multiplier+1
  1819  001734  0E00               	movlw	0
  1820  001736  6E3F               	movwf	___wmul@multiplicand+1,c
  1821  001738  0E07               	movlw	7
  1822  00173A  6E3E               	movwf	___wmul@multiplicand,c
  1823  00173C  ECAF  F00C         	call	___wmul	;wreg free
  1824  001740  0E01               	movlw	low _Motors
  1825  001742  243C               	addwf	?___wmul,w,c
  1826  001744  6ED9               	movwf	fsr2l,c
  1827  001746  0E00               	movlw	high _Motors
  1828  001748  203D               	addwfc	?___wmul+1,w,c
  1829  00174A  6EDA               	movwf	fsr2h,c
  1830  00174C  A4DF               	btfss	indf2,2,c
  1831  00174E  D007               	goto	l1860
  1832  001750                     l1858:
  1833                           
  1834                           ;pwm.c: 229: StopMotor(i);
  1835  001750  C06D  F067         	movff	AcceleratePWM@i,StopMotor@index
  1836  001754  C06E  F068         	movff	AcceleratePWM@i+1,StopMotor@index+1
  1837  001758  ECCA  F008         	call	_StopMotor	;wreg free
  1838                           
  1839                           ;pwm.c: 230: } else {
  1840  00175C  D069               	goto	l1868
  1841  00175E                     l1860:
  1842                           
  1843                           ;pwm.c: 234: if (Motors[i].direction != Motors[i].targetDirection) {
  1844  00175E  C06D  F03C         	movff	AcceleratePWM@i,___wmul@multiplier
  1845  001762  C06E  F03D         	movff	AcceleratePWM@i+1,___wmul@multiplier+1
  1846  001766  0E00               	movlw	0
  1847  001768  6E3F               	movwf	___wmul@multiplicand+1,c
  1848  00176A  0E07               	movlw	7
  1849  00176C  6E3E               	movwf	___wmul@multiplicand,c
  1850  00176E  ECAF  F00C         	call	___wmul	;wreg free
  1851  001772  0E01               	movlw	low _Motors
  1852  001774  243C               	addwf	?___wmul,w,c
  1853  001776  6ED9               	movwf	fsr2l,c
  1854  001778  0E00               	movlw	high _Motors
  1855  00177A  203D               	addwfc	?___wmul+1,w,c
  1856  00177C  6EDA               	movwf	fsr2h,c
  1857  00177E  A8DF               	btfss	indf2,4,c
  1858  001780  D002               	goto	u2630
  1859  001782  0E01               	movlw	1
  1860  001784  D001               	goto	u2632
  1861  001786                     u2630:
  1862  001786  0E00               	movlw	0
  1863  001788                     u2632:
  1864  001788  0100               	movlb	0	; () banked
  1865  00178A  6F6B               	movwf	??_AcceleratePWM& (0+255),b
  1866  00178C  C06D  F03C         	movff	AcceleratePWM@i,___wmul@multiplier
  1867  001790  C06E  F03D         	movff	AcceleratePWM@i+1,___wmul@multiplier+1
  1868  001794  0E00               	movlw	0
  1869  001796  6E3F               	movwf	___wmul@multiplicand+1,c
  1870  001798  0E07               	movlw	7
  1871  00179A  6E3E               	movwf	___wmul@multiplicand,c
  1872  00179C  ECAF  F00C         	call	___wmul	;wreg free
  1873  0017A0  0E01               	movlw	low _Motors
  1874  0017A2  243C               	addwf	?___wmul,w,c
  1875  0017A4  6ED9               	movwf	fsr2l,c
  1876  0017A6  0E00               	movlw	high _Motors
  1877  0017A8  203D               	addwfc	?___wmul+1,w,c
  1878  0017AA  6EDA               	movwf	fsr2h,c
  1879  0017AC  A6DF               	btfss	indf2,3,c
  1880  0017AE  D002               	goto	u2640
  1881  0017B0  0E01               	movlw	1
  1882  0017B2  D001               	goto	u2642
  1883  0017B4                     u2640:
  1884  0017B4  0E00               	movlw	0
  1885  0017B6                     u2642:
  1886  0017B6  0100               	movlb	0	; () banked
  1887  0017B8  1B6B               	xorwf	??_AcceleratePWM& (0+255),f,b
  1888  0017BA  B4D8               	btfsc	status,2,c
  1889  0017BC  D007               	goto	l1864
  1890                           
  1891                           ; BSR set to: 0
  1892                           ;pwm.c: 235: StopMotor(i);
  1893  0017BE  C06D  F067         	movff	AcceleratePWM@i,StopMotor@index
  1894  0017C2  C06E  F068         	movff	AcceleratePWM@i+1,StopMotor@index+1
  1895  0017C6  ECCA  F008         	call	_StopMotor	;wreg free
  1896                           
  1897                           ;pwm.c: 236: } else if (Motors[i].duty != Motors[i].target) {
  1898  0017CA  D032               	goto	l1868
  1899  0017CC                     l1864:
  1900  0017CC  C06D  F03C         	movff	AcceleratePWM@i,___wmul@multiplier
  1901  0017D0  C06E  F03D         	movff	AcceleratePWM@i+1,___wmul@multiplier+1
  1902  0017D4  0E00               	movlw	0
  1903  0017D6  6E3F               	movwf	___wmul@multiplicand+1,c
  1904  0017D8  0E07               	movlw	7
  1905  0017DA  6E3E               	movwf	___wmul@multiplicand,c
  1906  0017DC  ECAF  F00C         	call	___wmul	;wreg free
  1907  0017E0  0E05               	movlw	5
  1908  0017E2  263C               	addwf	?___wmul,f,c
  1909  0017E4  0E00               	movlw	0
  1910  0017E6  223D               	addwfc	?___wmul+1,f,c
  1911  0017E8  0E01               	movlw	low _Motors
  1912  0017EA  243C               	addwf	?___wmul,w,c
  1913  0017EC  6ED9               	movwf	fsr2l,c
  1914  0017EE  0E00               	movlw	high _Motors
  1915  0017F0  203D               	addwfc	?___wmul+1,w,c
  1916  0017F2  6EDA               	movwf	fsr2h,c
  1917  0017F4  C06D  F03C         	movff	AcceleratePWM@i,___wmul@multiplier
  1918  0017F8  C06E  F03D         	movff	AcceleratePWM@i+1,___wmul@multiplier+1
  1919  0017FC  0E00               	movlw	0
  1920  0017FE  6E3F               	movwf	___wmul@multiplicand+1,c
  1921  001800  0E07               	movlw	7
  1922  001802  6E3E               	movwf	___wmul@multiplicand,c
  1923  001804  ECAF  F00C         	call	___wmul	;wreg free
  1924  001808  0E04               	movlw	4
  1925  00180A  263C               	addwf	?___wmul,f,c
  1926  00180C  0E00               	movlw	0
  1927  00180E  223D               	addwfc	?___wmul+1,f,c
  1928  001810  0E01               	movlw	low _Motors
  1929  001812  243C               	addwf	?___wmul,w,c
  1930  001814  6EE1               	movwf	fsr1l,c
  1931  001816  0E00               	movlw	high _Motors
  1932  001818  203D               	addwfc	?___wmul+1,w,c
  1933  00181A  6EE2               	movwf	fsr1h,c
  1934  00181C  50DE               	movf	postinc2,w,c
  1935  00181E  18E6               	xorwf	postinc1,w,c
  1936  001820  B4D8               	btfsc	status,2,c
  1937  001822  D006               	goto	l1868
  1938                           
  1939                           ;pwm.c: 237: AccelerateMotor(i);
  1940  001824  C06D  F067         	movff	AcceleratePWM@i,AccelerateMotor@index
  1941  001828  C06E  F068         	movff	AcceleratePWM@i+1,AccelerateMotor@index+1
  1942  00182C  ECDF  F004         	call	_AccelerateMotor	;wreg free
  1943  001830                     l1868:
  1944  001830  0100               	movlb	0	; () banked
  1945  001832  4B6D               	infsnz	AcceleratePWM@i& (0+255),f,b
  1946  001834  2B6E               	incf	(AcceleratePWM@i+1)& (0+255),f,b
  1947                           
  1948                           ; BSR set to: 0
  1949  001836  0100               	movlb	0	; () banked
  1950  001838  BF6E               	btfsc	(AcceleratePWM@i+1)& (0+255),7,b
  1951  00183A  D775               	goto	l1854
  1952  00183C  0100               	movlb	0	; () banked
  1953  00183E  516E               	movf	(AcceleratePWM@i+1)& (0+255),w,b
  1954  001840  E101               	bnz	l260
  1955  001842  D76A               	goto	L3
  1956  001844                     l260:
  1957                           
  1958                           ; BSR set to: 0
  1959  001844  0012               	return		;funcret
  1960  001846                     __end_of_AcceleratePWM:
  1961                           	opt stack 0
  1962                           tblptru	equ	0xFF8
  1963                           tblptrh	equ	0xFF7
  1964                           tblptrl	equ	0xFF6
  1965                           tablat	equ	0xFF5
  1966                           intcon	equ	0xFF2
  1967                           intcon2	equ	0xFF1
  1968                           postinc0	equ	0xFEE
  1969                           wreg	equ	0xFE8
  1970                           postinc1	equ	0xFE6
  1971                           fsr1h	equ	0xFE2
  1972                           fsr1l	equ	0xFE1
  1973                           indf2	equ	0xFDF
  1974                           postinc2	equ	0xFDE
  1975                           fsr2h	equ	0xFDA
  1976                           fsr2l	equ	0xFD9
  1977                           status	equ	0xFD8
  1978                           
  1979 ;; *************** function _StopMotor *****************
  1980 ;; Defined at:
  1981 ;;		line 158 in file "pwm.c"
  1982 ;; Parameters:    Size  Location     Type
  1983 ;;  index           2    7[BANK0 ] int 
  1984 ;; Auto vars:     Size  Location     Type
  1985 ;;		None
  1986 ;; Return value:  Size  Location     Type
  1987 ;;                  1    wreg      void 
  1988 ;; Registers used:
  1989 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1990 ;; Tracked objects:
  1991 ;;		On entry : 0/0
  1992 ;;		On exit  : 0/0
  1993 ;;		Unchanged: 0/0
  1994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1995 ;;      Params:         0       2       0       0
  1996 ;;      Locals:         0       0       0       0
  1997 ;;      Temps:          1       0       0       0
  1998 ;;      Totals:         1       2       0       0
  1999 ;;Total ram usage:        3 bytes
  2000 ;; Hardware stack levels used:    1
  2001 ;; Hardware stack levels required when called:    3
  2002 ;; This function calls:
  2003 ;;		_ExponentialProfile
  2004 ;;		_SetPin
  2005 ;;		___wmul
  2006 ;; This function is called by:
  2007 ;;		_AcceleratePWM
  2008 ;; This function uses a non-reentrant model
  2009 ;;
  2010                           
  2011                           	psect	text6
  2012  001194                     __ptext6:
  2013                           	opt stack 0
  2014  001194                     _StopMotor:
  2015                           	opt stack 25
  2016                           
  2017                           ;pwm.c: 159: if (Motors[index].duty == 0 && Motors[index].direction != Motors[index].tar
      +                          getDirection) {
  2018                           
  2019                           ; BSR set to: 0
  2020                           ;incstack = 0
  2021  001194  C067  F03C         	movff	StopMotor@index,___wmul@multiplier
  2022  001198  C068  F03D         	movff	StopMotor@index+1,___wmul@multiplier+1
  2023  00119C  0E00               	movlw	0
  2024  00119E  6E3F               	movwf	___wmul@multiplicand+1,c
  2025  0011A0  0E07               	movlw	7
  2026  0011A2  6E3E               	movwf	___wmul@multiplicand,c
  2027  0011A4  ECAF  F00C         	call	___wmul	;wreg free
  2028  0011A8  0E04               	movlw	4
  2029  0011AA  263C               	addwf	?___wmul,f,c
  2030  0011AC  0E00               	movlw	0
  2031  0011AE  223D               	addwfc	?___wmul+1,f,c
  2032  0011B0  0E01               	movlw	low _Motors
  2033  0011B2  243C               	addwf	?___wmul,w,c
  2034  0011B4  6ED9               	movwf	fsr2l,c
  2035  0011B6  0E00               	movlw	high _Motors
  2036  0011B8  203D               	addwfc	?___wmul+1,w,c
  2037  0011BA  6EDA               	movwf	fsr2h,c
  2038  0011BC  50DF               	movf	indf2,w,c
  2039  0011BE  A4D8               	btfss	status,2,c
  2040  0011C0  D0AC               	goto	l1792
  2041  0011C2  C067  F03C         	movff	StopMotor@index,___wmul@multiplier
  2042  0011C6  C068  F03D         	movff	StopMotor@index+1,___wmul@multiplier+1
  2043  0011CA  0E00               	movlw	0
  2044  0011CC  6E3F               	movwf	___wmul@multiplicand+1,c
  2045  0011CE  0E07               	movlw	7
  2046  0011D0  6E3E               	movwf	___wmul@multiplicand,c
  2047  0011D2  ECAF  F00C         	call	___wmul	;wreg free
  2048  0011D6  0E01               	movlw	low _Motors
  2049  0011D8  243C               	addwf	?___wmul,w,c
  2050  0011DA  6ED9               	movwf	fsr2l,c
  2051  0011DC  0E00               	movlw	high _Motors
  2052  0011DE  203D               	addwfc	?___wmul+1,w,c
  2053  0011E0  6EDA               	movwf	fsr2h,c
  2054  0011E2  A8DF               	btfss	indf2,4,c
  2055  0011E4  D002               	goto	u2430
  2056  0011E6  0E01               	movlw	1
  2057  0011E8  D001               	goto	u2432
  2058  0011EA                     u2430:
  2059  0011EA  0E00               	movlw	0
  2060  0011EC                     u2432:
  2061  0011EC  6E45               	movwf	??_StopMotor& (0+255),c
  2062  0011EE  C067  F03C         	movff	StopMotor@index,___wmul@multiplier
  2063  0011F2  C068  F03D         	movff	StopMotor@index+1,___wmul@multiplier+1
  2064  0011F6  0E00               	movlw	0
  2065  0011F8  6E3F               	movwf	___wmul@multiplicand+1,c
  2066  0011FA  0E07               	movlw	7
  2067  0011FC  6E3E               	movwf	___wmul@multiplicand,c
  2068  0011FE  ECAF  F00C         	call	___wmul	;wreg free
  2069  001202  0E01               	movlw	low _Motors
  2070  001204  243C               	addwf	?___wmul,w,c
  2071  001206  6ED9               	movwf	fsr2l,c
  2072  001208  0E00               	movlw	high _Motors
  2073  00120A  203D               	addwfc	?___wmul+1,w,c
  2074  00120C  6EDA               	movwf	fsr2h,c
  2075  00120E  A6DF               	btfss	indf2,3,c
  2076  001210  D002               	goto	u2440
  2077  001212  0E01               	movlw	1
  2078  001214  D001               	goto	u2442
  2079  001216                     u2440:
  2080  001216  0E00               	movlw	0
  2081  001218                     u2442:
  2082  001218  1A45               	xorwf	??_StopMotor,f,c
  2083  00121A  B4D8               	btfsc	status,2,c
  2084  00121C  D07E               	goto	l1792
  2085                           
  2086                           ;pwm.c: 160: Motors[index].direction = Motors[index].targetDirection;
  2087  00121E  C067  F03C         	movff	StopMotor@index,___wmul@multiplier
  2088  001222  C068  F03D         	movff	StopMotor@index+1,___wmul@multiplier+1
  2089  001226  0E00               	movlw	0
  2090  001228  6E3F               	movwf	___wmul@multiplicand+1,c
  2091  00122A  0E07               	movlw	7
  2092  00122C  6E3E               	movwf	___wmul@multiplicand,c
  2093  00122E  ECAF  F00C         	call	___wmul	;wreg free
  2094  001232  0E01               	movlw	low _Motors
  2095  001234  243C               	addwf	?___wmul,w,c
  2096  001236  6ED9               	movwf	fsr2l,c
  2097  001238  0E00               	movlw	high _Motors
  2098  00123A  203D               	addwfc	?___wmul+1,w,c
  2099  00123C  6EDA               	movwf	fsr2h,c
  2100  00123E  C067  F03C         	movff	StopMotor@index,___wmul@multiplier
  2101  001242  C068  F03D         	movff	StopMotor@index+1,___wmul@multiplier+1
  2102  001246  0E00               	movlw	0
  2103  001248  6E3F               	movwf	___wmul@multiplicand+1,c
  2104  00124A  0E07               	movlw	7
  2105  00124C  6E3E               	movwf	___wmul@multiplicand,c
  2106  00124E  ECAF  F00C         	call	___wmul	;wreg free
  2107  001252  0E01               	movlw	low _Motors
  2108  001254  243C               	addwf	?___wmul,w,c
  2109  001256  6EE1               	movwf	fsr1l,c
  2110  001258  0E00               	movlw	high _Motors
  2111  00125A  203D               	addwfc	?___wmul+1,w,c
  2112  00125C  6EE2               	movwf	fsr1h,c
  2113  00125E  B8DF               	btfsc	indf2,4,c
  2114  001260  D002               	bra	u2465
  2115  001262  96E7               	bcf	indf1,3,c
  2116  001264  D001               	bra	u2466
  2117  001266                     u2465:
  2118  001266  86E7               	bsf	indf1,3,c
  2119  001268                     u2466:
  2120                           
  2121                           ;pwm.c: 162: SetPin(Motors[index].dirPin, Motors[index].direction);
  2122  001268  C067  F03C         	movff	StopMotor@index,___wmul@multiplier
  2123  00126C  C068  F03D         	movff	StopMotor@index+1,___wmul@multiplier+1
  2124  001270  0E00               	movlw	0
  2125  001272  6E3F               	movwf	___wmul@multiplicand+1,c
  2126  001274  0E07               	movlw	7
  2127  001276  6E3E               	movwf	___wmul@multiplicand,c
  2128  001278  ECAF  F00C         	call	___wmul	;wreg free
  2129  00127C  0E01               	movlw	low _Motors
  2130  00127E  243C               	addwf	?___wmul,w,c
  2131  001280  6ED9               	movwf	fsr2l,c
  2132  001282  0E00               	movlw	high _Motors
  2133  001284  203D               	addwfc	?___wmul+1,w,c
  2134  001286  6EDA               	movwf	fsr2h,c
  2135  001288  0E00               	movlw	0
  2136  00128A  B6DF               	btfsc	indf2,3,c
  2137  00128C  0E01               	movlw	1
  2138  00128E  6E42               	movwf	SetPin@value,c
  2139  001290  C067  F03C         	movff	StopMotor@index,___wmul@multiplier
  2140  001294  C068  F03D         	movff	StopMotor@index+1,___wmul@multiplier+1
  2141  001298  0E00               	movlw	0
  2142  00129A  6E3F               	movwf	___wmul@multiplicand+1,c
  2143  00129C  0E07               	movlw	7
  2144  00129E  6E3E               	movwf	___wmul@multiplicand,c
  2145  0012A0  ECAF  F00C         	call	___wmul	;wreg free
  2146  0012A4  0E02               	movlw	2
  2147  0012A6  263C               	addwf	?___wmul,f,c
  2148  0012A8  0E00               	movlw	0
  2149  0012AA  223D               	addwfc	?___wmul+1,f,c
  2150  0012AC  0E01               	movlw	low _Motors
  2151  0012AE  243C               	addwf	?___wmul,w,c
  2152  0012B0  6ED9               	movwf	fsr2l,c
  2153  0012B2  0E00               	movlw	high _Motors
  2154  0012B4  203D               	addwfc	?___wmul+1,w,c
  2155  0012B6  6EDA               	movwf	fsr2h,c
  2156  0012B8  50DF               	movf	indf2,w,c
  2157  0012BA  EC23  F00C         	call	_SetPin
  2158                           
  2159                           ;pwm.c: 163: SetPin(Motors[index].cdirPin, !Motors[index].direction);
  2160  0012BE  C067  F03C         	movff	StopMotor@index,___wmul@multiplier
  2161  0012C2  C068  F03D         	movff	StopMotor@index+1,___wmul@multiplier+1
  2162  0012C6  0E00               	movlw	0
  2163  0012C8  6E3F               	movwf	___wmul@multiplicand+1,c
  2164  0012CA  0E07               	movlw	7
  2165  0012CC  6E3E               	movwf	___wmul@multiplicand,c
  2166  0012CE  ECAF  F00C         	call	___wmul	;wreg free
  2167  0012D2  0E01               	movlw	low _Motors
  2168  0012D4  243C               	addwf	?___wmul,w,c
  2169  0012D6  6ED9               	movwf	fsr2l,c
  2170  0012D8  0E00               	movlw	high _Motors
  2171  0012DA  203D               	addwfc	?___wmul+1,w,c
  2172  0012DC  6EDA               	movwf	fsr2h,c
  2173  0012DE  B6DF               	btfsc	indf2,3,c
  2174  0012E0  D002               	goto	u2470
  2175  0012E2  0E01               	movlw	1
  2176  0012E4  D001               	goto	u2480
  2177  0012E6                     u2470:
  2178  0012E6  0E00               	movlw	0
  2179  0012E8                     u2480:
  2180  0012E8  6E42               	movwf	SetPin@value,c
  2181  0012EA  C067  F03C         	movff	StopMotor@index,___wmul@multiplier
  2182  0012EE  C068  F03D         	movff	StopMotor@index+1,___wmul@multiplier+1
  2183  0012F2  0E00               	movlw	0
  2184  0012F4  6E3F               	movwf	___wmul@multiplicand+1,c
  2185  0012F6  0E07               	movlw	7
  2186  0012F8  6E3E               	movwf	___wmul@multiplicand,c
  2187  0012FA  ECAF  F00C         	call	___wmul	;wreg free
  2188  0012FE  0E03               	movlw	3
  2189  001300  263C               	addwf	?___wmul,f,c
  2190  001302  0E00               	movlw	0
  2191  001304  223D               	addwfc	?___wmul+1,f,c
  2192  001306  0E01               	movlw	low _Motors
  2193  001308  243C               	addwf	?___wmul,w,c
  2194  00130A  6ED9               	movwf	fsr2l,c
  2195  00130C  0E00               	movlw	high _Motors
  2196  00130E  203D               	addwfc	?___wmul+1,w,c
  2197  001310  6EDA               	movwf	fsr2h,c
  2198  001312  50DF               	movf	indf2,w,c
  2199  001314  EC23  F00C         	call	_SetPin
  2200                           
  2201                           ;pwm.c: 164: } else if (Motors[index].duty > 0) {
  2202  001318  0012               	return	
  2203  00131A                     l1792:
  2204  00131A  C067  F03C         	movff	StopMotor@index,___wmul@multiplier
  2205  00131E  C068  F03D         	movff	StopMotor@index+1,___wmul@multiplier+1
  2206  001322  0E00               	movlw	0
  2207  001324  6E3F               	movwf	___wmul@multiplicand+1,c
  2208  001326  0E07               	movlw	7
  2209  001328  6E3E               	movwf	___wmul@multiplicand,c
  2210  00132A  ECAF  F00C         	call	___wmul	;wreg free
  2211  00132E  0E04               	movlw	4
  2212  001330  263C               	addwf	?___wmul,f,c
  2213  001332  0E00               	movlw	0
  2214  001334  223D               	addwfc	?___wmul+1,f,c
  2215  001336  0E01               	movlw	low _Motors
  2216  001338  243C               	addwf	?___wmul,w,c
  2217  00133A  6ED9               	movwf	fsr2l,c
  2218  00133C  0E00               	movlw	high _Motors
  2219  00133E  203D               	addwfc	?___wmul+1,w,c
  2220  001340  6EDA               	movwf	fsr2h,c
  2221  001342  50DF               	movf	indf2,w,c
  2222  001344  B4D8               	btfsc	status,2,c
  2223  001346  0012               	return	
  2224  001348  D0BC               	goto	l1812
  2225  00134A                     l1796:
  2226                           
  2227                           ;pwm.c: 167: Motors[index].duty = 0;
  2228  00134A  C067  F03C         	movff	StopMotor@index,___wmul@multiplier
  2229  00134E  C068  F03D         	movff	StopMotor@index+1,___wmul@multiplier+1
  2230  001352  0E00               	movlw	0
  2231  001354  6E3F               	movwf	___wmul@multiplicand+1,c
  2232  001356  0E07               	movlw	7
  2233  001358  6E3E               	movwf	___wmul@multiplicand,c
  2234  00135A  ECAF  F00C         	call	___wmul	;wreg free
  2235  00135E  0E04               	movlw	4
  2236  001360  263C               	addwf	?___wmul,f,c
  2237  001362  0E00               	movlw	0
  2238  001364  223D               	addwfc	?___wmul+1,f,c
  2239  001366  0E01               	movlw	low _Motors
  2240  001368  243C               	addwf	?___wmul,w,c
  2241  00136A  6ED9               	movwf	fsr2l,c
  2242  00136C  0E00               	movlw	high _Motors
  2243  00136E  203D               	addwfc	?___wmul+1,w,c
  2244  001370  6EDA               	movwf	fsr2h,c
  2245  001372  0E00               	movlw	0
  2246  001374  6EDF               	movwf	indf2,c
  2247                           
  2248                           ;pwm.c: 168: break;
  2249  001376  0012               	return	
  2250  001378                     l1798:
  2251                           
  2252                           ;pwm.c: 170: if (Motors[index].duty > MinimumDuty) {
  2253  001378  C067  F03C         	movff	StopMotor@index,___wmul@multiplier
  2254  00137C  C068  F03D         	movff	StopMotor@index+1,___wmul@multiplier+1
  2255  001380  0E00               	movlw	0
  2256  001382  6E3F               	movwf	___wmul@multiplicand+1,c
  2257  001384  0E07               	movlw	7
  2258  001386  6E3E               	movwf	___wmul@multiplicand,c
  2259  001388  ECAF  F00C         	call	___wmul	;wreg free
  2260  00138C  0E04               	movlw	4
  2261  00138E  263C               	addwf	?___wmul,f,c
  2262  001390  0E00               	movlw	0
  2263  001392  223D               	addwfc	?___wmul+1,f,c
  2264  001394  0E01               	movlw	low _Motors
  2265  001396  243C               	addwf	?___wmul,w,c
  2266  001398  6ED9               	movwf	fsr2l,c
  2267  00139A  0E00               	movlw	high _Motors
  2268  00139C  203D               	addwfc	?___wmul+1,w,c
  2269  00139E  6EDA               	movwf	fsr2h,c
  2270  0013A0  50DE               	movf	postinc2,w,c
  2271  0013A2  5C23               	subwf	_MinimumDuty,w,c
  2272  0013A4  B0D8               	btfsc	status,0,c
  2273  0013A6  D016               	goto	l1802
  2274                           
  2275                           ;pwm.c: 171: Motors[index].duty -= 1;
  2276  0013A8  C067  F03C         	movff	StopMotor@index,___wmul@multiplier
  2277  0013AC  C068  F03D         	movff	StopMotor@index+1,___wmul@multiplier+1
  2278  0013B0  0E00               	movlw	0
  2279  0013B2  6E3F               	movwf	___wmul@multiplicand+1,c
  2280  0013B4  0E07               	movlw	7
  2281  0013B6  6E3E               	movwf	___wmul@multiplicand,c
  2282  0013B8  ECAF  F00C         	call	___wmul	;wreg free
  2283  0013BC  0E04               	movlw	4
  2284  0013BE  263C               	addwf	?___wmul,f,c
  2285  0013C0  0E00               	movlw	0
  2286  0013C2  223D               	addwfc	?___wmul+1,f,c
  2287  0013C4  0E01               	movlw	low _Motors
  2288  0013C6  243C               	addwf	?___wmul,w,c
  2289  0013C8  6ED9               	movwf	fsr2l,c
  2290  0013CA  0E00               	movlw	high _Motors
  2291  0013CC  203D               	addwfc	?___wmul+1,w,c
  2292  0013CE  6EDA               	movwf	fsr2h,c
  2293  0013D0  06DF               	decf	indf2,f,c
  2294                           
  2295                           ;pwm.c: 172: } else {
  2296  0013D2  0012               	return	
  2297  0013D4                     l1802:
  2298                           
  2299                           ;pwm.c: 173: Motors[index].duty = 0;
  2300  0013D4  C067  F03C         	movff	StopMotor@index,___wmul@multiplier
  2301  0013D8  C068  F03D         	movff	StopMotor@index+1,___wmul@multiplier+1
  2302  0013DC  0E00               	movlw	0
  2303  0013DE  6E3F               	movwf	___wmul@multiplicand+1,c
  2304  0013E0  0E07               	movlw	7
  2305  0013E2  6E3E               	movwf	___wmul@multiplicand,c
  2306  0013E4  ECAF  F00C         	call	___wmul	;wreg free
  2307  0013E8  0E04               	movlw	4
  2308  0013EA  263C               	addwf	?___wmul,f,c
  2309  0013EC  0E00               	movlw	0
  2310  0013EE  223D               	addwfc	?___wmul+1,f,c
  2311  0013F0  0E01               	movlw	low _Motors
  2312  0013F2  243C               	addwf	?___wmul,w,c
  2313  0013F4  6ED9               	movwf	fsr2l,c
  2314  0013F6  0E00               	movlw	high _Motors
  2315  0013F8  203D               	addwfc	?___wmul+1,w,c
  2316  0013FA  6EDA               	movwf	fsr2h,c
  2317  0013FC  0E00               	movlw	0
  2318  0013FE  6EDF               	movwf	indf2,c
  2319                           
  2320                           ;pwm.c: 174: }
  2321                           ;pwm.c: 175: break;
  2322  001400  0012               	return	
  2323  001402                     l1804:
  2324                           
  2325                           ;pwm.c: 177: if (Motors[index].duty > MinimumDuty) {
  2326  001402  C067  F03C         	movff	StopMotor@index,___wmul@multiplier
  2327  001406  C068  F03D         	movff	StopMotor@index+1,___wmul@multiplier+1
  2328  00140A  0E00               	movlw	0
  2329  00140C  6E3F               	movwf	___wmul@multiplicand+1,c
  2330  00140E  0E07               	movlw	7
  2331  001410  6E3E               	movwf	___wmul@multiplicand,c
  2332  001412  ECAF  F00C         	call	___wmul	;wreg free
  2333  001416  0E04               	movlw	4
  2334  001418  263C               	addwf	?___wmul,f,c
  2335  00141A  0E00               	movlw	0
  2336  00141C  223D               	addwfc	?___wmul+1,f,c
  2337  00141E  0E01               	movlw	low _Motors
  2338  001420  243C               	addwf	?___wmul,w,c
  2339  001422  6ED9               	movwf	fsr2l,c
  2340  001424  0E00               	movlw	high _Motors
  2341  001426  203D               	addwfc	?___wmul+1,w,c
  2342  001428  6EDA               	movwf	fsr2h,c
  2343  00142A  50DE               	movf	postinc2,w,c
  2344  00142C  5C23               	subwf	_MinimumDuty,w,c
  2345  00142E  B0D8               	btfsc	status,0,c
  2346  001430  D031               	goto	l1808
  2347                           
  2348                           ;pwm.c: 178: Motors[index].duty -= ExponentialProfile(Motors[index].duty, MinimumDuty);
  2349  001432  C023  F042         	movff	_MinimumDuty,ExponentialProfile@target
  2350  001436  C067  F03C         	movff	StopMotor@index,___wmul@multiplier
  2351  00143A  C068  F03D         	movff	StopMotor@index+1,___wmul@multiplier+1
  2352  00143E  0E00               	movlw	0
  2353  001440  6E3F               	movwf	___wmul@multiplicand+1,c
  2354  001442  0E07               	movlw	7
  2355  001444  6E3E               	movwf	___wmul@multiplicand,c
  2356  001446  ECAF  F00C         	call	___wmul	;wreg free
  2357  00144A  0E04               	movlw	4
  2358  00144C  263C               	addwf	?___wmul,f,c
  2359  00144E  0E00               	movlw	0
  2360  001450  223D               	addwfc	?___wmul+1,f,c
  2361  001452  0E01               	movlw	low _Motors
  2362  001454  243C               	addwf	?___wmul,w,c
  2363  001456  6ED9               	movwf	fsr2l,c
  2364  001458  0E00               	movlw	high _Motors
  2365  00145A  203D               	addwfc	?___wmul+1,w,c
  2366  00145C  6EDA               	movwf	fsr2h,c
  2367  00145E  50DF               	movf	indf2,w,c
  2368  001460  EC0D  F007         	call	_ExponentialProfile
  2369  001464  6E45               	movwf	??_StopMotor& (0+255),c
  2370  001466  C067  F03C         	movff	StopMotor@index,___wmul@multiplier
  2371  00146A  C068  F03D         	movff	StopMotor@index+1,___wmul@multiplier+1
  2372  00146E  0E00               	movlw	0
  2373  001470  6E3F               	movwf	___wmul@multiplicand+1,c
  2374  001472  0E07               	movlw	7
  2375  001474  6E3E               	movwf	___wmul@multiplicand,c
  2376  001476  ECAF  F00C         	call	___wmul	;wreg free
  2377  00147A  0E04               	movlw	4
  2378  00147C  263C               	addwf	?___wmul,f,c
  2379  00147E  0E00               	movlw	0
  2380  001480  223D               	addwfc	?___wmul+1,f,c
  2381  001482  0E01               	movlw	low _Motors
  2382  001484  243C               	addwf	?___wmul,w,c
  2383  001486  6ED9               	movwf	fsr2l,c
  2384  001488  0E00               	movlw	high _Motors
  2385  00148A  203D               	addwfc	?___wmul+1,w,c
  2386  00148C  6EDA               	movwf	fsr2h,c
  2387  00148E  5045               	movf	??_StopMotor,w,c
  2388  001490  5EDF               	subwf	indf2,f,c
  2389                           
  2390                           ;pwm.c: 179: } else {
  2391  001492  0012               	return	
  2392  001494                     l1808:
  2393                           
  2394                           ;pwm.c: 180: Motors[index].duty = 0;
  2395  001494  C067  F03C         	movff	StopMotor@index,___wmul@multiplier
  2396  001498  C068  F03D         	movff	StopMotor@index+1,___wmul@multiplier+1
  2397  00149C  0E00               	movlw	0
  2398  00149E  6E3F               	movwf	___wmul@multiplicand+1,c
  2399  0014A0  0E07               	movlw	7
  2400  0014A2  6E3E               	movwf	___wmul@multiplicand,c
  2401  0014A4  ECAF  F00C         	call	___wmul	;wreg free
  2402  0014A8  0E04               	movlw	4
  2403  0014AA  263C               	addwf	?___wmul,f,c
  2404  0014AC  0E00               	movlw	0
  2405  0014AE  223D               	addwfc	?___wmul+1,f,c
  2406  0014B0  0E01               	movlw	low _Motors
  2407  0014B2  243C               	addwf	?___wmul,w,c
  2408  0014B4  6ED9               	movwf	fsr2l,c
  2409  0014B6  0E00               	movlw	high _Motors
  2410  0014B8  203D               	addwfc	?___wmul+1,w,c
  2411  0014BA  6EDA               	movwf	fsr2h,c
  2412  0014BC  0E00               	movlw	0
  2413  0014BE  6EDF               	movwf	indf2,c
  2414                           
  2415                           ;pwm.c: 185: }
  2416                           
  2417                           ;pwm.c: 184: break;
  2418                           
  2419                           ;pwm.c: 183: default:
  2420                           
  2421                           ;pwm.c: 181: }
  2422                           ;pwm.c: 182: break;
  2423  0014C0  0012               	return	
  2424  0014C2                     l1812:
  2425  0014C2  5024               	movf	_AccelType,w,c
  2426                           
  2427                           ; Switch size 1, requested type "space"
  2428                           ; Number of cases is 3, Range of values is 0 to 2
  2429                           ; switch strategies available:
  2430                           ; Name         Instructions Cycles
  2431                           ; simple_byte           10     6 (average)
  2432                           ;	Chosen strategy is simple_byte
  2433  0014C4  0A00               	xorlw	0	; case 0
  2434  0014C6  B4D8               	btfsc	status,2,c
  2435  0014C8  D740               	goto	l1796
  2436  0014CA  0A01               	xorlw	1	; case 1
  2437  0014CC  B4D8               	btfsc	status,2,c
  2438  0014CE  D754               	goto	l1798
  2439  0014D0  0A03               	xorlw	3	; case 2
  2440  0014D2  A4D8               	btfss	status,2,c
  2441  0014D4  0012               	return	
  2442  0014D6  D795               	goto	l1804
  2443  0014D8                     __end_of_StopMotor:
  2444                           	opt stack 0
  2445                           tblptru	equ	0xFF8
  2446                           tblptrh	equ	0xFF7
  2447                           tblptrl	equ	0xFF6
  2448                           tablat	equ	0xFF5
  2449                           intcon	equ	0xFF2
  2450                           intcon2	equ	0xFF1
  2451                           postinc0	equ	0xFEE
  2452                           wreg	equ	0xFE8
  2453                           indf1	equ	0xFE7
  2454                           postinc1	equ	0xFE6
  2455                           fsr1h	equ	0xFE2
  2456                           fsr1l	equ	0xFE1
  2457                           indf2	equ	0xFDF
  2458                           postinc2	equ	0xFDE
  2459                           fsr2h	equ	0xFDA
  2460                           fsr2l	equ	0xFD9
  2461                           status	equ	0xFD8
  2462                           
  2463 ;; *************** function _SetPin *****************
  2464 ;; Defined at:
  2465 ;;		line 10 in file "pwm.c"
  2466 ;; Parameters:    Size  Location     Type
  2467 ;;  pin             1    wreg     unsigned char 
  2468 ;;  value           1   28[COMRAM] unsigned char 
  2469 ;; Auto vars:     Size  Location     Type
  2470 ;;  pin             1   29[COMRAM] unsigned char 
  2471 ;; Return value:  Size  Location     Type
  2472 ;;                  1    wreg      void 
  2473 ;; Registers used:
  2474 ;;		wreg, status,2, status,0
  2475 ;; Tracked objects:
  2476 ;;		On entry : 0/0
  2477 ;;		On exit  : 0/0
  2478 ;;		Unchanged: 0/0
  2479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2480 ;;      Params:         1       0       0       0
  2481 ;;      Locals:         1       0       0       0
  2482 ;;      Temps:          0       0       0       0
  2483 ;;      Totals:         2       0       0       0
  2484 ;;Total ram usage:        2 bytes
  2485 ;; Hardware stack levels used:    1
  2486 ;; Hardware stack levels required when called:    2
  2487 ;; This function calls:
  2488 ;;		Nothing
  2489 ;; This function is called by:
  2490 ;;		_InitPWM
  2491 ;;		_StopMotor
  2492 ;;		_CheckPWMOutput
  2493 ;; This function uses a non-reentrant model
  2494 ;;
  2495                           
  2496                           	psect	text7
  2497  001846                     __ptext7:
  2498                           	opt stack 0
  2499  001846                     _SetPin:
  2500                           	opt stack 27
  2501                           
  2502                           ;incstack = 0
  2503                           ;SetPin@pin stored from wreg
  2504  001846  6E43               	movwf	SetPin@pin,c
  2505                           
  2506                           ;pwm.c: 11: switch (pin) {
  2507  001848  D048               	goto	l1714
  2508  00184A                     l167:
  2509                           
  2510                           ;pwm.c: 13: LATCbits.LC0 = value;
  2511  00184A  B042               	btfsc	SetPin@value,0,c
  2512  00184C  D002               	bra	u2175
  2513  00184E  908B               	bcf	3979,0,c	;volatile
  2514  001850  D001               	bra	u2176
  2515  001852                     u2175:
  2516  001852  808B               	bsf	3979,0,c	;volatile
  2517  001854                     u2176:
  2518                           
  2519                           ;pwm.c: 14: break;
  2520  001854  0012               	return	
  2521  001856                     l169:
  2522                           
  2523                           ;pwm.c: 16: LATCbits.LC1 = value;
  2524  001856  B042               	btfsc	SetPin@value,0,c
  2525  001858  D002               	bra	u2185
  2526  00185A  928B               	bcf	3979,1,c	;volatile
  2527  00185C  D001               	bra	u2186
  2528  00185E                     u2185:
  2529  00185E  828B               	bsf	3979,1,c	;volatile
  2530  001860                     u2186:
  2531                           
  2532                           ;pwm.c: 17: break;
  2533  001860  0012               	return	
  2534  001862                     l170:
  2535                           
  2536                           ;pwm.c: 19: LATCbits.LC2 = value;
  2537  001862  B042               	btfsc	SetPin@value,0,c
  2538  001864  D002               	bra	u2195
  2539  001866  948B               	bcf	3979,2,c	;volatile
  2540  001868  D001               	bra	u2196
  2541  00186A                     u2195:
  2542  00186A  848B               	bsf	3979,2,c	;volatile
  2543  00186C                     u2196:
  2544                           
  2545                           ;pwm.c: 20: break;
  2546  00186C  0012               	return	
  2547  00186E                     l171:
  2548                           
  2549                           ;pwm.c: 22: LATCbits.LC3 = value;
  2550  00186E  B042               	btfsc	SetPin@value,0,c
  2551  001870  D002               	bra	u2205
  2552  001872  968B               	bcf	3979,3,c	;volatile
  2553  001874  D001               	bra	u2206
  2554  001876                     u2205:
  2555  001876  868B               	bsf	3979,3,c	;volatile
  2556  001878                     u2206:
  2557                           
  2558                           ;pwm.c: 23: break;
  2559  001878  0012               	return	
  2560  00187A                     l172:
  2561                           
  2562                           ;pwm.c: 25: LATCbits.LC4 = value;
  2563  00187A  B042               	btfsc	SetPin@value,0,c
  2564  00187C  D002               	bra	u2215
  2565  00187E  988B               	bcf	3979,4,c	;volatile
  2566  001880  D001               	bra	u2216
  2567  001882                     u2215:
  2568  001882  888B               	bsf	3979,4,c	;volatile
  2569  001884                     u2216:
  2570                           
  2571                           ;pwm.c: 26: break;
  2572  001884  0012               	return	
  2573  001886                     l173:
  2574                           
  2575                           ;pwm.c: 28: LATCbits.LC5 = value;
  2576  001886  B042               	btfsc	SetPin@value,0,c
  2577  001888  D002               	bra	u2225
  2578  00188A  9A8B               	bcf	3979,5,c	;volatile
  2579  00188C  D001               	bra	u2226
  2580  00188E                     u2225:
  2581  00188E  8A8B               	bsf	3979,5,c	;volatile
  2582  001890                     u2226:
  2583                           
  2584                           ;pwm.c: 29: break;
  2585  001890  0012               	return	
  2586  001892                     l174:
  2587                           
  2588                           ;pwm.c: 31: LATCbits.LC6 = value;
  2589  001892  B042               	btfsc	SetPin@value,0,c
  2590  001894  D002               	bra	u2235
  2591  001896  9C8B               	bcf	3979,6,c	;volatile
  2592  001898  D001               	bra	u2236
  2593  00189A                     u2235:
  2594  00189A  8C8B               	bsf	3979,6,c	;volatile
  2595  00189C                     u2236:
  2596                           
  2597                           ;pwm.c: 32: break;
  2598  00189C  0012               	return	
  2599  00189E                     l175:
  2600                           
  2601                           ;pwm.c: 34: LATCbits.LC7 = value;
  2602  00189E  B042               	btfsc	SetPin@value,0,c
  2603  0018A0  D002               	bra	u2245
  2604  0018A2  9E8B               	bcf	3979,7,c	;volatile
  2605  0018A4  D001               	bra	u2246
  2606  0018A6                     u2245:
  2607  0018A6  8E8B               	bsf	3979,7,c	;volatile
  2608  0018A8                     u2246:
  2609                           
  2610                           ;pwm.c: 35: break;
  2611  0018A8  0012               	return	
  2612  0018AA                     l176:
  2613                           
  2614                           ;pwm.c: 37: LATBbits.LB5 = value;
  2615  0018AA  B042               	btfsc	SetPin@value,0,c
  2616  0018AC  D002               	bra	u2255
  2617  0018AE  9A8A               	bcf	3978,5,c	;volatile
  2618  0018B0  D001               	bra	u2256
  2619  0018B2                     u2255:
  2620  0018B2  8A8A               	bsf	3978,5,c	;volatile
  2621  0018B4                     u2256:
  2622                           
  2623                           ;pwm.c: 38: break;
  2624  0018B4  0012               	return	
  2625  0018B6                     l177:
  2626                           
  2627                           ;pwm.c: 40: LATBbits.LB7 = value;
  2628  0018B6  B042               	btfsc	SetPin@value,0,c
  2629  0018B8  D002               	bra	u2265
  2630  0018BA  9E8A               	bcf	3978,7,c	;volatile
  2631  0018BC  D001               	bra	u2266
  2632  0018BE                     u2265:
  2633  0018BE  8E8A               	bsf	3978,7,c	;volatile
  2634  0018C0                     u2266:
  2635                           
  2636                           ;pwm.c: 41: break;
  2637  0018C0  0012               	return	
  2638  0018C2                     l178:
  2639                           
  2640                           ;pwm.c: 43: LATAbits.LA4 = value;
  2641  0018C2  B042               	btfsc	SetPin@value,0,c
  2642  0018C4  D002               	bra	u2275
  2643  0018C6  9889               	bcf	3977,4,c	;volatile
  2644  0018C8  D001               	bra	u2276
  2645  0018CA                     u2275:
  2646  0018CA  8889               	bsf	3977,4,c	;volatile
  2647  0018CC                     u2276:
  2648                           
  2649                           ;pwm.c: 44: break;
  2650  0018CC  0012               	return	
  2651  0018CE                     l179:
  2652                           
  2653                           ;pwm.c: 46: LATAbits.LA5 = value;
  2654  0018CE  B042               	btfsc	SetPin@value,0,c
  2655  0018D0  D002               	bra	u2285
  2656  0018D2  9A89               	bcf	3977,5,c	;volatile
  2657  0018D4  D001               	bra	u2286
  2658  0018D6                     u2285:
  2659  0018D6  8A89               	bsf	3977,5,c	;volatile
  2660  0018D8                     u2286:
  2661                           
  2662                           ;pwm.c: 48: }
  2663                           
  2664                           ;pwm.c: 47: break;
  2665  0018D8  0012               	return	
  2666  0018DA                     l1714:
  2667  0018DA  5043               	movf	SetPin@pin,w,c
  2668                           
  2669                           ; Switch size 1, requested type "space"
  2670                           ; Number of cases is 12, Range of values is 0 to 11
  2671                           ; switch strategies available:
  2672                           ; Name         Instructions Cycles
  2673                           ; simple_byte           37    19 (average)
  2674                           ;	Chosen strategy is simple_byte
  2675  0018DC  0A00               	xorlw	0	; case 0
  2676  0018DE  B4D8               	btfsc	status,2,c
  2677  0018E0  D7B4               	goto	l167
  2678  0018E2  0A01               	xorlw	1	; case 1
  2679  0018E4  B4D8               	btfsc	status,2,c
  2680  0018E6  D7B7               	goto	l169
  2681  0018E8  0A03               	xorlw	3	; case 2
  2682  0018EA  B4D8               	btfsc	status,2,c
  2683  0018EC  D7BA               	goto	l170
  2684  0018EE  0A01               	xorlw	1	; case 3
  2685  0018F0  B4D8               	btfsc	status,2,c
  2686  0018F2  D7BD               	goto	l171
  2687  0018F4  0A07               	xorlw	7	; case 4
  2688  0018F6  B4D8               	btfsc	status,2,c
  2689  0018F8  D7C0               	goto	l172
  2690  0018FA  0A01               	xorlw	1	; case 5
  2691  0018FC  B4D8               	btfsc	status,2,c
  2692  0018FE  D7C3               	goto	l173
  2693  001900  0A03               	xorlw	3	; case 6
  2694  001902  B4D8               	btfsc	status,2,c
  2695  001904  D7C6               	goto	l174
  2696  001906  0A01               	xorlw	1	; case 7
  2697  001908  B4D8               	btfsc	status,2,c
  2698  00190A  D7C9               	goto	l175
  2699  00190C  0A0F               	xorlw	15	; case 8
  2700  00190E  B4D8               	btfsc	status,2,c
  2701  001910  D7CC               	goto	l176
  2702  001912  0A01               	xorlw	1	; case 9
  2703  001914  B4D8               	btfsc	status,2,c
  2704  001916  D7CF               	goto	l177
  2705  001918  0A03               	xorlw	3	; case 10
  2706  00191A  B4D8               	btfsc	status,2,c
  2707  00191C  D7D2               	goto	l178
  2708  00191E  0A01               	xorlw	1	; case 11
  2709  001920  A4D8               	btfss	status,2,c
  2710  001922  0012               	return	
  2711  001924  D7D4               	goto	l179
  2712  001926                     __end_of_SetPin:
  2713                           	opt stack 0
  2714                           tblptru	equ	0xFF8
  2715                           tblptrh	equ	0xFF7
  2716                           tblptrl	equ	0xFF6
  2717                           tablat	equ	0xFF5
  2718                           intcon	equ	0xFF2
  2719                           intcon2	equ	0xFF1
  2720                           postinc0	equ	0xFEE
  2721                           wreg	equ	0xFE8
  2722                           indf1	equ	0xFE7
  2723                           postinc1	equ	0xFE6
  2724                           fsr1h	equ	0xFE2
  2725                           fsr1l	equ	0xFE1
  2726                           indf2	equ	0xFDF
  2727                           postinc2	equ	0xFDE
  2728                           fsr2h	equ	0xFDA
  2729                           fsr2l	equ	0xFD9
  2730                           status	equ	0xFD8
  2731                           
  2732 ;; *************** function _AccelerateMotor *****************
  2733 ;; Defined at:
  2734 ;;		line 189 in file "pwm.c"
  2735 ;; Parameters:    Size  Location     Type
  2736 ;;  index           2    7[BANK0 ] int 
  2737 ;; Auto vars:     Size  Location     Type
  2738 ;;		None
  2739 ;; Return value:  Size  Location     Type
  2740 ;;                  1    wreg      void 
  2741 ;; Registers used:
  2742 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2743 ;; Tracked objects:
  2744 ;;		On entry : 0/0
  2745 ;;		On exit  : 0/0
  2746 ;;		Unchanged: 0/0
  2747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2748 ;;      Params:         0       2       0       0
  2749 ;;      Locals:         0       0       0       0
  2750 ;;      Temps:          0       2       0       0
  2751 ;;      Totals:         0       4       0       0
  2752 ;;Total ram usage:        4 bytes
  2753 ;; Hardware stack levels used:    1
  2754 ;; Hardware stack levels required when called:    3
  2755 ;; This function calls:
  2756 ;;		_ExponentialProfile
  2757 ;;		___wmul
  2758 ;; This function is called by:
  2759 ;;		_AcceleratePWM
  2760 ;; This function uses a non-reentrant model
  2761 ;;
  2762                           
  2763                           	psect	text8
  2764  0009BE                     __ptext8:
  2765                           	opt stack 0
  2766  0009BE                     _AccelerateMotor:
  2767                           	opt stack 25
  2768                           
  2769                           ;pwm.c: 190: if (Motors[index].duty < MinimumDuty && Motors[index].target >= MinimumDuty
      +                          ) {
  2770                           
  2771                           ;incstack = 0
  2772  0009BE  C067  F03C         	movff	AccelerateMotor@index,___wmul@multiplier
  2773  0009C2  C068  F03D         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  2774  0009C6  0E00               	movlw	0
  2775  0009C8  6E3F               	movwf	___wmul@multiplicand+1,c
  2776  0009CA  0E07               	movlw	7
  2777  0009CC  6E3E               	movwf	___wmul@multiplicand,c
  2778  0009CE  ECAF  F00C         	call	___wmul	;wreg free
  2779  0009D2  0E04               	movlw	4
  2780  0009D4  263C               	addwf	?___wmul,f,c
  2781  0009D6  0E00               	movlw	0
  2782  0009D8  223D               	addwfc	?___wmul+1,f,c
  2783  0009DA  0E01               	movlw	low _Motors
  2784  0009DC  243C               	addwf	?___wmul,w,c
  2785  0009DE  6ED9               	movwf	fsr2l,c
  2786  0009E0  0E00               	movlw	high _Motors
  2787  0009E2  203D               	addwfc	?___wmul+1,w,c
  2788  0009E4  6EDA               	movwf	fsr2h,c
  2789  0009E6  5023               	movf	_MinimumDuty,w,c
  2790  0009E8  5CDE               	subwf	postinc2,w,c
  2791  0009EA  B0D8               	btfsc	status,0,c
  2792  0009EC  D02F               	goto	l1820
  2793  0009EE  C067  F03C         	movff	AccelerateMotor@index,___wmul@multiplier
  2794  0009F2  C068  F03D         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  2795  0009F6  0E00               	movlw	0
  2796  0009F8  6E3F               	movwf	___wmul@multiplicand+1,c
  2797  0009FA  0E07               	movlw	7
  2798  0009FC  6E3E               	movwf	___wmul@multiplicand,c
  2799  0009FE  ECAF  F00C         	call	___wmul	;wreg free
  2800  000A02  0E05               	movlw	5
  2801  000A04  263C               	addwf	?___wmul,f,c
  2802  000A06  0E00               	movlw	0
  2803  000A08  223D               	addwfc	?___wmul+1,f,c
  2804  000A0A  0E01               	movlw	low _Motors
  2805  000A0C  243C               	addwf	?___wmul,w,c
  2806  000A0E  6ED9               	movwf	fsr2l,c
  2807  000A10  0E00               	movlw	high _Motors
  2808  000A12  203D               	addwfc	?___wmul+1,w,c
  2809  000A14  6EDA               	movwf	fsr2h,c
  2810  000A16  5023               	movf	_MinimumDuty,w,c
  2811  000A18  5CDE               	subwf	postinc2,w,c
  2812  000A1A  A0D8               	btfss	status,0,c
  2813  000A1C  D017               	goto	l1820
  2814                           
  2815                           ;pwm.c: 191: Motors[index].duty = MinimumDuty;
  2816  000A1E  C067  F03C         	movff	AccelerateMotor@index,___wmul@multiplier
  2817  000A22  C068  F03D         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  2818  000A26  0E00               	movlw	0
  2819  000A28  6E3F               	movwf	___wmul@multiplicand+1,c
  2820  000A2A  0E07               	movlw	7
  2821  000A2C  6E3E               	movwf	___wmul@multiplicand,c
  2822  000A2E  ECAF  F00C         	call	___wmul	;wreg free
  2823  000A32  0E04               	movlw	4
  2824  000A34  263C               	addwf	?___wmul,f,c
  2825  000A36  0E00               	movlw	0
  2826  000A38  223D               	addwfc	?___wmul+1,f,c
  2827  000A3A  0E01               	movlw	low _Motors
  2828  000A3C  243C               	addwf	?___wmul,w,c
  2829  000A3E  6ED9               	movwf	fsr2l,c
  2830  000A40  0E00               	movlw	high _Motors
  2831  000A42  203D               	addwfc	?___wmul+1,w,c
  2832  000A44  6EDA               	movwf	fsr2h,c
  2833  000A46  C023  FFDF         	movff	_MinimumDuty,indf2
  2834                           
  2835                           ;pwm.c: 192: } else if (Motors[index].duty <= MinimumDuty && Motors[index].target < Mini
      +                          mumDuty) {
  2836  000A4A  D1DC               	goto	l1846
  2837  000A4C                     l1820:
  2838  000A4C  C067  F03C         	movff	AccelerateMotor@index,___wmul@multiplier
  2839  000A50  C068  F03D         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  2840  000A54  0E00               	movlw	0
  2841  000A56  6E3F               	movwf	___wmul@multiplicand+1,c
  2842  000A58  0E07               	movlw	7
  2843  000A5A  6E3E               	movwf	___wmul@multiplicand,c
  2844  000A5C  ECAF  F00C         	call	___wmul	;wreg free
  2845  000A60  0E04               	movlw	4
  2846  000A62  263C               	addwf	?___wmul,f,c
  2847  000A64  0E00               	movlw	0
  2848  000A66  223D               	addwfc	?___wmul+1,f,c
  2849  000A68  0E01               	movlw	low _Motors
  2850  000A6A  243C               	addwf	?___wmul,w,c
  2851  000A6C  6ED9               	movwf	fsr2l,c
  2852  000A6E  0E00               	movlw	high _Motors
  2853  000A70  203D               	addwfc	?___wmul+1,w,c
  2854  000A72  6EDA               	movwf	fsr2h,c
  2855  000A74  50DE               	movf	postinc2,w,c
  2856  000A76  5C23               	subwf	_MinimumDuty,w,c
  2857  000A78  A0D8               	btfss	status,0,c
  2858  000A7A  D1C4               	goto	l1846
  2859  000A7C  C067  F03C         	movff	AccelerateMotor@index,___wmul@multiplier
  2860  000A80  C068  F03D         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  2861  000A84  0E00               	movlw	0
  2862  000A86  6E3F               	movwf	___wmul@multiplicand+1,c
  2863  000A88  0E07               	movlw	7
  2864  000A8A  6E3E               	movwf	___wmul@multiplicand,c
  2865  000A8C  ECAF  F00C         	call	___wmul	;wreg free
  2866  000A90  0E05               	movlw	5
  2867  000A92  263C               	addwf	?___wmul,f,c
  2868  000A94  0E00               	movlw	0
  2869  000A96  223D               	addwfc	?___wmul+1,f,c
  2870  000A98  0E01               	movlw	low _Motors
  2871  000A9A  243C               	addwf	?___wmul,w,c
  2872  000A9C  6ED9               	movwf	fsr2l,c
  2873  000A9E  0E00               	movlw	high _Motors
  2874  000AA0  203D               	addwfc	?___wmul+1,w,c
  2875  000AA2  6EDA               	movwf	fsr2h,c
  2876  000AA4  5023               	movf	_MinimumDuty,w,c
  2877  000AA6  5CDE               	subwf	postinc2,w,c
  2878  000AA8  B0D8               	btfsc	status,0,c
  2879  000AAA  D1AC               	goto	l1846
  2880                           
  2881                           ;pwm.c: 193: Motors[index].duty = 0;
  2882  000AAC  C067  F03C         	movff	AccelerateMotor@index,___wmul@multiplier
  2883  000AB0  C068  F03D         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  2884  000AB4  0E00               	movlw	0
  2885  000AB6  6E3F               	movwf	___wmul@multiplicand+1,c
  2886  000AB8  0E07               	movlw	7
  2887  000ABA  6E3E               	movwf	___wmul@multiplicand,c
  2888  000ABC  ECAF  F00C         	call	___wmul	;wreg free
  2889  000AC0  0E04               	movlw	4
  2890  000AC2  263C               	addwf	?___wmul,f,c
  2891  000AC4  0E00               	movlw	0
  2892  000AC6  223D               	addwfc	?___wmul+1,f,c
  2893  000AC8  0E01               	movlw	low _Motors
  2894  000ACA  243C               	addwf	?___wmul,w,c
  2895  000ACC  6ED9               	movwf	fsr2l,c
  2896  000ACE  0E00               	movlw	high _Motors
  2897  000AD0  203D               	addwfc	?___wmul+1,w,c
  2898  000AD2  6EDA               	movwf	fsr2h,c
  2899  000AD4  0E00               	movlw	0
  2900  000AD6  6EDF               	movwf	indf2,c
  2901                           
  2902                           ;pwm.c: 194: }
  2903                           ;pwm.c: 195: switch (AccelType) {
  2904  000AD8  D195               	goto	l1846
  2905  000ADA                     l1826:
  2906                           
  2907                           ;pwm.c: 197: Motors[index].duty = Motors[index].target;
  2908  000ADA  C067  F03C         	movff	AccelerateMotor@index,___wmul@multiplier
  2909  000ADE  C068  F03D         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  2910  000AE2  0E00               	movlw	0
  2911  000AE4  6E3F               	movwf	___wmul@multiplicand+1,c
  2912  000AE6  0E07               	movlw	7
  2913  000AE8  6E3E               	movwf	___wmul@multiplicand,c
  2914  000AEA  ECAF  F00C         	call	___wmul	;wreg free
  2915  000AEE  0E05               	movlw	5
  2916  000AF0  263C               	addwf	?___wmul,f,c
  2917  000AF2  0E00               	movlw	0
  2918  000AF4  223D               	addwfc	?___wmul+1,f,c
  2919  000AF6  0E01               	movlw	low _Motors
  2920  000AF8  243C               	addwf	?___wmul,w,c
  2921  000AFA  6ED9               	movwf	fsr2l,c
  2922  000AFC  0E00               	movlw	high _Motors
  2923  000AFE  203D               	addwfc	?___wmul+1,w,c
  2924  000B00  6EDA               	movwf	fsr2h,c
  2925  000B02  C067  F03C         	movff	AccelerateMotor@index,___wmul@multiplier
  2926  000B06  C068  F03D         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  2927  000B0A  0E00               	movlw	0
  2928  000B0C  6E3F               	movwf	___wmul@multiplicand+1,c
  2929  000B0E  0E07               	movlw	7
  2930  000B10  6E3E               	movwf	___wmul@multiplicand,c
  2931  000B12  ECAF  F00C         	call	___wmul	;wreg free
  2932  000B16  0E04               	movlw	4
  2933  000B18  263C               	addwf	?___wmul,f,c
  2934  000B1A  0E00               	movlw	0
  2935  000B1C  223D               	addwfc	?___wmul+1,f,c
  2936  000B1E  0E01               	movlw	low _Motors
  2937  000B20  243C               	addwf	?___wmul,w,c
  2938  000B22  6EE1               	movwf	fsr1l,c
  2939  000B24  0E00               	movlw	high _Motors
  2940  000B26  203D               	addwfc	?___wmul+1,w,c
  2941  000B28  6EE2               	movwf	fsr1h,c
  2942  000B2A  CFDF FFE7          	movff	indf2,indf1
  2943                           
  2944                           ;pwm.c: 198: break;
  2945  000B2E  0012               	return	
  2946  000B30                     l1828:
  2947                           
  2948                           ;pwm.c: 200: if (Motors[index].duty > Motors[index].target) {
  2949  000B30  C067  F03C         	movff	AccelerateMotor@index,___wmul@multiplier
  2950  000B34  C068  F03D         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  2951  000B38  0E00               	movlw	0
  2952  000B3A  6E3F               	movwf	___wmul@multiplicand+1,c
  2953  000B3C  0E07               	movlw	7
  2954  000B3E  6E3E               	movwf	___wmul@multiplicand,c
  2955  000B40  ECAF  F00C         	call	___wmul	;wreg free
  2956  000B44  0E04               	movlw	4
  2957  000B46  263C               	addwf	?___wmul,f,c
  2958  000B48  0E00               	movlw	0
  2959  000B4A  223D               	addwfc	?___wmul+1,f,c
  2960  000B4C  0E01               	movlw	low _Motors
  2961  000B4E  243C               	addwf	?___wmul,w,c
  2962  000B50  6ED9               	movwf	fsr2l,c
  2963  000B52  0E00               	movlw	high _Motors
  2964  000B54  203D               	addwfc	?___wmul+1,w,c
  2965  000B56  6EDA               	movwf	fsr2h,c
  2966  000B58  C067  F03C         	movff	AccelerateMotor@index,___wmul@multiplier
  2967  000B5C  C068  F03D         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  2968  000B60  0E00               	movlw	0
  2969  000B62  6E3F               	movwf	___wmul@multiplicand+1,c
  2970  000B64  0E07               	movlw	7
  2971  000B66  6E3E               	movwf	___wmul@multiplicand,c
  2972  000B68  ECAF  F00C         	call	___wmul	;wreg free
  2973  000B6C  0E05               	movlw	5
  2974  000B6E  263C               	addwf	?___wmul,f,c
  2975  000B70  0E00               	movlw	0
  2976  000B72  223D               	addwfc	?___wmul+1,f,c
  2977  000B74  0E01               	movlw	low _Motors
  2978  000B76  243C               	addwf	?___wmul,w,c
  2979  000B78  6EE1               	movwf	fsr1l,c
  2980  000B7A  0E00               	movlw	high _Motors
  2981  000B7C  203D               	addwfc	?___wmul+1,w,c
  2982  000B7E  6EE2               	movwf	fsr1h,c
  2983  000B80  50DE               	movf	postinc2,w,c
  2984  000B82  5CE6               	subwf	postinc1,w,c
  2985  000B84  B0D8               	btfsc	status,0,c
  2986  000B86  D016               	goto	l1832
  2987                           
  2988                           ;pwm.c: 201: Motors[index].duty -= 1;
  2989  000B88  C067  F03C         	movff	AccelerateMotor@index,___wmul@multiplier
  2990  000B8C  C068  F03D         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  2991  000B90  0E00               	movlw	0
  2992  000B92  6E3F               	movwf	___wmul@multiplicand+1,c
  2993  000B94  0E07               	movlw	7
  2994  000B96  6E3E               	movwf	___wmul@multiplicand,c
  2995  000B98  ECAF  F00C         	call	___wmul	;wreg free
  2996  000B9C  0E04               	movlw	4
  2997  000B9E  263C               	addwf	?___wmul,f,c
  2998  000BA0  0E00               	movlw	0
  2999  000BA2  223D               	addwfc	?___wmul+1,f,c
  3000  000BA4  0E01               	movlw	low _Motors
  3001  000BA6  243C               	addwf	?___wmul,w,c
  3002  000BA8  6ED9               	movwf	fsr2l,c
  3003  000BAA  0E00               	movlw	high _Motors
  3004  000BAC  203D               	addwfc	?___wmul+1,w,c
  3005  000BAE  6EDA               	movwf	fsr2h,c
  3006  000BB0  06DF               	decf	indf2,f,c
  3007                           
  3008                           ;pwm.c: 202: } else if (Motors[index].duty < Motors[index].target) {
  3009  000BB2  0012               	return	
  3010  000BB4                     l1832:
  3011  000BB4  C067  F03C         	movff	AccelerateMotor@index,___wmul@multiplier
  3012  000BB8  C068  F03D         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3013  000BBC  0E00               	movlw	0
  3014  000BBE  6E3F               	movwf	___wmul@multiplicand+1,c
  3015  000BC0  0E07               	movlw	7
  3016  000BC2  6E3E               	movwf	___wmul@multiplicand,c
  3017  000BC4  ECAF  F00C         	call	___wmul	;wreg free
  3018  000BC8  0E05               	movlw	5
  3019  000BCA  263C               	addwf	?___wmul,f,c
  3020  000BCC  0E00               	movlw	0
  3021  000BCE  223D               	addwfc	?___wmul+1,f,c
  3022  000BD0  0E01               	movlw	low _Motors
  3023  000BD2  243C               	addwf	?___wmul,w,c
  3024  000BD4  6ED9               	movwf	fsr2l,c
  3025  000BD6  0E00               	movlw	high _Motors
  3026  000BD8  203D               	addwfc	?___wmul+1,w,c
  3027  000BDA  6EDA               	movwf	fsr2h,c
  3028  000BDC  C067  F03C         	movff	AccelerateMotor@index,___wmul@multiplier
  3029  000BE0  C068  F03D         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3030  000BE4  0E00               	movlw	0
  3031  000BE6  6E3F               	movwf	___wmul@multiplicand+1,c
  3032  000BE8  0E07               	movlw	7
  3033  000BEA  6E3E               	movwf	___wmul@multiplicand,c
  3034  000BEC  ECAF  F00C         	call	___wmul	;wreg free
  3035  000BF0  0E04               	movlw	4
  3036  000BF2  263C               	addwf	?___wmul,f,c
  3037  000BF4  0E00               	movlw	0
  3038  000BF6  223D               	addwfc	?___wmul+1,f,c
  3039  000BF8  0E01               	movlw	low _Motors
  3040  000BFA  243C               	addwf	?___wmul,w,c
  3041  000BFC  6EE1               	movwf	fsr1l,c
  3042  000BFE  0E00               	movlw	high _Motors
  3043  000C00  203D               	addwfc	?___wmul+1,w,c
  3044  000C02  6EE2               	movwf	fsr1h,c
  3045  000C04  50DE               	movf	postinc2,w,c
  3046  000C06  5CE6               	subwf	postinc1,w,c
  3047  000C08  B0D8               	btfsc	status,0,c
  3048  000C0A  0012               	return	
  3049                           
  3050                           ;pwm.c: 203: Motors[index].duty += 1;
  3051  000C0C  C067  F03C         	movff	AccelerateMotor@index,___wmul@multiplier
  3052  000C10  C068  F03D         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3053  000C14  0E00               	movlw	0
  3054  000C16  6E3F               	movwf	___wmul@multiplicand+1,c
  3055  000C18  0E07               	movlw	7
  3056  000C1A  6E3E               	movwf	___wmul@multiplicand,c
  3057  000C1C  ECAF  F00C         	call	___wmul	;wreg free
  3058  000C20  0E04               	movlw	4
  3059  000C22  263C               	addwf	?___wmul,f,c
  3060  000C24  0E00               	movlw	0
  3061  000C26  223D               	addwfc	?___wmul+1,f,c
  3062  000C28  0E01               	movlw	low _Motors
  3063  000C2A  243C               	addwf	?___wmul,w,c
  3064  000C2C  6ED9               	movwf	fsr2l,c
  3065  000C2E  0E00               	movlw	high _Motors
  3066  000C30  203D               	addwfc	?___wmul+1,w,c
  3067  000C32  6EDA               	movwf	fsr2h,c
  3068  000C34  2ADF               	incf	indf2,f,c
  3069                           
  3070                           ;pwm.c: 204: }
  3071                           ;pwm.c: 205: break;
  3072  000C36  0012               	return	
  3073  000C38                     l1836:
  3074                           
  3075                           ;pwm.c: 207: if (Motors[index].duty > Motors[index].target) {
  3076  000C38  C067  F03C         	movff	AccelerateMotor@index,___wmul@multiplier
  3077  000C3C  C068  F03D         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3078  000C40  0E00               	movlw	0
  3079  000C42  6E3F               	movwf	___wmul@multiplicand+1,c
  3080  000C44  0E07               	movlw	7
  3081  000C46  6E3E               	movwf	___wmul@multiplicand,c
  3082  000C48  ECAF  F00C         	call	___wmul	;wreg free
  3083  000C4C  0E04               	movlw	4
  3084  000C4E  263C               	addwf	?___wmul,f,c
  3085  000C50  0E00               	movlw	0
  3086  000C52  223D               	addwfc	?___wmul+1,f,c
  3087  000C54  0E01               	movlw	low _Motors
  3088  000C56  243C               	addwf	?___wmul,w,c
  3089  000C58  6ED9               	movwf	fsr2l,c
  3090  000C5A  0E00               	movlw	high _Motors
  3091  000C5C  203D               	addwfc	?___wmul+1,w,c
  3092  000C5E  6EDA               	movwf	fsr2h,c
  3093  000C60  C067  F03C         	movff	AccelerateMotor@index,___wmul@multiplier
  3094  000C64  C068  F03D         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3095  000C68  0E00               	movlw	0
  3096  000C6A  6E3F               	movwf	___wmul@multiplicand+1,c
  3097  000C6C  0E07               	movlw	7
  3098  000C6E  6E3E               	movwf	___wmul@multiplicand,c
  3099  000C70  ECAF  F00C         	call	___wmul	;wreg free
  3100  000C74  0E05               	movlw	5
  3101  000C76  263C               	addwf	?___wmul,f,c
  3102  000C78  0E00               	movlw	0
  3103  000C7A  223D               	addwfc	?___wmul+1,f,c
  3104  000C7C  0E01               	movlw	low _Motors
  3105  000C7E  243C               	addwf	?___wmul,w,c
  3106  000C80  6EE1               	movwf	fsr1l,c
  3107  000C82  0E00               	movlw	high _Motors
  3108  000C84  203D               	addwfc	?___wmul+1,w,c
  3109  000C86  6EE2               	movwf	fsr1h,c
  3110  000C88  50DE               	movf	postinc2,w,c
  3111  000C8A  5CE6               	subwf	postinc1,w,c
  3112  000C8C  B0D8               	btfsc	status,0,c
  3113  000C8E  D047               	goto	l1840
  3114                           
  3115                           ;pwm.c: 208: Motors[index].duty -= ExponentialProfile(Motors[index].duty, Motors[index].
      +                          target);
  3116  000C90  C067  F03C         	movff	AccelerateMotor@index,___wmul@multiplier
  3117  000C94  C068  F03D         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3118  000C98  0E00               	movlw	0
  3119  000C9A  6E3F               	movwf	___wmul@multiplicand+1,c
  3120  000C9C  0E07               	movlw	7
  3121  000C9E  6E3E               	movwf	___wmul@multiplicand,c
  3122  000CA0  ECAF  F00C         	call	___wmul	;wreg free
  3123  000CA4  0E05               	movlw	5
  3124  000CA6  263C               	addwf	?___wmul,f,c
  3125  000CA8  0E00               	movlw	0
  3126  000CAA  223D               	addwfc	?___wmul+1,f,c
  3127  000CAC  0E01               	movlw	low _Motors
  3128  000CAE  243C               	addwf	?___wmul,w,c
  3129  000CB0  6ED9               	movwf	fsr2l,c
  3130  000CB2  0E00               	movlw	high _Motors
  3131  000CB4  203D               	addwfc	?___wmul+1,w,c
  3132  000CB6  6EDA               	movwf	fsr2h,c
  3133  000CB8  50DF               	movf	indf2,w,c
  3134  000CBA  6E42               	movwf	ExponentialProfile@target,c
  3135  000CBC  C067  F03C         	movff	AccelerateMotor@index,___wmul@multiplier
  3136  000CC0  C068  F03D         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3137  000CC4  0E00               	movlw	0
  3138  000CC6  6E3F               	movwf	___wmul@multiplicand+1,c
  3139  000CC8  0E07               	movlw	7
  3140  000CCA  6E3E               	movwf	___wmul@multiplicand,c
  3141  000CCC  ECAF  F00C         	call	___wmul	;wreg free
  3142  000CD0  0E04               	movlw	4
  3143  000CD2  263C               	addwf	?___wmul,f,c
  3144  000CD4  0E00               	movlw	0
  3145  000CD6  223D               	addwfc	?___wmul+1,f,c
  3146  000CD8  0E01               	movlw	low _Motors
  3147  000CDA  243C               	addwf	?___wmul,w,c
  3148  000CDC  6ED9               	movwf	fsr2l,c
  3149  000CDE  0E00               	movlw	high _Motors
  3150  000CE0  203D               	addwfc	?___wmul+1,w,c
  3151  000CE2  6EDA               	movwf	fsr2h,c
  3152  000CE4  50DF               	movf	indf2,w,c
  3153  000CE6  EC0D  F007         	call	_ExponentialProfile
  3154  000CEA  0100               	movlb	0	; () banked
  3155  000CEC  6F69               	movwf	??_AccelerateMotor& (0+255),b
  3156  000CEE  C067  F03C         	movff	AccelerateMotor@index,___wmul@multiplier
  3157  000CF2  C068  F03D         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3158  000CF6  0E00               	movlw	0
  3159  000CF8  6E3F               	movwf	___wmul@multiplicand+1,c
  3160  000CFA  0E07               	movlw	7
  3161  000CFC  6E3E               	movwf	___wmul@multiplicand,c
  3162  000CFE  ECAF  F00C         	call	___wmul	;wreg free
  3163  000D02  0E04               	movlw	4
  3164  000D04  263C               	addwf	?___wmul,f,c
  3165  000D06  0E00               	movlw	0
  3166  000D08  223D               	addwfc	?___wmul+1,f,c
  3167  000D0A  0E01               	movlw	low _Motors
  3168  000D0C  243C               	addwf	?___wmul,w,c
  3169  000D0E  6ED9               	movwf	fsr2l,c
  3170  000D10  0E00               	movlw	high _Motors
  3171  000D12  203D               	addwfc	?___wmul+1,w,c
  3172  000D14  6EDA               	movwf	fsr2h,c
  3173  000D16  0100               	movlb	0	; () banked
  3174  000D18  5169               	movf	??_AccelerateMotor& (0+255),w,b
  3175  000D1A  5EDF               	subwf	indf2,f,c
  3176                           
  3177                           ;pwm.c: 209: } else if (Motors[index].duty < Motors[index].target) {
  3178  000D1C  0012               	return	
  3179  000D1E                     l1840:
  3180  000D1E  C067  F03C         	movff	AccelerateMotor@index,___wmul@multiplier
  3181  000D22  C068  F03D         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3182  000D26  0E00               	movlw	0
  3183  000D28  6E3F               	movwf	___wmul@multiplicand+1,c
  3184  000D2A  0E07               	movlw	7
  3185  000D2C  6E3E               	movwf	___wmul@multiplicand,c
  3186  000D2E  ECAF  F00C         	call	___wmul	;wreg free
  3187  000D32  0E05               	movlw	5
  3188  000D34  263C               	addwf	?___wmul,f,c
  3189  000D36  0E00               	movlw	0
  3190  000D38  223D               	addwfc	?___wmul+1,f,c
  3191  000D3A  0E01               	movlw	low _Motors
  3192  000D3C  243C               	addwf	?___wmul,w,c
  3193  000D3E  6ED9               	movwf	fsr2l,c
  3194  000D40  0E00               	movlw	high _Motors
  3195  000D42  203D               	addwfc	?___wmul+1,w,c
  3196  000D44  6EDA               	movwf	fsr2h,c
  3197  000D46  C067  F03C         	movff	AccelerateMotor@index,___wmul@multiplier
  3198  000D4A  C068  F03D         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3199  000D4E  0E00               	movlw	0
  3200  000D50  6E3F               	movwf	___wmul@multiplicand+1,c
  3201  000D52  0E07               	movlw	7
  3202  000D54  6E3E               	movwf	___wmul@multiplicand,c
  3203  000D56  ECAF  F00C         	call	___wmul	;wreg free
  3204  000D5A  0E04               	movlw	4
  3205  000D5C  263C               	addwf	?___wmul,f,c
  3206  000D5E  0E00               	movlw	0
  3207  000D60  223D               	addwfc	?___wmul+1,f,c
  3208  000D62  0E01               	movlw	low _Motors
  3209  000D64  243C               	addwf	?___wmul,w,c
  3210  000D66  6EE1               	movwf	fsr1l,c
  3211  000D68  0E00               	movlw	high _Motors
  3212  000D6A  203D               	addwfc	?___wmul+1,w,c
  3213  000D6C  6EE2               	movwf	fsr1h,c
  3214  000D6E  50DE               	movf	postinc2,w,c
  3215  000D70  5CE6               	subwf	postinc1,w,c
  3216  000D72  B0D8               	btfsc	status,0,c
  3217  000D74  0012               	return	
  3218                           
  3219                           ;pwm.c: 210: Motors[index].duty += ExponentialProfile(Motors[index].duty, Motors[index].
      +                          target);
  3220  000D76  C067  F03C         	movff	AccelerateMotor@index,___wmul@multiplier
  3221  000D7A  C068  F03D         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3222  000D7E  0E00               	movlw	0
  3223  000D80  6E3F               	movwf	___wmul@multiplicand+1,c
  3224  000D82  0E07               	movlw	7
  3225  000D84  6E3E               	movwf	___wmul@multiplicand,c
  3226  000D86  ECAF  F00C         	call	___wmul	;wreg free
  3227  000D8A  0E05               	movlw	5
  3228  000D8C  263C               	addwf	?___wmul,f,c
  3229  000D8E  0E00               	movlw	0
  3230  000D90  223D               	addwfc	?___wmul+1,f,c
  3231  000D92  0E01               	movlw	low _Motors
  3232  000D94  243C               	addwf	?___wmul,w,c
  3233  000D96  6ED9               	movwf	fsr2l,c
  3234  000D98  0E00               	movlw	high _Motors
  3235  000D9A  203D               	addwfc	?___wmul+1,w,c
  3236  000D9C  6EDA               	movwf	fsr2h,c
  3237  000D9E  50DF               	movf	indf2,w,c
  3238  000DA0  6E42               	movwf	ExponentialProfile@target,c
  3239  000DA2  C067  F03C         	movff	AccelerateMotor@index,___wmul@multiplier
  3240  000DA6  C068  F03D         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3241  000DAA  0E00               	movlw	0
  3242  000DAC  6E3F               	movwf	___wmul@multiplicand+1,c
  3243  000DAE  0E07               	movlw	7
  3244  000DB0  6E3E               	movwf	___wmul@multiplicand,c
  3245  000DB2  ECAF  F00C         	call	___wmul	;wreg free
  3246  000DB6  0E04               	movlw	4
  3247  000DB8  263C               	addwf	?___wmul,f,c
  3248  000DBA  0E00               	movlw	0
  3249  000DBC  223D               	addwfc	?___wmul+1,f,c
  3250  000DBE  0E01               	movlw	low _Motors
  3251  000DC0  243C               	addwf	?___wmul,w,c
  3252  000DC2  6ED9               	movwf	fsr2l,c
  3253  000DC4  0E00               	movlw	high _Motors
  3254  000DC6  203D               	addwfc	?___wmul+1,w,c
  3255  000DC8  6EDA               	movwf	fsr2h,c
  3256  000DCA  50DF               	movf	indf2,w,c
  3257  000DCC  EC0D  F007         	call	_ExponentialProfile
  3258  000DD0  0100               	movlb	0	; () banked
  3259  000DD2  6F69               	movwf	??_AccelerateMotor& (0+255),b
  3260  000DD4  C067  F03C         	movff	AccelerateMotor@index,___wmul@multiplier
  3261  000DD8  C068  F03D         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3262  000DDC  0E00               	movlw	0
  3263  000DDE  6E3F               	movwf	___wmul@multiplicand+1,c
  3264  000DE0  0E07               	movlw	7
  3265  000DE2  6E3E               	movwf	___wmul@multiplicand,c
  3266  000DE4  ECAF  F00C         	call	___wmul	;wreg free
  3267  000DE8  0E04               	movlw	4
  3268  000DEA  263C               	addwf	?___wmul,f,c
  3269  000DEC  0E00               	movlw	0
  3270  000DEE  223D               	addwfc	?___wmul+1,f,c
  3271  000DF0  0E01               	movlw	low _Motors
  3272  000DF2  243C               	addwf	?___wmul,w,c
  3273  000DF4  6ED9               	movwf	fsr2l,c
  3274  000DF6  0E00               	movlw	high _Motors
  3275  000DF8  203D               	addwfc	?___wmul+1,w,c
  3276  000DFA  6EDA               	movwf	fsr2h,c
  3277  000DFC  0100               	movlb	0	; () banked
  3278  000DFE  5169               	movf	??_AccelerateMotor& (0+255),w,b
  3279  000E00  26DF               	addwf	indf2,f,c
  3280                           
  3281                           ; BSR set to: 0
  3282                           ;pwm.c: 215: }
  3283                           
  3284                           ; BSR set to: 0
  3285                           ;pwm.c: 214: break;
  3286                           
  3287                           ;pwm.c: 213: default:
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;pwm.c: 211: }
  3291                           ;pwm.c: 212: break;
  3292                           
  3293                           ; BSR set to: 0
  3294  000E02  0012               	return	
  3295  000E04                     l1846:
  3296  000E04  5024               	movf	_AccelType,w,c
  3297                           
  3298                           ; Switch size 1, requested type "space"
  3299                           ; Number of cases is 3, Range of values is 0 to 2
  3300                           ; switch strategies available:
  3301                           ; Name         Instructions Cycles
  3302                           ; simple_byte           10     6 (average)
  3303                           ;	Chosen strategy is simple_byte
  3304  000E06  0A00               	xorlw	0	; case 0
  3305  000E08  B4D8               	btfsc	status,2,c
  3306  000E0A  D667               	goto	l1826
  3307  000E0C  0A01               	xorlw	1	; case 1
  3308  000E0E  B4D8               	btfsc	status,2,c
  3309  000E10  D68F               	goto	l1828
  3310  000E12  0A03               	xorlw	3	; case 2
  3311  000E14  A4D8               	btfss	status,2,c
  3312  000E16  0012               	return	
  3313  000E18  D70F               	goto	l1836
  3314  000E1A                     __end_of_AccelerateMotor:
  3315                           	opt stack 0
  3316                           tblptru	equ	0xFF8
  3317                           tblptrh	equ	0xFF7
  3318                           tblptrl	equ	0xFF6
  3319                           tablat	equ	0xFF5
  3320                           intcon	equ	0xFF2
  3321                           intcon2	equ	0xFF1
  3322                           postinc0	equ	0xFEE
  3323                           wreg	equ	0xFE8
  3324                           indf1	equ	0xFE7
  3325                           postinc1	equ	0xFE6
  3326                           fsr1h	equ	0xFE2
  3327                           fsr1l	equ	0xFE1
  3328                           indf2	equ	0xFDF
  3329                           postinc2	equ	0xFDE
  3330                           fsr2h	equ	0xFDA
  3331                           fsr2l	equ	0xFD9
  3332                           status	equ	0xFD8
  3333                           
  3334 ;; *************** function ___wmul *****************
  3335 ;; Defined at:
  3336 ;;		line 15 in file "/Applications/microchip/xc8/v1.42/sources/common/Umul16.c"
  3337 ;; Parameters:    Size  Location     Type
  3338 ;;  multiplier      2   22[COMRAM] unsigned int 
  3339 ;;  multiplicand    2   24[COMRAM] unsigned int 
  3340 ;; Auto vars:     Size  Location     Type
  3341 ;;  product         2   26[COMRAM] unsigned int 
  3342 ;; Return value:  Size  Location     Type
  3343 ;;                  2   22[COMRAM] unsigned int 
  3344 ;; Registers used:
  3345 ;;		wreg, status,2, status,0, prodl, prodh
  3346 ;; Tracked objects:
  3347 ;;		On entry : 0/0
  3348 ;;		On exit  : 0/0
  3349 ;;		Unchanged: 0/0
  3350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3351 ;;      Params:         4       0       0       0
  3352 ;;      Locals:         2       0       0       0
  3353 ;;      Temps:          0       0       0       0
  3354 ;;      Totals:         6       0       0       0
  3355 ;;Total ram usage:        6 bytes
  3356 ;; Hardware stack levels used:    1
  3357 ;; Hardware stack levels required when called:    2
  3358 ;; This function calls:
  3359 ;;		Nothing
  3360 ;; This function is called by:
  3361 ;;		_InitPWM
  3362 ;;		_StopMotor
  3363 ;;		_AccelerateMotor
  3364 ;;		_AcceleratePWM
  3365 ;;		_CheckPWMOutput
  3366 ;; This function uses a non-reentrant model
  3367 ;;
  3368                           
  3369                           	psect	text9
  3370  00195E                     __ptext9:
  3371                           	opt stack 0
  3372  00195E                     ___wmul:
  3373                           	opt stack 27
  3374                           
  3375                           ;incstack = 0
  3376  00195E  503C               	movf	___wmul@multiplier,w,c
  3377  001960  023E               	mulwf	___wmul@multiplicand,c
  3378  001962  CFF3 F040          	movff	prodl,___wmul@product
  3379  001966  CFF4 F041          	movff	prodh,___wmul@product+1
  3380  00196A  503C               	movf	___wmul@multiplier,w,c
  3381  00196C  023F               	mulwf	___wmul@multiplicand+1,c
  3382  00196E  50F3               	movf	prodl,w,c
  3383  001970  2641               	addwf	___wmul@product+1,f,c
  3384  001972  503D               	movf	___wmul@multiplier+1,w,c
  3385  001974  023E               	mulwf	___wmul@multiplicand,c
  3386  001976  50F3               	movf	prodl,w,c
  3387  001978  2641               	addwf	___wmul@product+1,f,c
  3388  00197A  C040  F03C         	movff	___wmul@product,?___wmul
  3389  00197E  C041  F03D         	movff	___wmul@product+1,?___wmul+1
  3390  001982  0012               	return	
  3391  001984                     __end_of___wmul:
  3392                           	opt stack 0
  3393                           tblptru	equ	0xFF8
  3394                           tblptrh	equ	0xFF7
  3395                           tblptrl	equ	0xFF6
  3396                           tablat	equ	0xFF5
  3397                           prodh	equ	0xFF4
  3398                           prodl	equ	0xFF3
  3399                           intcon	equ	0xFF2
  3400                           intcon2	equ	0xFF1
  3401                           postinc0	equ	0xFEE
  3402                           wreg	equ	0xFE8
  3403                           indf1	equ	0xFE7
  3404                           postinc1	equ	0xFE6
  3405                           fsr1h	equ	0xFE2
  3406                           fsr1l	equ	0xFE1
  3407                           indf2	equ	0xFDF
  3408                           postinc2	equ	0xFDE
  3409                           fsr2h	equ	0xFDA
  3410                           fsr2l	equ	0xFD9
  3411                           status	equ	0xFD8
  3412                           
  3413 ;; *************** function _ExponentialProfile *****************
  3414 ;; Defined at:
  3415 ;;		line 110 in file "pwm.c"
  3416 ;; Parameters:    Size  Location     Type
  3417 ;;  current         1    wreg     unsigned char 
  3418 ;;  target          1   28[COMRAM] unsigned char 
  3419 ;; Auto vars:     Size  Location     Type
  3420 ;;  current         1   30[COMRAM] unsigned char 
  3421 ;;  change          1   29[COMRAM] unsigned char 
  3422 ;; Return value:  Size  Location     Type
  3423 ;;                  1    wreg      unsigned char 
  3424 ;; Registers used:
  3425 ;;		wreg, status,2, status,0
  3426 ;; Tracked objects:
  3427 ;;		On entry : 0/0
  3428 ;;		On exit  : 0/0
  3429 ;;		Unchanged: 0/0
  3430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3431 ;;      Params:         1       0       0       0
  3432 ;;      Locals:         2       0       0       0
  3433 ;;      Temps:          0       7       0       0
  3434 ;;      Totals:         3       7       0       0
  3435 ;;Total ram usage:       10 bytes
  3436 ;; Hardware stack levels used:    1
  3437 ;; Hardware stack levels required when called:    2
  3438 ;; This function calls:
  3439 ;;		Nothing
  3440 ;; This function is called by:
  3441 ;;		_StopMotor
  3442 ;;		_AccelerateMotor
  3443 ;; This function uses a non-reentrant model
  3444 ;;
  3445                           
  3446                           	psect	text10
  3447  000E1A                     __ptext10:
  3448                           	opt stack 0
  3449  000E1A                     _ExponentialProfile:
  3450                           	opt stack 25
  3451                           
  3452                           ;incstack = 0
  3453                           ;ExponentialProfile@current stored from wreg
  3454  000E1A  6E44               	movwf	ExponentialProfile@current,c
  3455                           
  3456                           ;pwm.c: 111: unsigned char change = 0;
  3457  000E1C  0E00               	movlw	0
  3458  000E1E  6E43               	movwf	ExponentialProfile@change,c
  3459                           
  3460                           ;pwm.c: 112: if (current > target) {
  3461  000E20  5044               	movf	ExponentialProfile@current,w,c
  3462  000E22  5C42               	subwf	ExponentialProfile@target,w,c
  3463  000E24  B0D8               	btfsc	status,0,c
  3464  000E26  D0D9               	goto	l1746
  3465                           
  3466                           ;pwm.c: 114: if (current-MinimumDuty > 200) {
  3467  000E28  5023               	movf	_MinimumDuty,w,c
  3468  000E2A  0100               	movlb	0	; () banked
  3469  000E2C  6F60               	movwf	??_ExponentialProfile& (0+255),b
  3470  000E2E  6B61               	clrf	(??_ExponentialProfile+1)& (0+255),b
  3471  000E30  0100               	movlb	0	; () banked
  3472  000E32  1F60               	comf	??_ExponentialProfile& (0+255),f,b
  3473  000E34  1F61               	comf	(??_ExponentialProfile+1)& (0+255),f,b
  3474  000E36  4B60               	infsnz	??_ExponentialProfile& (0+255),f,b
  3475  000E38  2B61               	incf	(??_ExponentialProfile+1)& (0+255),f,b
  3476  000E3A  5044               	movf	ExponentialProfile@current,w,c
  3477  000E3C  0100               	movlb	0	; () banked
  3478  000E3E  6F62               	movwf	(??_ExponentialProfile+2)& (0+255),b
  3479  000E40  6B63               	clrf	(??_ExponentialProfile+3)& (0+255),b
  3480  000E42  0100               	movlb	0	; () banked
  3481  000E44  5160               	movf	??_ExponentialProfile& (0+255),w,b
  3482  000E46  0100               	movlb	0	; () banked
  3483  000E48  2762               	addwf	(??_ExponentialProfile+2)& (0+255),f,b
  3484  000E4A  0100               	movlb	0	; () banked
  3485  000E4C  5161               	movf	(??_ExponentialProfile+1)& (0+255),w,b
  3486  000E4E  0100               	movlb	0	; () banked
  3487  000E50  2363               	addwfc	(??_ExponentialProfile+3)& (0+255),f,b
  3488  000E52  0100               	movlb	0	; () banked
  3489  000E54  BF63               	btfsc	(??_ExponentialProfile+3)& (0+255),7,b
  3490  000E56  D00A               	goto	l1724
  3491  000E58  0100               	movlb	0	; () banked
  3492  000E5A  5163               	movf	(??_ExponentialProfile+3)& (0+255),w,b
  3493  000E5C  E105               	bnz	u2300
  3494  000E5E  0EC9               	movlw	201
  3495  000E60  0100               	movlb	0	; () banked
  3496  000E62  5D62               	subwf	(??_ExponentialProfile+2)& (0+255),w,b
  3497  000E64  A0D8               	btfss	status,0,c
  3498  000E66  D002               	goto	l1724
  3499  000E68                     u2300:
  3500                           
  3501                           ; BSR set to: 0
  3502                           ;pwm.c: 115: change = 50;
  3503  000E68  0E32               	movlw	50
  3504  000E6A  D089               	goto	L8
  3505  000E6C                     l1724:
  3506                           
  3507                           ; BSR set to: 0
  3508  000E6C  5023               	movf	_MinimumDuty,w,c
  3509  000E6E  0100               	movlb	0	; () banked
  3510  000E70  6F60               	movwf	??_ExponentialProfile& (0+255),b
  3511  000E72  6B61               	clrf	(??_ExponentialProfile+1)& (0+255),b
  3512  000E74  0100               	movlb	0	; () banked
  3513  000E76  1F60               	comf	??_ExponentialProfile& (0+255),f,b
  3514  000E78  1F61               	comf	(??_ExponentialProfile+1)& (0+255),f,b
  3515  000E7A  4B60               	infsnz	??_ExponentialProfile& (0+255),f,b
  3516  000E7C  2B61               	incf	(??_ExponentialProfile+1)& (0+255),f,b
  3517  000E7E  5044               	movf	ExponentialProfile@current,w,c
  3518  000E80  0100               	movlb	0	; () banked
  3519  000E82  6F62               	movwf	(??_ExponentialProfile+2)& (0+255),b
  3520  000E84  6B63               	clrf	(??_ExponentialProfile+3)& (0+255),b
  3521  000E86  0100               	movlb	0	; () banked
  3522  000E88  5160               	movf	??_ExponentialProfile& (0+255),w,b
  3523  000E8A  0100               	movlb	0	; () banked
  3524  000E8C  2762               	addwf	(??_ExponentialProfile+2)& (0+255),f,b
  3525  000E8E  0100               	movlb	0	; () banked
  3526  000E90  5161               	movf	(??_ExponentialProfile+1)& (0+255),w,b
  3527  000E92  0100               	movlb	0	; () banked
  3528  000E94  2363               	addwfc	(??_ExponentialProfile+3)& (0+255),f,b
  3529  000E96  0100               	movlb	0	; () banked
  3530  000E98  BF63               	btfsc	(??_ExponentialProfile+3)& (0+255),7,b
  3531  000E9A  D00A               	goto	l1728
  3532  000E9C  0100               	movlb	0	; () banked
  3533  000E9E  5163               	movf	(??_ExponentialProfile+3)& (0+255),w,b
  3534  000EA0  E105               	bnz	u2310
  3535  000EA2  0E97               	movlw	151
  3536  000EA4  0100               	movlb	0	; () banked
  3537  000EA6  5D62               	subwf	(??_ExponentialProfile+2)& (0+255),w,b
  3538  000EA8  A0D8               	btfss	status,0,c
  3539  000EAA  D002               	goto	l1728
  3540  000EAC                     u2310:
  3541                           
  3542                           ; BSR set to: 0
  3543                           ;pwm.c: 117: change = 25;
  3544  000EAC  0E19               	movlw	25
  3545  000EAE  D067               	goto	L8
  3546  000EB0                     l1728:
  3547                           
  3548                           ; BSR set to: 0
  3549  000EB0  5023               	movf	_MinimumDuty,w,c
  3550  000EB2  0100               	movlb	0	; () banked
  3551  000EB4  6F60               	movwf	??_ExponentialProfile& (0+255),b
  3552  000EB6  6B61               	clrf	(??_ExponentialProfile+1)& (0+255),b
  3553  000EB8  0100               	movlb	0	; () banked
  3554  000EBA  1F60               	comf	??_ExponentialProfile& (0+255),f,b
  3555  000EBC  1F61               	comf	(??_ExponentialProfile+1)& (0+255),f,b
  3556  000EBE  4B60               	infsnz	??_ExponentialProfile& (0+255),f,b
  3557  000EC0  2B61               	incf	(??_ExponentialProfile+1)& (0+255),f,b
  3558  000EC2  5044               	movf	ExponentialProfile@current,w,c
  3559  000EC4  0100               	movlb	0	; () banked
  3560  000EC6  6F62               	movwf	(??_ExponentialProfile+2)& (0+255),b
  3561  000EC8  6B63               	clrf	(??_ExponentialProfile+3)& (0+255),b
  3562  000ECA  0100               	movlb	0	; () banked
  3563  000ECC  5160               	movf	??_ExponentialProfile& (0+255),w,b
  3564  000ECE  0100               	movlb	0	; () banked
  3565  000ED0  2762               	addwf	(??_ExponentialProfile+2)& (0+255),f,b
  3566  000ED2  0100               	movlb	0	; () banked
  3567  000ED4  5161               	movf	(??_ExponentialProfile+1)& (0+255),w,b
  3568  000ED6  0100               	movlb	0	; () banked
  3569  000ED8  2363               	addwfc	(??_ExponentialProfile+3)& (0+255),f,b
  3570  000EDA  0100               	movlb	0	; () banked
  3571  000EDC  BF63               	btfsc	(??_ExponentialProfile+3)& (0+255),7,b
  3572  000EDE  D00A               	goto	l1732
  3573  000EE0  0100               	movlb	0	; () banked
  3574  000EE2  5163               	movf	(??_ExponentialProfile+3)& (0+255),w,b
  3575  000EE4  E105               	bnz	u2320
  3576  000EE6  0E65               	movlw	101
  3577  000EE8  0100               	movlb	0	; () banked
  3578  000EEA  5D62               	subwf	(??_ExponentialProfile+2)& (0+255),w,b
  3579  000EEC  A0D8               	btfss	status,0,c
  3580  000EEE  D002               	goto	l1732
  3581  000EF0                     u2320:
  3582                           
  3583                           ; BSR set to: 0
  3584                           ;pwm.c: 119: change = 20;
  3585  000EF0  0E14               	movlw	20
  3586  000EF2  D045               	goto	L8
  3587  000EF4                     l1732:
  3588                           
  3589                           ; BSR set to: 0
  3590  000EF4  5023               	movf	_MinimumDuty,w,c
  3591  000EF6  0100               	movlb	0	; () banked
  3592  000EF8  6F60               	movwf	??_ExponentialProfile& (0+255),b
  3593  000EFA  6B61               	clrf	(??_ExponentialProfile+1)& (0+255),b
  3594  000EFC  0100               	movlb	0	; () banked
  3595  000EFE  1F60               	comf	??_ExponentialProfile& (0+255),f,b
  3596  000F00  1F61               	comf	(??_ExponentialProfile+1)& (0+255),f,b
  3597  000F02  4B60               	infsnz	??_ExponentialProfile& (0+255),f,b
  3598  000F04  2B61               	incf	(??_ExponentialProfile+1)& (0+255),f,b
  3599  000F06  5044               	movf	ExponentialProfile@current,w,c
  3600  000F08  0100               	movlb	0	; () banked
  3601  000F0A  6F62               	movwf	(??_ExponentialProfile+2)& (0+255),b
  3602  000F0C  6B63               	clrf	(??_ExponentialProfile+3)& (0+255),b
  3603  000F0E  0100               	movlb	0	; () banked
  3604  000F10  5160               	movf	??_ExponentialProfile& (0+255),w,b
  3605  000F12  0100               	movlb	0	; () banked
  3606  000F14  2762               	addwf	(??_ExponentialProfile+2)& (0+255),f,b
  3607  000F16  0100               	movlb	0	; () banked
  3608  000F18  5161               	movf	(??_ExponentialProfile+1)& (0+255),w,b
  3609  000F1A  0100               	movlb	0	; () banked
  3610  000F1C  2363               	addwfc	(??_ExponentialProfile+3)& (0+255),f,b
  3611  000F1E  0100               	movlb	0	; () banked
  3612  000F20  BF63               	btfsc	(??_ExponentialProfile+3)& (0+255),7,b
  3613  000F22  D00A               	goto	l1736
  3614  000F24  0100               	movlb	0	; () banked
  3615  000F26  5163               	movf	(??_ExponentialProfile+3)& (0+255),w,b
  3616  000F28  E105               	bnz	u2330
  3617  000F2A  0E4C               	movlw	76
  3618  000F2C  0100               	movlb	0	; () banked
  3619  000F2E  5D62               	subwf	(??_ExponentialProfile+2)& (0+255),w,b
  3620  000F30  A0D8               	btfss	status,0,c
  3621  000F32  D002               	goto	l1736
  3622  000F34                     u2330:
  3623                           
  3624                           ; BSR set to: 0
  3625                           ;pwm.c: 121: change = 10;
  3626  000F34  0E0A               	movlw	10
  3627  000F36  D023               	goto	L8
  3628  000F38                     l1736:
  3629                           
  3630                           ; BSR set to: 0
  3631  000F38  5023               	movf	_MinimumDuty,w,c
  3632  000F3A  0100               	movlb	0	; () banked
  3633  000F3C  6F60               	movwf	??_ExponentialProfile& (0+255),b
  3634  000F3E  6B61               	clrf	(??_ExponentialProfile+1)& (0+255),b
  3635  000F40  0100               	movlb	0	; () banked
  3636  000F42  1F60               	comf	??_ExponentialProfile& (0+255),f,b
  3637  000F44  1F61               	comf	(??_ExponentialProfile+1)& (0+255),f,b
  3638  000F46  4B60               	infsnz	??_ExponentialProfile& (0+255),f,b
  3639  000F48  2B61               	incf	(??_ExponentialProfile+1)& (0+255),f,b
  3640  000F4A  5044               	movf	ExponentialProfile@current,w,c
  3641  000F4C  0100               	movlb	0	; () banked
  3642  000F4E  6F62               	movwf	(??_ExponentialProfile+2)& (0+255),b
  3643  000F50  6B63               	clrf	(??_ExponentialProfile+3)& (0+255),b
  3644  000F52  0100               	movlb	0	; () banked
  3645  000F54  5160               	movf	??_ExponentialProfile& (0+255),w,b
  3646  000F56  0100               	movlb	0	; () banked
  3647  000F58  2762               	addwf	(??_ExponentialProfile+2)& (0+255),f,b
  3648  000F5A  0100               	movlb	0	; () banked
  3649  000F5C  5161               	movf	(??_ExponentialProfile+1)& (0+255),w,b
  3650  000F5E  0100               	movlb	0	; () banked
  3651  000F60  2363               	addwfc	(??_ExponentialProfile+3)& (0+255),f,b
  3652  000F62  0100               	movlb	0	; () banked
  3653  000F64  BF63               	btfsc	(??_ExponentialProfile+3)& (0+255),7,b
  3654  000F66  D00A               	goto	l1740
  3655  000F68  0100               	movlb	0	; () banked
  3656  000F6A  5163               	movf	(??_ExponentialProfile+3)& (0+255),w,b
  3657  000F6C  E105               	bnz	u2340
  3658  000F6E  0E33               	movlw	51
  3659  000F70  0100               	movlb	0	; () banked
  3660  000F72  5D62               	subwf	(??_ExponentialProfile+2)& (0+255),w,b
  3661  000F74  A0D8               	btfss	status,0,c
  3662  000F76  D002               	goto	l1740
  3663  000F78                     u2340:
  3664                           
  3665                           ; BSR set to: 0
  3666                           ;pwm.c: 123: change = 5;
  3667  000F78  0E05               	movlw	5
  3668  000F7A  D001               	goto	L8
  3669  000F7C                     l1740:
  3670                           
  3671                           ; BSR set to: 0
  3672                           ;pwm.c: 125: change = 1;
  3673  000F7C  0E01               	movlw	1
  3674  000F7E                     L8:
  3675  000F7E  6E43               	movwf	ExponentialProfile@change,c
  3676                           
  3677                           ; BSR set to: 0
  3678                           ;pwm.c: 126: }
  3679                           ;pwm.c: 127: if (current-target < change) {
  3680                           
  3681                           ; BSR set to: 0
  3682                           
  3683                           ; BSR set to: 0
  3684                           
  3685                           ; BSR set to: 0
  3686                           
  3687                           ; BSR set to: 0
  3688                           
  3689                           ; BSR set to: 0
  3690  000F80  5043               	movf	ExponentialProfile@change,w,c
  3691  000F82  0100               	movlb	0	; () banked
  3692  000F84  6F60               	movwf	??_ExponentialProfile& (0+255),b
  3693  000F86  6B61               	clrf	(??_ExponentialProfile+1)& (0+255),b
  3694  000F88  5042               	movf	ExponentialProfile@target,w,c
  3695  000F8A  0100               	movlb	0	; () banked
  3696  000F8C  6F62               	movwf	(??_ExponentialProfile+2)& (0+255),b
  3697  000F8E  6B63               	clrf	(??_ExponentialProfile+3)& (0+255),b
  3698  000F90  0100               	movlb	0	; () banked
  3699  000F92  1F62               	comf	(??_ExponentialProfile+2)& (0+255),f,b
  3700  000F94  1F63               	comf	(??_ExponentialProfile+3)& (0+255),f,b
  3701  000F96  4B62               	infsnz	(??_ExponentialProfile+2)& (0+255),f,b
  3702  000F98  2B63               	incf	(??_ExponentialProfile+3)& (0+255),f,b
  3703  000F9A  5044               	movf	ExponentialProfile@current,w,c
  3704  000F9C  0100               	movlb	0	; () banked
  3705  000F9E  6F64               	movwf	(??_ExponentialProfile+4)& (0+255),b
  3706  000FA0  6B65               	clrf	(??_ExponentialProfile+5)& (0+255),b
  3707  000FA2  0100               	movlb	0	; () banked
  3708  000FA4  5162               	movf	(??_ExponentialProfile+2)& (0+255),w,b
  3709  000FA6  0100               	movlb	0	; () banked
  3710  000FA8  2764               	addwf	(??_ExponentialProfile+4)& (0+255),f,b
  3711  000FAA  0100               	movlb	0	; () banked
  3712  000FAC  5163               	movf	(??_ExponentialProfile+3)& (0+255),w,b
  3713  000FAE  0100               	movlb	0	; () banked
  3714  000FB0  2365               	addwfc	(??_ExponentialProfile+5)& (0+255),f,b
  3715  000FB2  0100               	movlb	0	; () banked
  3716  000FB4  5160               	movf	??_ExponentialProfile& (0+255),w,b
  3717  000FB6  0100               	movlb	0	; () banked
  3718  000FB8  5D64               	subwf	(??_ExponentialProfile+4)& (0+255),w,b
  3719  000FBA  0100               	movlb	0	; () banked
  3720  000FBC  5165               	movf	(??_ExponentialProfile+5)& (0+255),w,b
  3721  000FBE  0A80               	xorlw	128
  3722  000FC0  0100               	movlb	0	; () banked
  3723  000FC2  6F66               	movwf	(??_ExponentialProfile+6)& (0+255),b
  3724  000FC4  0100               	movlb	0	; () banked
  3725  000FC6  5161               	movf	(??_ExponentialProfile+1)& (0+255),w,b
  3726  000FC8  0A80               	xorlw	128
  3727  000FCA  0100               	movlb	0	; () banked
  3728  000FCC  5966               	subwfb	(??_ExponentialProfile+6)& (0+255),w,b
  3729  000FCE  B0D8               	btfsc	status,0,c
  3730  000FD0  D0DF               	goto	l1772
  3731                           
  3732                           ; BSR set to: 0
  3733                           ;pwm.c: 128: change = current-target;
  3734  000FD2  5042               	movf	ExponentialProfile@target,w,c
  3735  000FD4  0800               	sublw	0
  3736  000FD6  2444               	addwf	ExponentialProfile@current,w,c
  3737  000FD8  D0DA               	goto	L9
  3738  000FDA                     l1746:
  3739                           
  3740                           ;pwm.c: 132: if (current-MinimumDuty > 200) {
  3741  000FDA  5023               	movf	_MinimumDuty,w,c
  3742  000FDC  0100               	movlb	0	; () banked
  3743  000FDE  6F60               	movwf	??_ExponentialProfile& (0+255),b
  3744  000FE0  6B61               	clrf	(??_ExponentialProfile+1)& (0+255),b
  3745  000FE2  0100               	movlb	0	; () banked
  3746  000FE4  1F60               	comf	??_ExponentialProfile& (0+255),f,b
  3747  000FE6  1F61               	comf	(??_ExponentialProfile+1)& (0+255),f,b
  3748  000FE8  4B60               	infsnz	??_ExponentialProfile& (0+255),f,b
  3749  000FEA  2B61               	incf	(??_ExponentialProfile+1)& (0+255),f,b
  3750  000FEC  5044               	movf	ExponentialProfile@current,w,c
  3751  000FEE  0100               	movlb	0	; () banked
  3752  000FF0  6F62               	movwf	(??_ExponentialProfile+2)& (0+255),b
  3753  000FF2  6B63               	clrf	(??_ExponentialProfile+3)& (0+255),b
  3754  000FF4  0100               	movlb	0	; () banked
  3755  000FF6  5160               	movf	??_ExponentialProfile& (0+255),w,b
  3756  000FF8  0100               	movlb	0	; () banked
  3757  000FFA  2762               	addwf	(??_ExponentialProfile+2)& (0+255),f,b
  3758  000FFC  0100               	movlb	0	; () banked
  3759  000FFE  5161               	movf	(??_ExponentialProfile+1)& (0+255),w,b
  3760  001000  0100               	movlb	0	; () banked
  3761  001002  2363               	addwfc	(??_ExponentialProfile+3)& (0+255),f,b
  3762  001004  0100               	movlb	0	; () banked
  3763  001006  BF63               	btfsc	(??_ExponentialProfile+3)& (0+255),7,b
  3764  001008  D00C               	goto	l1750
  3765  00100A  0100               	movlb	0	; () banked
  3766  00100C  5163               	movf	(??_ExponentialProfile+3)& (0+255),w,b
  3767  00100E  E105               	bnz	u2360
  3768  001010  0EC9               	movlw	201
  3769  001012  0100               	movlb	0	; () banked
  3770  001014  5D62               	subwf	(??_ExponentialProfile+2)& (0+255),w,b
  3771  001016  A0D8               	btfss	status,0,c
  3772  001018  D004               	goto	l1750
  3773  00101A                     u2360:
  3774                           
  3775                           ; BSR set to: 0
  3776                           ;pwm.c: 133: change = current-target;
  3777  00101A  5042               	movf	ExponentialProfile@target,w,c
  3778  00101C  0800               	sublw	0
  3779  00101E  2444               	addwf	ExponentialProfile@current,w,c
  3780  001020  D089               	goto	L14
  3781  001022                     l1750:
  3782                           
  3783                           ; BSR set to: 0
  3784  001022  5023               	movf	_MinimumDuty,w,c
  3785  001024  0100               	movlb	0	; () banked
  3786  001026  6F60               	movwf	??_ExponentialProfile& (0+255),b
  3787  001028  6B61               	clrf	(??_ExponentialProfile+1)& (0+255),b
  3788  00102A  0100               	movlb	0	; () banked
  3789  00102C  1F60               	comf	??_ExponentialProfile& (0+255),f,b
  3790  00102E  1F61               	comf	(??_ExponentialProfile+1)& (0+255),f,b
  3791  001030  4B60               	infsnz	??_ExponentialProfile& (0+255),f,b
  3792  001032  2B61               	incf	(??_ExponentialProfile+1)& (0+255),f,b
  3793  001034  5044               	movf	ExponentialProfile@current,w,c
  3794  001036  0100               	movlb	0	; () banked
  3795  001038  6F62               	movwf	(??_ExponentialProfile+2)& (0+255),b
  3796  00103A  6B63               	clrf	(??_ExponentialProfile+3)& (0+255),b
  3797  00103C  0100               	movlb	0	; () banked
  3798  00103E  5160               	movf	??_ExponentialProfile& (0+255),w,b
  3799  001040  0100               	movlb	0	; () banked
  3800  001042  2762               	addwf	(??_ExponentialProfile+2)& (0+255),f,b
  3801  001044  0100               	movlb	0	; () banked
  3802  001046  5161               	movf	(??_ExponentialProfile+1)& (0+255),w,b
  3803  001048  0100               	movlb	0	; () banked
  3804  00104A  2363               	addwfc	(??_ExponentialProfile+3)& (0+255),f,b
  3805  00104C  0100               	movlb	0	; () banked
  3806  00104E  BF63               	btfsc	(??_ExponentialProfile+3)& (0+255),7,b
  3807  001050  D00A               	goto	l1754
  3808  001052  0100               	movlb	0	; () banked
  3809  001054  5163               	movf	(??_ExponentialProfile+3)& (0+255),w,b
  3810  001056  E105               	bnz	u2370
  3811  001058  0E97               	movlw	151
  3812  00105A  0100               	movlb	0	; () banked
  3813  00105C  5D62               	subwf	(??_ExponentialProfile+2)& (0+255),w,b
  3814  00105E  A0D8               	btfss	status,0,c
  3815  001060  D002               	goto	l1754
  3816  001062                     u2370:
  3817                           
  3818                           ; BSR set to: 0
  3819                           ;pwm.c: 135: change = 25;
  3820  001062  0E19               	movlw	25
  3821  001064  D067               	goto	L14
  3822  001066                     l1754:
  3823                           
  3824                           ; BSR set to: 0
  3825  001066  5023               	movf	_MinimumDuty,w,c
  3826  001068  0100               	movlb	0	; () banked
  3827  00106A  6F60               	movwf	??_ExponentialProfile& (0+255),b
  3828  00106C  6B61               	clrf	(??_ExponentialProfile+1)& (0+255),b
  3829  00106E  0100               	movlb	0	; () banked
  3830  001070  1F60               	comf	??_ExponentialProfile& (0+255),f,b
  3831  001072  1F61               	comf	(??_ExponentialProfile+1)& (0+255),f,b
  3832  001074  4B60               	infsnz	??_ExponentialProfile& (0+255),f,b
  3833  001076  2B61               	incf	(??_ExponentialProfile+1)& (0+255),f,b
  3834  001078  5044               	movf	ExponentialProfile@current,w,c
  3835  00107A  0100               	movlb	0	; () banked
  3836  00107C  6F62               	movwf	(??_ExponentialProfile+2)& (0+255),b
  3837  00107E  6B63               	clrf	(??_ExponentialProfile+3)& (0+255),b
  3838  001080  0100               	movlb	0	; () banked
  3839  001082  5160               	movf	??_ExponentialProfile& (0+255),w,b
  3840  001084  0100               	movlb	0	; () banked
  3841  001086  2762               	addwf	(??_ExponentialProfile+2)& (0+255),f,b
  3842  001088  0100               	movlb	0	; () banked
  3843  00108A  5161               	movf	(??_ExponentialProfile+1)& (0+255),w,b
  3844  00108C  0100               	movlb	0	; () banked
  3845  00108E  2363               	addwfc	(??_ExponentialProfile+3)& (0+255),f,b
  3846  001090  0100               	movlb	0	; () banked
  3847  001092  BF63               	btfsc	(??_ExponentialProfile+3)& (0+255),7,b
  3848  001094  D00A               	goto	l1758
  3849  001096  0100               	movlb	0	; () banked
  3850  001098  5163               	movf	(??_ExponentialProfile+3)& (0+255),w,b
  3851  00109A  E105               	bnz	u2380
  3852  00109C  0E65               	movlw	101
  3853  00109E  0100               	movlb	0	; () banked
  3854  0010A0  5D62               	subwf	(??_ExponentialProfile+2)& (0+255),w,b
  3855  0010A2  A0D8               	btfss	status,0,c
  3856  0010A4  D002               	goto	l1758
  3857  0010A6                     u2380:
  3858                           
  3859                           ; BSR set to: 0
  3860                           ;pwm.c: 137: change = 20;
  3861  0010A6  0E14               	movlw	20
  3862  0010A8  D045               	goto	L14
  3863  0010AA                     l1758:
  3864                           
  3865                           ; BSR set to: 0
  3866  0010AA  5023               	movf	_MinimumDuty,w,c
  3867  0010AC  0100               	movlb	0	; () banked
  3868  0010AE  6F60               	movwf	??_ExponentialProfile& (0+255),b
  3869  0010B0  6B61               	clrf	(??_ExponentialProfile+1)& (0+255),b
  3870  0010B2  0100               	movlb	0	; () banked
  3871  0010B4  1F60               	comf	??_ExponentialProfile& (0+255),f,b
  3872  0010B6  1F61               	comf	(??_ExponentialProfile+1)& (0+255),f,b
  3873  0010B8  4B60               	infsnz	??_ExponentialProfile& (0+255),f,b
  3874  0010BA  2B61               	incf	(??_ExponentialProfile+1)& (0+255),f,b
  3875  0010BC  5044               	movf	ExponentialProfile@current,w,c
  3876  0010BE  0100               	movlb	0	; () banked
  3877  0010C0  6F62               	movwf	(??_ExponentialProfile+2)& (0+255),b
  3878  0010C2  6B63               	clrf	(??_ExponentialProfile+3)& (0+255),b
  3879  0010C4  0100               	movlb	0	; () banked
  3880  0010C6  5160               	movf	??_ExponentialProfile& (0+255),w,b
  3881  0010C8  0100               	movlb	0	; () banked
  3882  0010CA  2762               	addwf	(??_ExponentialProfile+2)& (0+255),f,b
  3883  0010CC  0100               	movlb	0	; () banked
  3884  0010CE  5161               	movf	(??_ExponentialProfile+1)& (0+255),w,b
  3885  0010D0  0100               	movlb	0	; () banked
  3886  0010D2  2363               	addwfc	(??_ExponentialProfile+3)& (0+255),f,b
  3887  0010D4  0100               	movlb	0	; () banked
  3888  0010D6  BF63               	btfsc	(??_ExponentialProfile+3)& (0+255),7,b
  3889  0010D8  D00A               	goto	l1762
  3890  0010DA  0100               	movlb	0	; () banked
  3891  0010DC  5163               	movf	(??_ExponentialProfile+3)& (0+255),w,b
  3892  0010DE  E105               	bnz	u2390
  3893  0010E0  0E4C               	movlw	76
  3894  0010E2  0100               	movlb	0	; () banked
  3895  0010E4  5D62               	subwf	(??_ExponentialProfile+2)& (0+255),w,b
  3896  0010E6  A0D8               	btfss	status,0,c
  3897  0010E8  D002               	goto	l1762
  3898  0010EA                     u2390:
  3899                           
  3900                           ; BSR set to: 0
  3901                           ;pwm.c: 139: change = 10;
  3902  0010EA  0E0A               	movlw	10
  3903  0010EC  D023               	goto	L14
  3904  0010EE                     l1762:
  3905                           
  3906                           ; BSR set to: 0
  3907  0010EE  5023               	movf	_MinimumDuty,w,c
  3908  0010F0  0100               	movlb	0	; () banked
  3909  0010F2  6F60               	movwf	??_ExponentialProfile& (0+255),b
  3910  0010F4  6B61               	clrf	(??_ExponentialProfile+1)& (0+255),b
  3911  0010F6  0100               	movlb	0	; () banked
  3912  0010F8  1F60               	comf	??_ExponentialProfile& (0+255),f,b
  3913  0010FA  1F61               	comf	(??_ExponentialProfile+1)& (0+255),f,b
  3914  0010FC  4B60               	infsnz	??_ExponentialProfile& (0+255),f,b
  3915  0010FE  2B61               	incf	(??_ExponentialProfile+1)& (0+255),f,b
  3916  001100  5044               	movf	ExponentialProfile@current,w,c
  3917  001102  0100               	movlb	0	; () banked
  3918  001104  6F62               	movwf	(??_ExponentialProfile+2)& (0+255),b
  3919  001106  6B63               	clrf	(??_ExponentialProfile+3)& (0+255),b
  3920  001108  0100               	movlb	0	; () banked
  3921  00110A  5160               	movf	??_ExponentialProfile& (0+255),w,b
  3922  00110C  0100               	movlb	0	; () banked
  3923  00110E  2762               	addwf	(??_ExponentialProfile+2)& (0+255),f,b
  3924  001110  0100               	movlb	0	; () banked
  3925  001112  5161               	movf	(??_ExponentialProfile+1)& (0+255),w,b
  3926  001114  0100               	movlb	0	; () banked
  3927  001116  2363               	addwfc	(??_ExponentialProfile+3)& (0+255),f,b
  3928  001118  0100               	movlb	0	; () banked
  3929  00111A  BF63               	btfsc	(??_ExponentialProfile+3)& (0+255),7,b
  3930  00111C  D00A               	goto	l1766
  3931  00111E  0100               	movlb	0	; () banked
  3932  001120  5163               	movf	(??_ExponentialProfile+3)& (0+255),w,b
  3933  001122  E105               	bnz	u2400
  3934  001124  0E33               	movlw	51
  3935  001126  0100               	movlb	0	; () banked
  3936  001128  5D62               	subwf	(??_ExponentialProfile+2)& (0+255),w,b
  3937  00112A  A0D8               	btfss	status,0,c
  3938  00112C  D002               	goto	l1766
  3939  00112E                     u2400:
  3940                           
  3941                           ; BSR set to: 0
  3942                           ;pwm.c: 141: change = 5;
  3943  00112E  0E05               	movlw	5
  3944  001130  D001               	goto	L14
  3945  001132                     l1766:
  3946                           
  3947                           ; BSR set to: 0
  3948                           ;pwm.c: 143: change = 1;
  3949  001132  0E01               	movlw	1
  3950  001134                     L14:
  3951  001134  6E43               	movwf	ExponentialProfile@change,c
  3952                           
  3953                           ; BSR set to: 0
  3954                           ;pwm.c: 144: }
  3955                           ;pwm.c: 145: if (target-current < change) {
  3956                           
  3957                           ; BSR set to: 0
  3958                           
  3959                           ; BSR set to: 0
  3960                           
  3961                           ; BSR set to: 0
  3962                           
  3963                           ; BSR set to: 0
  3964                           
  3965                           ; BSR set to: 0
  3966  001136  5043               	movf	ExponentialProfile@change,w,c
  3967  001138  0100               	movlb	0	; () banked
  3968  00113A  6F60               	movwf	??_ExponentialProfile& (0+255),b
  3969  00113C  6B61               	clrf	(??_ExponentialProfile+1)& (0+255),b
  3970  00113E  5044               	movf	ExponentialProfile@current,w,c
  3971  001140  0100               	movlb	0	; () banked
  3972  001142  6F62               	movwf	(??_ExponentialProfile+2)& (0+255),b
  3973  001144  6B63               	clrf	(??_ExponentialProfile+3)& (0+255),b
  3974  001146  0100               	movlb	0	; () banked
  3975  001148  1F62               	comf	(??_ExponentialProfile+2)& (0+255),f,b
  3976  00114A  1F63               	comf	(??_ExponentialProfile+3)& (0+255),f,b
  3977  00114C  4B62               	infsnz	(??_ExponentialProfile+2)& (0+255),f,b
  3978  00114E  2B63               	incf	(??_ExponentialProfile+3)& (0+255),f,b
  3979  001150  5042               	movf	ExponentialProfile@target,w,c
  3980  001152  0100               	movlb	0	; () banked
  3981  001154  6F64               	movwf	(??_ExponentialProfile+4)& (0+255),b
  3982  001156  6B65               	clrf	(??_ExponentialProfile+5)& (0+255),b
  3983  001158  0100               	movlb	0	; () banked
  3984  00115A  5162               	movf	(??_ExponentialProfile+2)& (0+255),w,b
  3985  00115C  0100               	movlb	0	; () banked
  3986  00115E  2764               	addwf	(??_ExponentialProfile+4)& (0+255),f,b
  3987  001160  0100               	movlb	0	; () banked
  3988  001162  5163               	movf	(??_ExponentialProfile+3)& (0+255),w,b
  3989  001164  0100               	movlb	0	; () banked
  3990  001166  2365               	addwfc	(??_ExponentialProfile+5)& (0+255),f,b
  3991  001168  0100               	movlb	0	; () banked
  3992  00116A  5160               	movf	??_ExponentialProfile& (0+255),w,b
  3993  00116C  0100               	movlb	0	; () banked
  3994  00116E  5D64               	subwf	(??_ExponentialProfile+4)& (0+255),w,b
  3995  001170  0100               	movlb	0	; () banked
  3996  001172  5165               	movf	(??_ExponentialProfile+5)& (0+255),w,b
  3997  001174  0A80               	xorlw	128
  3998  001176  0100               	movlb	0	; () banked
  3999  001178  6F66               	movwf	(??_ExponentialProfile+6)& (0+255),b
  4000  00117A  0100               	movlb	0	; () banked
  4001  00117C  5161               	movf	(??_ExponentialProfile+1)& (0+255),w,b
  4002  00117E  0A80               	xorlw	128
  4003  001180  0100               	movlb	0	; () banked
  4004  001182  5966               	subwfb	(??_ExponentialProfile+6)& (0+255),w,b
  4005  001184  B0D8               	btfsc	status,0,c
  4006  001186  D004               	goto	l1772
  4007                           
  4008                           ; BSR set to: 0
  4009                           ;pwm.c: 146: change = target-current;
  4010  001188  5044               	movf	ExponentialProfile@current,w,c
  4011  00118A  0800               	sublw	0
  4012  00118C  2442               	addwf	ExponentialProfile@target,w,c
  4013  00118E                     L9:
  4014  00118E  6E43               	movwf	ExponentialProfile@change,c
  4015  001190                     l1772:
  4016                           
  4017                           ; BSR set to: 0
  4018                           ;pwm.c: 147: }
  4019                           ;pwm.c: 148: }
  4020                           ;pwm.c: 149: return change;
  4021  001190  5043               	movf	ExponentialProfile@change,w,c
  4022  001192  0012               	return	
  4023  001194                     __end_of_ExponentialProfile:
  4024                           	opt stack 0
  4025                           tblptru	equ	0xFF8
  4026                           tblptrh	equ	0xFF7
  4027                           tblptrl	equ	0xFF6
  4028                           tablat	equ	0xFF5
  4029                           prodh	equ	0xFF4
  4030                           prodl	equ	0xFF3
  4031                           intcon	equ	0xFF2
  4032                           intcon2	equ	0xFF1
  4033                           postinc0	equ	0xFEE
  4034                           wreg	equ	0xFE8
  4035                           indf1	equ	0xFE7
  4036                           postinc1	equ	0xFE6
  4037                           fsr1h	equ	0xFE2
  4038                           fsr1l	equ	0xFE1
  4039                           indf2	equ	0xFDF
  4040                           postinc2	equ	0xFDE
  4041                           fsr2h	equ	0xFDA
  4042                           fsr2l	equ	0xFD9
  4043                           status	equ	0xFD8
  4044                           
  4045 ;; *************** function _I2C_Slave_Read *****************
  4046 ;; Defined at:
  4047 ;;		line 91 in file "i2c.c"
  4048 ;; Parameters:    Size  Location     Type
  4049 ;;		None
  4050 ;; Auto vars:     Size  Location     Type
  4051 ;;		None
  4052 ;; Return value:  Size  Location     Type
  4053 ;;                  1    wreg      void 
  4054 ;; Registers used:
  4055 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4056 ;; Tracked objects:
  4057 ;;		On entry : 0/0
  4058 ;;		On exit  : 0/0
  4059 ;;		Unchanged: 0/0
  4060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4061 ;;      Params:         0       0       0       0
  4062 ;;      Locals:         0       0       0       0
  4063 ;;      Temps:         16       0       0       0
  4064 ;;      Totals:        16       0       0       0
  4065 ;;Total ram usage:       16 bytes
  4066 ;; Hardware stack levels used:    1
  4067 ;; Hardware stack levels required when called:    1
  4068 ;; This function calls:
  4069 ;;		i2___wmul
  4070 ;; This function is called by:
  4071 ;;		Interrupt level 2
  4072 ;; This function uses a non-reentrant model
  4073 ;;
  4074                           
  4075                           	psect	intcode
  4076  000008                     __pintcode:
  4077                           	opt stack 0
  4078  000008                     _I2C_Slave_Read:
  4079                           	opt stack 25
  4080                           
  4081                           ; BSR set to: 0
  4082                           ;incstack = 0
  4083  000008  8249               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4084  00000A  CFFA F02E          	movff	pclath,??_I2C_Slave_Read+2
  4085  00000E  CFFB F02F          	movff	pclatu,??_I2C_Slave_Read+3
  4086  000012  CFE9 F030          	movff	fsr0l,??_I2C_Slave_Read+4
  4087  000016  CFEA F031          	movff	fsr0h,??_I2C_Slave_Read+5
  4088  00001A  CFE1 F032          	movff	fsr1l,??_I2C_Slave_Read+6
  4089  00001E  CFE2 F033          	movff	fsr1h,??_I2C_Slave_Read+7
  4090  000022  CFD9 F034          	movff	fsr2l,??_I2C_Slave_Read+8
  4091  000026  CFDA F035          	movff	fsr2h,??_I2C_Slave_Read+9
  4092  00002A  CFF3 F036          	movff	prodl,??_I2C_Slave_Read+10
  4093  00002E  CFF4 F037          	movff	prodh,??_I2C_Slave_Read+11
  4094  000032  CFF6 F038          	movff	tblptrl,??_I2C_Slave_Read+12
  4095  000036  CFF7 F039          	movff	tblptrh,??_I2C_Slave_Read+13
  4096  00003A  CFF8 F03A          	movff	tblptru,??_I2C_Slave_Read+14
  4097  00003E  CFF5 F03B          	movff	tablat,??_I2C_Slave_Read+15
  4098                           
  4099                           ;i2c.c: 93: if(PIR1bits.SSPIF == 1) {
  4100  000042  A69E               	btfss	3998,3,c	;volatile
  4101  000044  D190               	goto	i2l139
  4102                           
  4103                           ;i2c.c: 95: currentByte = SSPBUF;
  4104  000046  CFC9 F022          	movff	4041,_currentByte	;volatile
  4105                           
  4106                           ;i2c.c: 97: SSPCON1bits.CKP = 0;
  4107  00004A  98C6               	bcf	4038,4,c	;volatile
  4108                           
  4109                           ;i2c.c: 99: if ((SSPCON1bits.SSPOV) || (SSPCON1bits.WCOL)) {
  4110  00004C  BCC6               	btfsc	4038,6,c	;volatile
  4111  00004E  D002               	goto	i2l90
  4112  000050  AEC6               	btfss	4038,7,c	;volatile
  4113  000052  D003               	goto	i2l88
  4114  000054                     i2l90:
  4115                           
  4116                           ;i2c.c: 100: SSPCON1bits.SSPOV = 0;
  4117  000054  9CC6               	bcf	4038,6,c	;volatile
  4118                           
  4119                           ;i2c.c: 101: SSPCON1bits.WCOL = 0;
  4120  000056  9EC6               	bcf	4038,7,c	;volatile
  4121  000058  D17D               	goto	i2l1704
  4122  00005A                     i2l88:
  4123  00005A  AAC7               	btfss	4039,5,c	;volatile
  4124  00005C  B4C7               	btfsc	4039,2,c	;volatile
  4125  00005E  D001               	goto	i2l92
  4126  000060  D177               	goto	i2l1702
  4127  000062                     i2l92:
  4128  000062  BAC7               	btfsc	4039,5,c	;volatile
  4129  000064  B4C7               	btfsc	4039,2,c	;volatile
  4130  000066  D178               	goto	i2l94
  4131                           
  4132                           ;i2c.c: 110: if (state == 0) {
  4133  000068  5021               	movf	_state,w,c
  4134  00006A  A4D8               	btfss	status,2,c
  4135  00006C  D14F               	goto	i2l1700
  4136                           
  4137                           ;i2c.c: 112: state = currentByte;
  4138  00006E  C022  F021         	movff	_currentByte,_state
  4139                           
  4140                           ;i2c.c: 113: } else {
  4141  000072  D170               	goto	i2l1704
  4142  000074                     i2l1614:
  4143                           
  4144                           ;i2c.c: 117: for (i = 0; i < 4; i++) {
  4145  000074  0E00               	movlw	0
  4146  000076  6E1E               	movwf	_i+1,c
  4147  000078  0E00               	movlw	0
  4148  00007A  6E1D               	movwf	_i,c
  4149  00007C  BE1E               	btfsc	_i+1,7,c
  4150  00007E  D008               	goto	i2l1620
  4151  000080  501E               	movf	_i+1,w,c
  4152  000082  E105               	bnz	i2u195_40
  4153  000084  0E04               	movlw	4
  4154  000086  5C1D               	subwf	_i,w,c
  4155  000088  B0D8               	btfsc	status,0,c
  4156  00008A  D162               	goto	i2l1702
  4157  00008C  D001               	goto	i2l1620
  4158  00008E                     i2u195_40:
  4159  00008E  D160               	goto	i2l1702
  4160  000090                     i2l1620:
  4161                           
  4162                           ;i2c.c: 118: if (currentByte < MinimumDuty) {
  4163  000090  5023               	movf	_MinimumDuty,w,c
  4164  000092  5C22               	subwf	_currentByte,w,c
  4165  000094  B0D8               	btfsc	status,0,c
  4166  000096  D017               	goto	i2l1624
  4167                           
  4168                           ;i2c.c: 119: Motors[i].target = 0;
  4169  000098  C01D  F026         	movff	_i,i2___wmul@multiplier
  4170  00009C  C01E  F027         	movff	_i+1,i2___wmul@multiplier+1
  4171  0000A0  0E00               	movlw	0
  4172  0000A2  6E29               	movwf	i2___wmul@multiplicand+1,c
  4173  0000A4  0E07               	movlw	7
  4174  0000A6  6E28               	movwf	i2___wmul@multiplicand,c
  4175  0000A8  ECC2  F00C         	call	i2___wmul	;wreg free
  4176  0000AC  0E05               	movlw	5
  4177  0000AE  2626               	addwf	?i2___wmul,f,c
  4178  0000B0  0E00               	movlw	0
  4179  0000B2  2227               	addwfc	?i2___wmul+1,f,c
  4180  0000B4  0E01               	movlw	low _Motors
  4181  0000B6  2426               	addwf	?i2___wmul,w,c
  4182  0000B8  6ED9               	movwf	fsr2l,c
  4183  0000BA  0E00               	movlw	high _Motors
  4184  0000BC  2027               	addwfc	?i2___wmul+1,w,c
  4185  0000BE  6EDA               	movwf	fsr2h,c
  4186  0000C0  0E00               	movlw	0
  4187  0000C2  6EDF               	movwf	indf2,c
  4188                           
  4189                           ;i2c.c: 120: } else {
  4190  0000C4  D016               	goto	i2l1626
  4191  0000C6                     i2l1624:
  4192                           
  4193                           ;i2c.c: 121: Motors[i].target = currentByte;
  4194  0000C6  C01D  F026         	movff	_i,i2___wmul@multiplier
  4195  0000CA  C01E  F027         	movff	_i+1,i2___wmul@multiplier+1
  4196  0000CE  0E00               	movlw	0
  4197  0000D0  6E29               	movwf	i2___wmul@multiplicand+1,c
  4198  0000D2  0E07               	movlw	7
  4199  0000D4  6E28               	movwf	i2___wmul@multiplicand,c
  4200  0000D6  ECC2  F00C         	call	i2___wmul	;wreg free
  4201  0000DA  0E05               	movlw	5
  4202  0000DC  2626               	addwf	?i2___wmul,f,c
  4203  0000DE  0E00               	movlw	0
  4204  0000E0  2227               	addwfc	?i2___wmul+1,f,c
  4205  0000E2  0E01               	movlw	low _Motors
  4206  0000E4  2426               	addwf	?i2___wmul,w,c
  4207  0000E6  6ED9               	movwf	fsr2l,c
  4208  0000E8  0E00               	movlw	high _Motors
  4209  0000EA  2027               	addwfc	?i2___wmul+1,w,c
  4210  0000EC  6EDA               	movwf	fsr2h,c
  4211  0000EE  C022  FFDF         	movff	_currentByte,indf2
  4212  0000F2                     i2l1626:
  4213  0000F2  4A1D               	infsnz	_i,f,c
  4214  0000F4  2A1E               	incf	_i+1,f,c
  4215  0000F6  BE1E               	btfsc	_i+1,7,c
  4216  0000F8  D7CB               	goto	i2l1620
  4217  0000FA  501E               	movf	_i+1,w,c
  4218  0000FC  E101               	bnz	i2u197_40
  4219  0000FE  D7C2               	goto	L15
  4220  000100                     i2u197_40:
  4221                           
  4222                           ;i2c.c: 122: }
  4223                           ;i2c.c: 123: }
  4224                           ;i2c.c: 124: break;
  4225  000100  D127               	goto	i2l1702
  4226  000102                     i2l1630:
  4227                           
  4228                           ;i2c.c: 126: if (currentByte < MinimumDuty) {
  4229  000102  5023               	movf	_MinimumDuty,w,c
  4230  000104  5C22               	subwf	_currentByte,w,c
  4231  000106  B0D8               	btfsc	status,0,c
  4232  000108  D003               	goto	i2l105
  4233                           
  4234                           ;i2c.c: 127: Motors[0].target = 0;
  4235  00010A  0E00               	movlw	0
  4236  00010C  6E06               	movwf	_Motors+5,c
  4237                           
  4238                           ;i2c.c: 128: } else {
  4239  00010E  D120               	goto	i2l1702
  4240  000110                     i2l105:
  4241                           
  4242                           ;i2c.c: 129: Motors[0].target = currentByte;
  4243  000110  C022  F006         	movff	_currentByte,_Motors+5
  4244                           
  4245                           ;i2c.c: 130: }
  4246                           ;i2c.c: 131: break;
  4247  000114  D11D               	goto	i2l1702
  4248  000116                     i2l1634:
  4249                           
  4250                           ;i2c.c: 133: if (currentByte < MinimumDuty) {
  4251  000116  5023               	movf	_MinimumDuty,w,c
  4252  000118  5C22               	subwf	_currentByte,w,c
  4253  00011A  B0D8               	btfsc	status,0,c
  4254  00011C  D003               	goto	i2l108
  4255                           
  4256                           ;i2c.c: 134: Motors[1].target = 0;
  4257  00011E  0E00               	movlw	0
  4258  000120  6E0D               	movwf	_Motors+12,c
  4259                           
  4260                           ;i2c.c: 135: } else {
  4261  000122  D116               	goto	i2l1702
  4262  000124                     i2l108:
  4263                           
  4264                           ;i2c.c: 136: Motors[1].target = currentByte;
  4265  000124  C022  F00D         	movff	_currentByte,_Motors+12
  4266                           
  4267                           ;i2c.c: 137: }
  4268                           ;i2c.c: 138: break;
  4269  000128  D113               	goto	i2l1702
  4270  00012A                     i2l1638:
  4271                           
  4272                           ;i2c.c: 140: if (currentByte < MinimumDuty) {
  4273  00012A  5023               	movf	_MinimumDuty,w,c
  4274  00012C  5C22               	subwf	_currentByte,w,c
  4275  00012E  B0D8               	btfsc	status,0,c
  4276  000130  D003               	goto	i2l111
  4277                           
  4278                           ;i2c.c: 141: Motors[2].target = 0;
  4279  000132  0E00               	movlw	0
  4280  000134  6E14               	movwf	_Motors+19,c
  4281                           
  4282                           ;i2c.c: 142: } else {
  4283  000136  D10C               	goto	i2l1702
  4284  000138                     i2l111:
  4285                           
  4286                           ;i2c.c: 143: Motors[2].target = currentByte;
  4287  000138  C022  F014         	movff	_currentByte,_Motors+19
  4288                           
  4289                           ;i2c.c: 144: }
  4290                           ;i2c.c: 145: break;
  4291  00013C  D109               	goto	i2l1702
  4292  00013E                     i2l1642:
  4293                           
  4294                           ;i2c.c: 147: if (currentByte < MinimumDuty) {
  4295  00013E  5023               	movf	_MinimumDuty,w,c
  4296  000140  5C22               	subwf	_currentByte,w,c
  4297  000142  B0D8               	btfsc	status,0,c
  4298  000144  D003               	goto	i2l114
  4299                           
  4300                           ;i2c.c: 148: Motors[3].target = 0;
  4301  000146  0E00               	movlw	0
  4302  000148  6E1B               	movwf	_Motors+26,c
  4303                           
  4304                           ;i2c.c: 149: } else {
  4305  00014A  D102               	goto	i2l1702
  4306  00014C                     i2l114:
  4307                           
  4308                           ;i2c.c: 150: Motors[3].target = currentByte;
  4309  00014C  C022  F01B         	movff	_currentByte,_Motors+26
  4310                           
  4311                           ;i2c.c: 151: }
  4312                           ;i2c.c: 152: break;
  4313  000150  D0FF               	goto	i2l1702
  4314  000152                     i2l1646:
  4315                           
  4316                           ;i2c.c: 154: for (i = 0; i < 4; i++) {
  4317  000152  0E00               	movlw	0
  4318  000154  6E1E               	movwf	_i+1,c
  4319  000156  0E00               	movlw	0
  4320  000158  6E1D               	movwf	_i,c
  4321  00015A  BE1E               	btfsc	_i+1,7,c
  4322  00015C  D008               	goto	i2l1652
  4323  00015E  501E               	movf	_i+1,w,c
  4324  000160  E105               	bnz	i2u202_40
  4325  000162  0E04               	movlw	4
  4326  000164  5C1D               	subwf	_i,w,c
  4327  000166  B0D8               	btfsc	status,0,c
  4328  000168  D0F3               	goto	i2l1702
  4329  00016A  D001               	goto	i2l1652
  4330  00016C                     i2u202_40:
  4331  00016C  D0F1               	goto	i2l1702
  4332  00016E                     i2l1652:
  4333                           
  4334                           ;i2c.c: 155: if ((currentByte>>(i+1)) & 0b00000001) {
  4335  00016E  C01D  F02C         	movff	_i,??_I2C_Slave_Read
  4336  000172  0E01               	movlw	1
  4337  000174  262C               	addwf	??_I2C_Slave_Read,f,c
  4338  000176  C022  F02D         	movff	_currentByte,??_I2C_Slave_Read+1
  4339  00017A  2A2C               	incf	??_I2C_Slave_Read,f,c
  4340  00017C  D002               	goto	i2u203_44
  4341  00017E                     i2u203_45:
  4342  00017E  90D8               	bcf	status,0,c
  4343  000180  322D               	rrcf	??_I2C_Slave_Read+1,f,c
  4344  000182                     i2u203_44:
  4345  000182  2E2C               	decfsz	??_I2C_Slave_Read,f,c
  4346  000184  D7FC               	goto	i2u203_45
  4347  000186  A02D               	btfss	??_I2C_Slave_Read+1,0,c
  4348  000188  D012               	goto	i2l1656
  4349                           
  4350                           ;i2c.c: 156: Motors[i].targetDirection = 1;
  4351  00018A  C01D  F026         	movff	_i,i2___wmul@multiplier
  4352  00018E  C01E  F027         	movff	_i+1,i2___wmul@multiplier+1
  4353  000192  0E00               	movlw	0
  4354  000194  6E29               	movwf	i2___wmul@multiplicand+1,c
  4355  000196  0E07               	movlw	7
  4356  000198  6E28               	movwf	i2___wmul@multiplicand,c
  4357  00019A  ECC2  F00C         	call	i2___wmul	;wreg free
  4358  00019E  0E01               	movlw	low _Motors
  4359  0001A0  2426               	addwf	?i2___wmul,w,c
  4360  0001A2  6ED9               	movwf	fsr2l,c
  4361  0001A4  0E00               	movlw	high _Motors
  4362  0001A6  2027               	addwfc	?i2___wmul+1,w,c
  4363  0001A8  6EDA               	movwf	fsr2h,c
  4364  0001AA  88DF               	bsf	indf2,4,c
  4365                           
  4366                           ;i2c.c: 157: } else {
  4367  0001AC  D011               	goto	i2l1658
  4368  0001AE                     i2l1656:
  4369                           
  4370                           ;i2c.c: 158: Motors[i].targetDirection = 0;
  4371  0001AE  C01D  F026         	movff	_i,i2___wmul@multiplier
  4372  0001B2  C01E  F027         	movff	_i+1,i2___wmul@multiplier+1
  4373  0001B6  0E00               	movlw	0
  4374  0001B8  6E29               	movwf	i2___wmul@multiplicand+1,c
  4375  0001BA  0E07               	movlw	7
  4376  0001BC  6E28               	movwf	i2___wmul@multiplicand,c
  4377  0001BE  ECC2  F00C         	call	i2___wmul	;wreg free
  4378  0001C2  0E01               	movlw	low _Motors
  4379  0001C4  2426               	addwf	?i2___wmul,w,c
  4380  0001C6  6ED9               	movwf	fsr2l,c
  4381  0001C8  0E00               	movlw	high _Motors
  4382  0001CA  2027               	addwfc	?i2___wmul+1,w,c
  4383  0001CC  6EDA               	movwf	fsr2h,c
  4384  0001CE  98DF               	bcf	indf2,4,c
  4385  0001D0                     i2l1658:
  4386  0001D0  4A1D               	infsnz	_i,f,c
  4387  0001D2  2A1E               	incf	_i+1,f,c
  4388  0001D4  BE1E               	btfsc	_i+1,7,c
  4389  0001D6  D7CB               	goto	i2l1652
  4390  0001D8  501E               	movf	_i+1,w,c
  4391  0001DA  E101               	bnz	i2u205_40
  4392  0001DC  D7C2               	goto	L16
  4393  0001DE                     i2u205_40:
  4394                           
  4395                           ;i2c.c: 159: }
  4396                           ;i2c.c: 160: }
  4397                           ;i2c.c: 161: break;
  4398  0001DE  D0B8               	goto	i2l1702
  4399  0001E0                     i2l1662:
  4400                           
  4401                           ;i2c.c: 163: PWMEnable = (currentByte & 0b00000001);
  4402  0001E0  5022               	movf	_currentByte,w,c
  4403  0001E2  0B01               	andlw	1
  4404  0001E4  6E48               	movwf	_PWMEnable,c
  4405                           
  4406                           ;i2c.c: 164: for (i = 0; i < 4; i++) {
  4407  0001E6  0E00               	movlw	0
  4408  0001E8  6E1E               	movwf	_i+1,c
  4409  0001EA  0E00               	movlw	0
  4410  0001EC  6E1D               	movwf	_i,c
  4411  0001EE  BE1E               	btfsc	_i+1,7,c
  4412  0001F0  D008               	goto	i2l1670
  4413  0001F2  501E               	movf	_i+1,w,c
  4414  0001F4  E105               	bnz	i2u206_40
  4415  0001F6  0E04               	movlw	4
  4416  0001F8  5C1D               	subwf	_i,w,c
  4417  0001FA  B0D8               	btfsc	status,0,c
  4418  0001FC  D0A9               	goto	i2l1702
  4419  0001FE  D001               	goto	i2l1670
  4420  000200                     i2u206_40:
  4421  000200  D0A7               	goto	i2l1702
  4422  000202                     i2l1670:
  4423                           
  4424                           ;i2c.c: 165: if ((currentByte>>(i+1)) & 0b00000001) {
  4425  000202  C01D  F02C         	movff	_i,??_I2C_Slave_Read
  4426  000206  0E01               	movlw	1
  4427  000208  262C               	addwf	??_I2C_Slave_Read,f,c
  4428  00020A  C022  F02D         	movff	_currentByte,??_I2C_Slave_Read+1
  4429  00020E  2A2C               	incf	??_I2C_Slave_Read,f,c
  4430  000210  D002               	goto	i2u207_44
  4431  000212                     i2u207_45:
  4432  000212  90D8               	bcf	status,0,c
  4433  000214  322D               	rrcf	??_I2C_Slave_Read+1,f,c
  4434  000216                     i2u207_44:
  4435  000216  2E2C               	decfsz	??_I2C_Slave_Read,f,c
  4436  000218  D7FC               	goto	i2u207_45
  4437  00021A  A02D               	btfss	??_I2C_Slave_Read+1,0,c
  4438  00021C  D012               	goto	i2l1674
  4439                           
  4440                           ;i2c.c: 166: Motors[i].enabled = 1;
  4441  00021E  C01D  F026         	movff	_i,i2___wmul@multiplier
  4442  000222  C01E  F027         	movff	_i+1,i2___wmul@multiplier+1
  4443  000226  0E00               	movlw	0
  4444  000228  6E29               	movwf	i2___wmul@multiplicand+1,c
  4445  00022A  0E07               	movlw	7
  4446  00022C  6E28               	movwf	i2___wmul@multiplicand,c
  4447  00022E  ECC2  F00C         	call	i2___wmul	;wreg free
  4448  000232  0E01               	movlw	low _Motors
  4449  000234  2426               	addwf	?i2___wmul,w,c
  4450  000236  6ED9               	movwf	fsr2l,c
  4451  000238  0E00               	movlw	high _Motors
  4452  00023A  2027               	addwfc	?i2___wmul+1,w,c
  4453  00023C  6EDA               	movwf	fsr2h,c
  4454  00023E  82DF               	bsf	indf2,1,c
  4455                           
  4456                           ;i2c.c: 167: } else {
  4457  000240  D011               	goto	i2l1676
  4458  000242                     i2l1674:
  4459                           
  4460                           ;i2c.c: 168: Motors[i].enabled = 0;
  4461  000242  C01D  F026         	movff	_i,i2___wmul@multiplier
  4462  000246  C01E  F027         	movff	_i+1,i2___wmul@multiplier+1
  4463  00024A  0E00               	movlw	0
  4464  00024C  6E29               	movwf	i2___wmul@multiplicand+1,c
  4465  00024E  0E07               	movlw	7
  4466  000250  6E28               	movwf	i2___wmul@multiplicand,c
  4467  000252  ECC2  F00C         	call	i2___wmul	;wreg free
  4468  000256  0E01               	movlw	low _Motors
  4469  000258  2426               	addwf	?i2___wmul,w,c
  4470  00025A  6ED9               	movwf	fsr2l,c
  4471  00025C  0E00               	movlw	high _Motors
  4472  00025E  2027               	addwfc	?i2___wmul+1,w,c
  4473  000260  6EDA               	movwf	fsr2h,c
  4474  000262  92DF               	bcf	indf2,1,c
  4475  000264                     i2l1676:
  4476  000264  4A1D               	infsnz	_i,f,c
  4477  000266  2A1E               	incf	_i+1,f,c
  4478  000268  BE1E               	btfsc	_i+1,7,c
  4479  00026A  D7CB               	goto	i2l1670
  4480  00026C  501E               	movf	_i+1,w,c
  4481  00026E  E170               	bnz	i2l1702
  4482  000270  D7C2               	goto	L17
  4483  000272                     i2l1680:
  4484                           
  4485                           ;i2c.c: 173: PWMPause = currentByte & 0b00000001;
  4486  000272  5022               	movf	_currentByte,w,c
  4487  000274  0B01               	andlw	1
  4488  000276  6E25               	movwf	_PWMPause,c
  4489                           
  4490                           ;i2c.c: 174: for (i = 0; i < 4; i++) {
  4491  000278  0E00               	movlw	0
  4492  00027A  6E1E               	movwf	_i+1,c
  4493  00027C  0E00               	movlw	0
  4494  00027E  6E1D               	movwf	_i,c
  4495  000280                     i2l1684:
  4496  000280  BE1E               	btfsc	_i+1,7,c
  4497  000282  D006               	goto	i2l1688
  4498  000284  501E               	movf	_i+1,w,c
  4499  000286  E164               	bnz	i2l1702
  4500  000288  0E04               	movlw	4
  4501  00028A  5C1D               	subwf	_i,w,c
  4502  00028C  B0D8               	btfsc	status,0,c
  4503  00028E  D060               	goto	i2l1702
  4504  000290                     i2l1688:
  4505                           
  4506                           ;i2c.c: 175: if ((currentByte>>(i+1)) & 0b00000001) {
  4507  000290  C01D  F02C         	movff	_i,??_I2C_Slave_Read
  4508  000294  0E01               	movlw	1
  4509  000296  262C               	addwf	??_I2C_Slave_Read,f,c
  4510  000298  C022  F02D         	movff	_currentByte,??_I2C_Slave_Read+1
  4511  00029C  2A2C               	incf	??_I2C_Slave_Read,f,c
  4512  00029E  D002               	goto	i2u211_44
  4513  0002A0                     i2u211_45:
  4514  0002A0  90D8               	bcf	status,0,c
  4515  0002A2  322D               	rrcf	??_I2C_Slave_Read+1,f,c
  4516  0002A4                     i2u211_44:
  4517  0002A4  2E2C               	decfsz	??_I2C_Slave_Read,f,c
  4518  0002A6  D7FC               	goto	i2u211_45
  4519  0002A8  A02D               	btfss	??_I2C_Slave_Read+1,0,c
  4520  0002AA  D012               	goto	i2l1692
  4521                           
  4522                           ;i2c.c: 176: Motors[i].paused = 1;
  4523  0002AC  C01D  F026         	movff	_i,i2___wmul@multiplier
  4524  0002B0  C01E  F027         	movff	_i+1,i2___wmul@multiplier+1
  4525  0002B4  0E00               	movlw	0
  4526  0002B6  6E29               	movwf	i2___wmul@multiplicand+1,c
  4527  0002B8  0E07               	movlw	7
  4528  0002BA  6E28               	movwf	i2___wmul@multiplicand,c
  4529  0002BC  ECC2  F00C         	call	i2___wmul	;wreg free
  4530  0002C0  0E01               	movlw	low _Motors
  4531  0002C2  2426               	addwf	?i2___wmul,w,c
  4532  0002C4  6ED9               	movwf	fsr2l,c
  4533  0002C6  0E00               	movlw	high _Motors
  4534  0002C8  2027               	addwfc	?i2___wmul+1,w,c
  4535  0002CA  6EDA               	movwf	fsr2h,c
  4536  0002CC  84DF               	bsf	indf2,2,c
  4537                           
  4538                           ;i2c.c: 177: } else {
  4539  0002CE  D011               	goto	i2l1694
  4540  0002D0                     i2l1692:
  4541                           
  4542                           ;i2c.c: 178: Motors[i].paused = 0;
  4543  0002D0  C01D  F026         	movff	_i,i2___wmul@multiplier
  4544  0002D4  C01E  F027         	movff	_i+1,i2___wmul@multiplier+1
  4545  0002D8  0E00               	movlw	0
  4546  0002DA  6E29               	movwf	i2___wmul@multiplicand+1,c
  4547  0002DC  0E07               	movlw	7
  4548  0002DE  6E28               	movwf	i2___wmul@multiplicand,c
  4549  0002E0  ECC2  F00C         	call	i2___wmul	;wreg free
  4550  0002E4  0E01               	movlw	low _Motors
  4551  0002E6  2426               	addwf	?i2___wmul,w,c
  4552  0002E8  6ED9               	movwf	fsr2l,c
  4553  0002EA  0E00               	movlw	high _Motors
  4554  0002EC  2027               	addwfc	?i2___wmul+1,w,c
  4555  0002EE  6EDA               	movwf	fsr2h,c
  4556  0002F0  94DF               	bcf	indf2,2,c
  4557  0002F2                     i2l1694:
  4558  0002F2  4A1D               	infsnz	_i,f,c
  4559  0002F4  2A1E               	incf	_i+1,f,c
  4560  0002F6  D7C4               	goto	i2l1684
  4561  0002F8                     i2l131:
  4562                           
  4563                           ;i2c.c: 183: AccelType = currentByte;
  4564  0002F8  C022  F024         	movff	_currentByte,_AccelType
  4565                           
  4566                           ;i2c.c: 184: break;
  4567  0002FC  D029               	goto	i2l1702
  4568  0002FE                     i2l132:
  4569                           
  4570                           ;i2c.c: 186: AccelRate = currentByte;
  4571  0002FE  C022  F046         	movff	_currentByte,_AccelRate
  4572  000302  6A47               	clrf	_AccelRate+1,c
  4573                           
  4574                           ;i2c.c: 187: break;
  4575  000304  D025               	goto	i2l1702
  4576  000306                     i2l133:
  4577                           
  4578                           ;i2c.c: 189: MinimumDuty = currentByte;
  4579  000306  C022  F023         	movff	_currentByte,_MinimumDuty
  4580                           
  4581                           ;i2c.c: 191: }
  4582                           
  4583                           ;i2c.c: 190: break;
  4584  00030A  D022               	goto	i2l1702
  4585  00030C                     i2l1700:
  4586  00030C  5021               	movf	_state,w,c
  4587                           
  4588                           ; Switch size 1, requested type "space"
  4589                           ; Number of cases is 11, Range of values is 1 to 12
  4590                           ; switch strategies available:
  4591                           ; Name         Instructions Cycles
  4592                           ; simple_byte           34    18 (average)
  4593                           ;	Chosen strategy is simple_byte
  4594  00030E  0A01               	xorlw	1	; case 1
  4595  000310  B4D8               	btfsc	status,2,c
  4596  000312  D6B0               	goto	i2l1614
  4597  000314  0A03               	xorlw	3	; case 2
  4598  000316  B4D8               	btfsc	status,2,c
  4599  000318  D6F4               	goto	i2l1630
  4600  00031A  0A01               	xorlw	1	; case 3
  4601  00031C  B4D8               	btfsc	status,2,c
  4602  00031E  D6FB               	goto	i2l1634
  4603  000320  0A07               	xorlw	7	; case 4
  4604  000322  B4D8               	btfsc	status,2,c
  4605  000324  D702               	goto	i2l1638
  4606  000326  0A01               	xorlw	1	; case 5
  4607  000328  B4D8               	btfsc	status,2,c
  4608  00032A  D709               	goto	i2l1642
  4609  00032C  0A02               	xorlw	2	; case 7
  4610  00032E  B4D8               	btfsc	status,2,c
  4611  000330  D710               	goto	i2l1646
  4612  000332  0A0F               	xorlw	15	; case 8
  4613  000334  B4D8               	btfsc	status,2,c
  4614  000336  D79D               	goto	i2l1680
  4615  000338  0A01               	xorlw	1	; case 9
  4616  00033A  B4D8               	btfsc	status,2,c
  4617  00033C  D751               	goto	i2l1662
  4618  00033E  0A03               	xorlw	3	; case 10
  4619  000340  B4D8               	btfsc	status,2,c
  4620  000342  D7DA               	goto	i2l131
  4621  000344  0A01               	xorlw	1	; case 11
  4622  000346  B4D8               	btfsc	status,2,c
  4623  000348  D7DA               	goto	i2l132
  4624  00034A  0A07               	xorlw	7	; case 12
  4625  00034C  B4D8               	btfsc	status,2,c
  4626  00034E  D7DB               	goto	i2l133
  4627  000350                     i2l1702:
  4628                           
  4629                           ;i2c.c: 192: state = 0;
  4630  000350  0E00               	movlw	0
  4631  000352  6E21               	movwf	_state,c
  4632  000354                     i2l1704:
  4633                           
  4634                           ;i2c.c: 193: }
  4635                           ;i2c.c: 194: SSPCON1bits.CKP = 1;
  4636  000354  88C6               	bsf	4038,4,c	;volatile
  4637                           
  4638                           ;i2c.c: 195: } else if(!SSPSTATbits.D_nA && SSPSTATbits.R_nW) {
  4639  000356  D006               	goto	i2l91
  4640  000358                     i2l94:
  4641  000358  AAC7               	btfss	4039,5,c	;volatile
  4642  00035A  A4C7               	btfss	4039,2,c	;volatile
  4643  00035C  D003               	goto	i2l91
  4644                           
  4645                           ;i2c.c: 208: SSPCON1bits.CKP = 1;
  4646  00035E  88C6               	bsf	4038,4,c	;volatile
  4647  000360                     i2l136:
  4648  000360  B0C7               	btfsc	4039,0,c	;volatile
  4649  000362  D7FE               	goto	i2l136
  4650  000364                     i2l91:
  4651                           
  4652                           ;i2c.c: 211: }
  4653                           ;i2c.c: 213: PIR1bits.SSPIF = 0;
  4654  000364  969E               	bcf	3998,3,c	;volatile
  4655  000366                     i2l139:
  4656  000366  C03B  FFF5         	movff	??_I2C_Slave_Read+15,tablat
  4657  00036A  C03A  FFF8         	movff	??_I2C_Slave_Read+14,tblptru
  4658  00036E  C039  FFF7         	movff	??_I2C_Slave_Read+13,tblptrh
  4659  000372  C038  FFF6         	movff	??_I2C_Slave_Read+12,tblptrl
  4660  000376  C037  FFF4         	movff	??_I2C_Slave_Read+11,prodh
  4661  00037A  C036  FFF3         	movff	??_I2C_Slave_Read+10,prodl
  4662  00037E  C035  FFDA         	movff	??_I2C_Slave_Read+9,fsr2h
  4663  000382  C034  FFD9         	movff	??_I2C_Slave_Read+8,fsr2l
  4664  000386  C033  FFE2         	movff	??_I2C_Slave_Read+7,fsr1h
  4665  00038A  C032  FFE1         	movff	??_I2C_Slave_Read+6,fsr1l
  4666  00038E  C031  FFEA         	movff	??_I2C_Slave_Read+5,fsr0h
  4667  000392  C030  FFE9         	movff	??_I2C_Slave_Read+4,fsr0l
  4668  000396  C02F  FFFB         	movff	??_I2C_Slave_Read+3,pclatu
  4669  00039A  C02E  FFFA         	movff	??_I2C_Slave_Read+2,pclath
  4670  00039E  9249               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4671  0003A0  0011               	retfie		f
  4672  0003A2                     __end_of_I2C_Slave_Read:
  4673                           	opt stack 0
  4674                           pclatu	equ	0xFFB
  4675                           pclath	equ	0xFFA
  4676                           tblptru	equ	0xFF8
  4677                           tblptrh	equ	0xFF7
  4678                           tblptrl	equ	0xFF6
  4679                           tablat	equ	0xFF5
  4680                           prodh	equ	0xFF4
  4681                           prodl	equ	0xFF3
  4682                           intcon	equ	0xFF2
  4683                           intcon2	equ	0xFF1
  4684                           postinc0	equ	0xFEE
  4685                           fsr0h	equ	0xFEA
  4686                           fsr0l	equ	0xFE9
  4687                           wreg	equ	0xFE8
  4688                           indf1	equ	0xFE7
  4689                           postinc1	equ	0xFE6
  4690                           fsr1h	equ	0xFE2
  4691                           fsr1l	equ	0xFE1
  4692                           indf2	equ	0xFDF
  4693                           postinc2	equ	0xFDE
  4694                           fsr2h	equ	0xFDA
  4695                           fsr2l	equ	0xFD9
  4696                           status	equ	0xFD8
  4697                           
  4698 ;; *************** function i2___wmul *****************
  4699 ;; Defined at:
  4700 ;;		line 15 in file "/Applications/microchip/xc8/v1.42/sources/common/Umul16.c"
  4701 ;; Parameters:    Size  Location     Type
  4702 ;;  multiplier      2    0[COMRAM] unsigned int 
  4703 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4704 ;; Auto vars:     Size  Location     Type
  4705 ;;  __wmul          2    4[COMRAM] unsigned int 
  4706 ;; Return value:  Size  Location     Type
  4707 ;;                  2    0[COMRAM] unsigned int 
  4708 ;; Registers used:
  4709 ;;		wreg, status,2, status,0, prodl, prodh
  4710 ;; Tracked objects:
  4711 ;;		On entry : 0/0
  4712 ;;		On exit  : 0/0
  4713 ;;		Unchanged: 0/0
  4714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4715 ;;      Params:         4       0       0       0
  4716 ;;      Locals:         2       0       0       0
  4717 ;;      Temps:          0       0       0       0
  4718 ;;      Totals:         6       0       0       0
  4719 ;;Total ram usage:        6 bytes
  4720 ;; Hardware stack levels used:    1
  4721 ;; This function calls:
  4722 ;;		Nothing
  4723 ;; This function is called by:
  4724 ;;		_I2C_Slave_Read
  4725 ;; This function uses a non-reentrant model
  4726 ;;
  4727                           
  4728                           	psect	text12
  4729  001984                     __ptext12:
  4730                           	opt stack 0
  4731  001984                     i2___wmul:
  4732                           	opt stack 25
  4733                           
  4734                           ;incstack = 0
  4735  001984  5026               	movf	i2___wmul@multiplier,w,c
  4736  001986  0228               	mulwf	i2___wmul@multiplicand,c
  4737  001988  CFF3 F02A          	movff	prodl,i2___wmul@product
  4738  00198C  CFF4 F02B          	movff	prodh,i2___wmul@product+1
  4739  001990  5026               	movf	i2___wmul@multiplier,w,c
  4740  001992  0229               	mulwf	i2___wmul@multiplicand+1,c
  4741  001994  50F3               	movf	prodl,w,c
  4742  001996  262B               	addwf	i2___wmul@product+1,f,c
  4743  001998  5027               	movf	i2___wmul@multiplier+1,w,c
  4744  00199A  0228               	mulwf	i2___wmul@multiplicand,c
  4745  00199C  50F3               	movf	prodl,w,c
  4746  00199E  262B               	addwf	i2___wmul@product+1,f,c
  4747  0019A0  C02A  F026         	movff	i2___wmul@product,?i2___wmul
  4748  0019A4  C02B  F027         	movff	i2___wmul@product+1,?i2___wmul+1
  4749  0019A8  0012               	return	
  4750  0019AA                     __end_ofi2___wmul:
  4751                           	opt stack 0
  4752  0000                     pclatu	equ	0xFFB
  4753                           pclath	equ	0xFFA
  4754                           tblptru	equ	0xFF8
  4755                           tblptrh	equ	0xFF7
  4756                           tblptrl	equ	0xFF6
  4757                           tablat	equ	0xFF5
  4758                           prodh	equ	0xFF4
  4759                           prodl	equ	0xFF3
  4760                           intcon	equ	0xFF2
  4761                           intcon2	equ	0xFF1
  4762                           postinc0	equ	0xFEE
  4763                           fsr0h	equ	0xFEA
  4764                           fsr0l	equ	0xFE9
  4765                           wreg	equ	0xFE8
  4766                           indf1	equ	0xFE7
  4767                           postinc1	equ	0xFE6
  4768                           fsr1h	equ	0xFE2
  4769                           fsr1l	equ	0xFE1
  4770                           indf2	equ	0xFDF
  4771                           postinc2	equ	0xFDE
  4772                           fsr2h	equ	0xFDA
  4773                           fsr2l	equ	0xFD9
  4774                           status	equ	0xFD8
  4775                           pclatu	equ	0xFFB
  4776                           pclath	equ	0xFFA
  4777                           tblptru	equ	0xFF8
  4778                           tblptrh	equ	0xFF7
  4779                           tblptrl	equ	0xFF6
  4780                           tablat	equ	0xFF5
  4781                           prodh	equ	0xFF4
  4782                           prodl	equ	0xFF3
  4783                           intcon	equ	0xFF2
  4784                           intcon2	equ	0xFF1
  4785                           postinc0	equ	0xFEE
  4786                           fsr0h	equ	0xFEA
  4787                           fsr0l	equ	0xFE9
  4788                           wreg	equ	0xFE8
  4789                           indf1	equ	0xFE7
  4790                           postinc1	equ	0xFE6
  4791                           fsr1h	equ	0xFE2
  4792                           fsr1l	equ	0xFE1
  4793                           indf2	equ	0xFDF
  4794                           postinc2	equ	0xFDE
  4795                           fsr2h	equ	0xFDA
  4796                           fsr2l	equ	0xFD9
  4797                           status	equ	0xFD8
  4798                           
  4799                           	psect	rparam
  4800  0000                     pclatu	equ	0xFFB
  4801                           pclath	equ	0xFFA
  4802                           tblptru	equ	0xFF8
  4803                           tblptrh	equ	0xFF7
  4804                           tblptrl	equ	0xFF6
  4805                           tablat	equ	0xFF5
  4806                           prodh	equ	0xFF4
  4807                           prodl	equ	0xFF3
  4808                           intcon	equ	0xFF2
  4809                           intcon2	equ	0xFF1
  4810                           postinc0	equ	0xFEE
  4811                           fsr0h	equ	0xFEA
  4812                           fsr0l	equ	0xFE9
  4813                           wreg	equ	0xFE8
  4814                           indf1	equ	0xFE7
  4815                           postinc1	equ	0xFE6
  4816                           fsr1h	equ	0xFE2
  4817                           fsr1l	equ	0xFE1
  4818                           indf2	equ	0xFDF
  4819                           postinc2	equ	0xFDE
  4820                           fsr2h	equ	0xFDA
  4821                           fsr2l	equ	0xFD9
  4822                           status	equ	0xFD8
  4823                           
  4824                           	psect	temp
  4825  000049                     btemp:
  4826                           	opt stack 0
  4827  000049                     	ds	1
  4828  0000                     int$flags	set	btemp
  4829                           pclatu	equ	0xFFB
  4830                           pclath	equ	0xFFA
  4831                           tblptru	equ	0xFF8
  4832                           tblptrh	equ	0xFF7
  4833                           tblptrl	equ	0xFF6
  4834                           tablat	equ	0xFF5
  4835                           prodh	equ	0xFF4
  4836                           prodl	equ	0xFF3
  4837                           intcon	equ	0xFF2
  4838                           intcon2	equ	0xFF1
  4839                           postinc0	equ	0xFEE
  4840                           fsr0h	equ	0xFEA
  4841                           fsr0l	equ	0xFE9
  4842                           wreg	equ	0xFE8
  4843                           indf1	equ	0xFE7
  4844                           postinc1	equ	0xFE6
  4845                           fsr1h	equ	0xFE2
  4846                           fsr1l	equ	0xFE1
  4847                           indf2	equ	0xFDF
  4848                           postinc2	equ	0xFDE
  4849                           fsr2h	equ	0xFDA
  4850                           fsr2l	equ	0xFD9
  4851                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        3
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     32      72
    BANK0           160     19      19
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _InitPWM->_SetPin
    _AcceleratePWM->_StopMotor
    _StopMotor->_ExponentialProfile
    _SetPin->___wmul
    _AccelerateMotor->_ExponentialProfile
    _ExponentialProfile->___wmul

Critical Paths under _I2C_Slave_Read in COMRAM

    _I2C_Slave_Read->i2___wmul

Critical Paths under _main in BANK0

    _main->_CheckPWMOutput
    _CheckPWMOutput->_AcceleratePWM
    _AcceleratePWM->_AccelerateMotor
    _StopMotor->_ExponentialProfile
    _AccelerateMotor->_ExponentialProfile

Critical Paths under _I2C_Slave_Read in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _I2C_Slave_Read in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _I2C_Slave_Read in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   95834
                     _CheckPWMOutput
                            _InitI2C
                            _InitPWM
                          _InitPorts
 ---------------------------------------------------------------------------------
 (1) _InitPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitPWM                                              4     4      0   18977
                                              0 BANK0      4     4      0
                             _SetPin
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _InitI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckPWMOutput                                       4     4      0   76857
                                             15 BANK0      4     4      0
                      _AcceleratePWM
                             _SetPin
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _AcceleratePWM                                        4     4      0   57235
                                             11 BANK0      4     4      0
                    _AccelerateMotor
                          _StopMotor
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _StopMotor                                            3     1      2   20359
                                             31 COMRAM     1     1      0
                                              7 BANK0      2     0      2
                 _ExponentialProfile
                             _SetPin
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _SetPin                                               2     1      1    1213
                                             28 COMRAM     2     1      1
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _AccelerateMotor                                      4     2      2   19242
                                              7 BANK0      4     2      2
                 _ExponentialProfile
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4   17318
                                             22 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _ExponentialProfile                                  10     9      1    1090
                                             28 COMRAM     3     2      1
                                              0 BANK0      7     7      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _I2C_Slave_Read                                      16    16      0     573
                                              6 COMRAM    16    16      0
                           i2___wmul
 ---------------------------------------------------------------------------------
 (6) i2___wmul                                             6     2      4     573
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckPWMOutput
     _AcceleratePWM
       _AccelerateMotor
         _ExponentialProfile
           ___wmul (ARG)
         ___wmul
       _StopMotor
         _ExponentialProfile
           ___wmul (ARG)
         _SetPin
           ___wmul (ARG)
         ___wmul
       ___wmul
     _SetPin
       ___wmul (ARG)
     ___wmul
   _InitI2C
   _InitPWM
     _SetPin
       ___wmul (ARG)
     ___wmul
   _InitPorts

 _I2C_Slave_Read (ROOT)
   i2___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       6        0.0%
BANK2              100      0       0       7        0.0%
BITBANK1           100      0       0       9        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     13      13       4       11.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     20      48       1       76.6%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5B       8        0.0%
DATA                 0      0      5B      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Mon Jun  5 12:03:41 2017

                          _i 001D                  _SSPSTATbits 000FC7          ___wmul@multiplicand 003E  
               __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000                          l170 1862  
                        l171 186E                          l172 187A                          l260 1844  
                        l173 1886                          l174 1892                          l175 189E  
                        l167 184A                          l176 18AA                          l177 18B6  
                        l169 1856                          l178 18C2                          l179 18CE  
                        l187 1700                 __CFG_CPB$OFF 000000                 __CFG_CPD$OFF 000000  
               __CFG_BORV$19 000000                          wreg 000FE8                 __CFG_LVP$OFF 000000  
                       l1714 18DA                         l1802 13D4                         l1740 0F7C  
                       l1732 0EF4                         l1724 0E6C                         l1820 0A4C  
                       l1804 1402                         l1812 14C2                         l1750 1022  
                       l1910 03CA                         l1736 0F38                         l1728 0EB0  
                       l1840 0D1E                         l1832 0BB4                         l1808 1494  
                       l1762 10EE                         l1754 1066                         l1746 0FDA  
                       l1826 0ADA                         l1772 1190                         l1836 0C38  
                       l1828 0B30                         l1860 175E                         l1940 0690  
                       l1932 05DA                         l1924 04F4                         l1766 1132  
                       l1758 10AA                         l1846 0E04                         l1854 1726  
                       l1792 131A                         l1864 17CC                         l1960 0912  
                       l1858 1750                         l1954 0858                         l1796 134A  
                       l1868 1830                         l1964 098A                         l1948 07A2  
                       l1892 1644                         l1798 1378                         l1974 09B8  
                       l1894 167E                         l1886 150C                         l1982 19DE  
                       l1968 099E                         l1898 1694                         u2300 0E68  
                       u2205 1876                         u2310 0EAC                         u2206 1878  
                       u2215 1882                         u2400 112E                         u2320 0EF0  
                       u2216 1884                         u2225 188E                         u2330 0F34  
                       u2226 1890                         u2235 189A                         u2340 0F78  
                       u2236 189C                         u2245 18A6                         u2246 18A8  
                       u2430 11EA                         u2255 18B2                         u2175 1852  
                       u2360 101A                         u2256 18B4                         u2176 1854  
                       u2440 1216                         u2432 11EC                         u2600 1724  
                       u2265 18BE                         u2185 185E                         u2370 1062  
                       u2266 18C0                         u2186 1860                         u2442 1218  
                       u2275 18CA                         u2195 186A                         u2380 10A6  
                       u2276 18CC                         u2196 186C                         u2285 18D6  
                       u2390 10EA                         u2286 18D8                         u2470 12E6  
                       u2630 1786                         u2480 12E8                         u2640 17B4  
                       u2632 1788                         u2720 03C8                         u2465 1266  
                       u2466 1268                         u2642 17B6                         u2680 150A  
                       i2l90 0054                         i2l91 0364                         i2l92 0062  
                       i2l94 0358                         i2l88 005A                _AcceleratePWM 1702  
                       _TMR0 000FD6                         _main 19CC                         fsr0h 000FEA  
                       fsr1h 000FE2                         fsr2h 000FDA                         fsr0l 000FE9  
                       indf1 000FE7                         indf2 000FDF                         fsr1l 000FE1  
                       fsr2l 000FD9                         btemp 0049                         prodh 000FF4  
                       prodl 000FF3                         start 03A2                __CFG_IESO$OFF 000000  
              __CFG_FOSC$IRC 000000                 ___param_bank 000000              __end_of_InitI2C 19CC  
         _ExponentialProfile 0E1A              __end_of_InitPWM 1702                        ?_main 0026  
        ?_ExponentialProfile 0042                        i2l111 0138                        i2l105 0110  
                      i2l114 014C                        i2l131 02F8                        i2l132 02FE  
                      i2l108 0124                        i2l133 0306                        i2l136 0360  
                      i2l139 0366               __CFG_BBSIZ$OFF 000000                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
             __CFG_EBTR1$OFF 000000                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000               __CFG_EBTRB$OFF 000000               ?_AcceleratePWM 0026  
                      _state 0021                        pclath 000FFA                        tablat 000FF5  
           __end_ofi2___wmul 19AA         ??_ExponentialProfile 0060                        status 000FD8  
             __CFG_HFOFST$ON 000000               __CFG_MCLRE$OFF 000000              __initialization 1926  
               __end_of_main 19E4     ExponentialProfile@change 0043               __CFG_PCLKEN$ON 000000  
   ExponentialProfile@target 0042                       ??_main 0046                __activetblptr 000002  
             __CFG_PLLEN$OFF 000000                       i2l1620 0090                       i2l1700 030C  
                     i2l1630 0102                       i2l1702 0350                       i2l1614 0074  
                     i2l1624 00C6                       i2l1704 0354                       i2l1642 013E  
                     i2l1634 0116                       i2l1626 00F2                       i2l1652 016E  
                     i2l1670 0202                       i2l1662 01E0                       i2l1646 0152  
                     i2l1638 012A               __CFG_WDTEN$OFF 000000                       i2l1680 0272  
                     i2l1656 01AE                       i2l1674 0242                       i2l1658 01D0  
                     i2l1692 02D0                       i2l1684 0280                       i2l1676 0264  
                     i2l1694 02F2                       i2l1688 0290                       _SSPADD 000FC8  
                     _SSPBUF 000FC9           __size_of_InitPorts 000E                    ??_InitI2C 003C  
                  ??_InitPWM 0044              _AccelerateMotor 09BE               __CFG_XINST$OFF 000000  
                     _SetPin 1846                       _Motors 0001                       ___wmul 195E  
             __CFG_STVREN$ON 000000                       clear_0 194A                 __pdataCOMRAM 0046  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
            ??_AcceleratePWM 006B           __size_of_StopMotor 0344                   __accesstop 0060  
    __end_of__initialization 1950                ___rparam_used 000001               __pcstackCOMRAM 0026  
                SetPin@value 0042      __size_of_I2C_Slave_Read 039A                    ?i2___wmul 0026  
          __end_of_InitPorts 19F2              CheckPWMOutput@i 0071      __end_of_AccelerateMotor 0E1A  
                _MinimumDuty 0023                      ?_SetPin 0042                      ?___wmul 003C  
          __end_of_StopMotor 14D8      __size_of_CheckPWMOutput 0618                   ??i2___wmul 002A  
            __CFG_USBDIV$OFF 000000                      _InitI2C 19AA                      _InitPWM 14D8  
            __CFG_PWRTEN$OFF 000000                      __Hparam 0000                      __Lparam 0000  
            __size_of_SetPin 00E0              __size_of___wmul 0026                      __pcinit 1926  
                    __ramtop 0300                      __ptext0 19CC                      __ptext1 19E4  
                    __ptext2 14D8                      __ptext3 19AA                      __ptext4 03A6  
                    __ptext5 1702                      __ptext6 1194                      __ptext7 1846  
                    __ptext8 09BE                      __ptext9 195E                    _T0CONbits 000FD5  
           ?_AccelerateMotor 0067         end_of_initialization 1950                __Lmediumconst 0000  
        i2___wmul@multiplier 0026  __size_of_ExponentialProfile 037A               _I2C_Slave_Read 0008  
                    postinc0 000FEE                      postinc1 000FE6                      postinc2 000FDE  
                  _AccelRate 0046                    _PWMEnable 0048                    _AccelType 0024  
     __end_of_I2C_Slave_Read 03A2               __end_of_SetPin 1926               __end_of___wmul 1984  
              __pidataCOMRAM 19F2               _CheckPWMOutput 03A6             i2___wmul@product 002A  
        start_initialization 1926            __size_ofi2___wmul 0026                    SetPin@pin 0043  
                  _InitPorts 19E4        __end_of_AcceleratePWM 1846              ?_I2C_Slave_Read 0026  
                   ??_SetPin 0043                     ??___wmul 0040       __end_of_CheckPWMOutput 09BE  
                  _StopMotor 1194                  __pbssCOMRAM 0001                __pcstackBANK0 0060  
                 ?_InitPorts 0026                     ?_InitI2C 0026                     ?_InitPWM 0026  
                  __pintcode 0008               StopMotor@index 0067              ?_CheckPWMOutput 0026  
                 ?_StopMotor 0067               ___wmul@product 0040                     _LATAbits 000F89  
                   _LATBbits 000F8A                     _LATCbits 000F8B               AcceleratePWM@i 006D  
                   _PIE1bits 000F9D                     i2u202_40 016C                     i2u211_44 02A4  
                   i2u203_44 0182                     i2u211_45 02A0                     i2u203_45 017E  
                   i2u205_40 01DE                     i2u206_40 0200                     i2u207_44 0216  
                   i2u207_45 0212                     _PIR1bits 000F9E                     i2u195_40 008E  
                   i2u197_40 0100             __CFG_WDTPS$32768 000000                     _PWMPause 0025  
          ___wmul@multiplier 003C         AccelerateMotor@index 0067                     i2___wmul 1984  
                   InitPWM@i 0060                     InitPWM@n 0062                     _WPUBbits 000F78  
                ??_InitPorts 003C                  _INTCON2bits 000FF1   __end_of_ExponentialProfile 1194  
           __size_of_InitI2C 0022             __size_of_InitPWM 022A     __size_of_AccelerateMotor 045C  
                   __Hrparam 0000                     __Lrparam 0000           __CFG_BOREN$SBORDIS 000000  
      i2___wmul@multiplicand 0028                  _currentByte 0022                  ??_StopMotor 0045  
                   __ptext10 0E1A                     __ptext12 1984             ??_I2C_Slave_Read 002C  
              __size_of_main 0018                     int$flags 0049    ExponentialProfile@current 0044  
                 _INTCONbits 000FF2                     intlevel2 0000                   _OSCCONbits 000FD3  
           ??_CheckPWMOutput 006F         __CFG_CPUDIV$NOCLKDIV 000000            ??_AccelerateMotor 0069  
     __size_of_AcceleratePWM 0144                  _SSPCON1bits 000FC6                  _SSPCON2bits 000FC5  
                 _AccelCount 001F  
