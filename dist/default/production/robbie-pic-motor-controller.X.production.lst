

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sun Jun  4 22:09:49 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F14K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    27  0000                     
    28                           ; Version 1.42
    29                           ; Generated 13/04/2017 GMT
    30                           ; 
    31                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F14K50 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     
    63                           	psect	idataCOMRAM
    64  00192A                     __pidataCOMRAM:
    65                           	opt stack 0
    66                           
    67                           ;initializer for _AccelRate
    68  00192A  03E8               	dw	1000
    69                           
    70                           ;initializer for _AccelType
    71  00192C  02                 	db	2
    72                           
    73                           ;initializer for _PWMEnable
    74  00192D  01                 	db	1
    75  0000                     _TMR0	set	4054
    76  0000                     _LATAbits	set	3977
    77  0000                     _LATBbits	set	3978
    78  0000                     _LATCbits	set	3979
    79  0000                     _T0CONbits	set	4053
    80  0000                     _SSPBUF	set	4041
    81  0000                     _INTCONbits	set	4082
    82  0000                     _PIE1bits	set	3997
    83  0000                     _PIR1bits	set	3998
    84  0000                     _SSPADD	set	4040
    85  0000                     _SSPCON2bits	set	4037
    86  0000                     _SSPCON1bits	set	4038
    87  0000                     _SSPSTATbits	set	4039
    88  0000                     _WPUBbits	set	3960
    89  0000                     _INTCON2bits	set	4081
    90  0000                     _OSCCONbits	set	4051
    91  0000                     _TRISC	set	3988
    92  0000                     _TRISB	set	3987
    93  0000                     _TRISA	set	3986
    94                           
    95                           ; #config settings
    96  0000                     
    97                           	psect	cinit
    98  00185C                     __pcinit:
    99                           	opt stack 0
   100  00185C                     start_initialization:
   101                           	opt stack 0
   102  00185C                     __initialization:
   103                           	opt stack 0
   104                           
   105                           ; Initialize objects allocated to COMRAM (4 bytes)
   106                           ; load TBLPTR registers with __pidataCOMRAM
   107  00185C  0E2A               	movlw	low __pidataCOMRAM
   108  00185E  6EF6               	movwf	tblptrl,c
   109  001860  0E19               	movlw	high __pidataCOMRAM
   110  001862  6EF7               	movwf	tblptrh,c
   111  001864  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   112  001866  6EF8               	movwf	tblptru,c
   113  001868  EE00  F045         	lfsr	0,__pdataCOMRAM
   114  00186C  EE10 F004          	lfsr	1,4
   115  001870                     copy_data0:
   116  001870  0009               	tblrd		*+
   117  001872  CFF5 FFEE          	movff	tablat,postinc0
   118  001876  50E5               	movf	postdec1,w,c
   119  001878  50E1               	movf	fsr1l,w,c
   120  00187A  E1FA               	bnz	copy_data0
   121                           
   122                           ; Clear objects allocated to COMRAM (36 bytes)
   123  00187C  EE00  F001         	lfsr	0,__pbssCOMRAM
   124  001880  0E24               	movlw	36
   125  001882                     clear_0:
   126  001882  6AEE               	clrf	postinc0,c
   127  001884  06E8               	decf	wreg,f,c
   128  001886  E1FD               	bnz	clear_0
   129  001888                     end_of_initialization:
   130                           	opt stack 0
   131  001888                     __end_of__initialization:
   132                           	opt stack 0
   133  001888  9049               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   134  00188A  9249               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   135  00188C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   136  00188E  6EF8               	movwf	tblptru,c
   137  001890  0100               	movlb	0
   138  001892  EF82  F00C         	goto	_main	;jump to C main() function
   139                           tblptru	equ	0xFF8
   140                           tblptrh	equ	0xFF7
   141                           tblptrl	equ	0xFF6
   142                           tablat	equ	0xFF5
   143                           postinc0	equ	0xFEE
   144                           wreg	equ	0xFE8
   145                           postdec1	equ	0xFE5
   146                           fsr1l	equ	0xFE1
   147                           
   148                           	psect	bssCOMRAM
   149  000001                     __pbssCOMRAM:
   150                           	opt stack 0
   151  000001                     _Motors:
   152                           	opt stack 0
   153  000001                     	ds	28
   154  00001D                     _i:
   155                           	opt stack 0
   156  00001D                     	ds	2
   157  00001F                     _AccelCount:
   158                           	opt stack 0
   159  00001F                     	ds	2
   160  000021                     _state:
   161                           	opt stack 0
   162  000021                     	ds	1
   163  000022                     _currentByte:
   164                           	opt stack 0
   165  000022                     	ds	1
   166  000023                     _MinimumDuty:
   167                           	opt stack 0
   168  000023                     	ds	1
   169  000024                     _PWMPause:
   170                           	opt stack 0
   171  000024                     	ds	1
   172                           tblptru	equ	0xFF8
   173                           tblptrh	equ	0xFF7
   174                           tblptrl	equ	0xFF6
   175                           tablat	equ	0xFF5
   176                           postinc0	equ	0xFEE
   177                           wreg	equ	0xFE8
   178                           postdec1	equ	0xFE5
   179                           fsr1l	equ	0xFE1
   180                           
   181                           	psect	dataCOMRAM
   182  000045                     __pdataCOMRAM:
   183                           	opt stack 0
   184  000045                     _AccelRate:
   185                           	opt stack 0
   186  000045                     	ds	2
   187  000047                     _AccelType:
   188                           	opt stack 0
   189  000047                     	ds	1
   190  000048                     _PWMEnable:
   191                           	opt stack 0
   192  000048                     	ds	1
   193                           tblptru	equ	0xFF8
   194                           tblptrh	equ	0xFF7
   195                           tblptrl	equ	0xFF6
   196                           tablat	equ	0xFF5
   197                           postinc0	equ	0xFEE
   198                           wreg	equ	0xFE8
   199                           postdec1	equ	0xFE5
   200                           fsr1l	equ	0xFE1
   201                           
   202                           	psect	cstackBANK0
   203  000060                     __pcstackBANK0:
   204                           	opt stack 0
   205  000060                     ??_ExponentialProfile:
   206                           
   207                           ; 1 bytes @ 0x0
   208  000060                     	ds	7
   209  000067                     StopMotor@index:
   210                           	opt stack 0
   211  000067                     AccelerateMotor@index:
   212                           	opt stack 0
   213                           
   214                           ; 2 bytes @ 0x7
   215  000067                     	ds	2
   216  000069                     ??_AccelerateMotor:
   217                           
   218                           ; 1 bytes @ 0x9
   219  000069                     	ds	2
   220  00006B                     ??_AcceleratePWM:
   221                           
   222                           ; 1 bytes @ 0xB
   223  00006B                     	ds	2
   224  00006D                     AcceleratePWM@i:
   225                           	opt stack 0
   226                           
   227                           ; 2 bytes @ 0xD
   228  00006D                     	ds	2
   229  00006F                     ??_CheckPWMOutput:
   230                           
   231                           ; 1 bytes @ 0xF
   232  00006F                     	ds	2
   233  000071                     CheckPWMOutput@i:
   234                           	opt stack 0
   235                           
   236                           ; 2 bytes @ 0x11
   237  000071                     	ds	2
   238                           tblptru	equ	0xFF8
   239                           tblptrh	equ	0xFF7
   240                           tblptrl	equ	0xFF6
   241                           tablat	equ	0xFF5
   242                           postinc0	equ	0xFEE
   243                           wreg	equ	0xFE8
   244                           postdec1	equ	0xFE5
   245                           fsr1l	equ	0xFE1
   246                           
   247                           	psect	cstackCOMRAM
   248  000025                     __pcstackCOMRAM:
   249                           	opt stack 0
   250  000025                     ?i2___wmul:
   251                           	opt stack 0
   252  000025                     i2___wmul@multiplier:
   253                           	opt stack 0
   254                           
   255                           ; 2 bytes @ 0x0
   256  000025                     	ds	2
   257  000027                     i2___wmul@multiplicand:
   258                           	opt stack 0
   259                           
   260                           ; 2 bytes @ 0x2
   261  000027                     	ds	2
   262  000029                     i2___wmul@product:
   263                           	opt stack 0
   264                           
   265                           ; 2 bytes @ 0x4
   266  000029                     	ds	2
   267  00002B                     ??_I2C_Slave_Read:
   268                           
   269                           ; 1 bytes @ 0x6
   270  00002B                     	ds	16
   271  00003B                     ?___wmul:
   272                           	opt stack 0
   273  00003B                     ___wmul@multiplier:
   274                           	opt stack 0
   275                           
   276                           ; 2 bytes @ 0x16
   277  00003B                     	ds	2
   278  00003D                     ___wmul@multiplicand:
   279                           	opt stack 0
   280                           
   281                           ; 2 bytes @ 0x18
   282  00003D                     	ds	2
   283  00003F                     ___wmul@product:
   284                           	opt stack 0
   285                           
   286                           ; 2 bytes @ 0x1A
   287  00003F                     	ds	2
   288  000041                     SetPin@value:
   289                           	opt stack 0
   290  000041                     ExponentialProfile@target:
   291                           	opt stack 0
   292  000041                     InitPWM@n:
   293                           	opt stack 0
   294                           
   295                           ; 2 bytes @ 0x1C
   296  000041                     	ds	1
   297  000042                     SetPin@pin:
   298                           	opt stack 0
   299  000042                     ExponentialProfile@change:
   300                           	opt stack 0
   301                           
   302                           ; 1 bytes @ 0x1D
   303  000042                     	ds	1
   304  000043                     ExponentialProfile@current:
   305                           	opt stack 0
   306                           
   307                           ; 1 bytes @ 0x1E
   308  000043                     	ds	1
   309  000044                     ??_StopMotor:
   310                           
   311                           ; 1 bytes @ 0x1F
   312  000044                     	ds	1
   313  000045                     tblptru	equ	0xFF8
   314                           tblptrh	equ	0xFF7
   315                           tblptrl	equ	0xFF6
   316                           tablat	equ	0xFF5
   317                           postinc0	equ	0xFEE
   318                           wreg	equ	0xFE8
   319                           postdec1	equ	0xFE5
   320                           fsr1l	equ	0xFE1
   321                           
   322                           ; 1 bytes @ 0x20
   323 ;;
   324 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   325 ;;
   326 ;; *************** function _main *****************
   327 ;; Defined at:
   328 ;;		line 115 in file "main.c"
   329 ;; Parameters:    Size  Location     Type
   330 ;;		None
   331 ;; Auto vars:     Size  Location     Type
   332 ;;		None
   333 ;; Return value:  Size  Location     Type
   334 ;;                  1    wreg      void 
   335 ;; Registers used:
   336 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   337 ;; Tracked objects:
   338 ;;		On entry : 0/0
   339 ;;		On exit  : 0/0
   340 ;;		Unchanged: 0/0
   341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   342 ;;      Params:         0       0       0       0
   343 ;;      Locals:         0       0       0       0
   344 ;;      Temps:          0       0       0       0
   345 ;;      Totals:         0       0       0       0
   346 ;;Total ram usage:        0 bytes
   347 ;; Hardware stack levels required when called:    6
   348 ;; This function calls:
   349 ;;		_CheckPWMOutput
   350 ;;		_InitI2C
   351 ;;		_InitPWM
   352 ;;		_InitPorts
   353 ;; This function is called by:
   354 ;;		Startup code after reset
   355 ;; This function uses a non-reentrant model
   356 ;;
   357                           
   358                           	psect	text0
   359  001904                     __ptext0:
   360                           	opt stack 0
   361  001904                     _main:
   362                           	opt stack 25
   363                           
   364                           ;main.c: 117: OSCCONbits.IRCF = 0b111;
   365                           
   366                           ;incstack = 0
   367  001904  88D3               	bsf	4051,4,c	;volatile
   368  001906  8AD3               	bsf	4051,5,c	;volatile
   369  001908  8CD3               	bsf	4051,6,c	;volatile
   370                           
   371                           ;main.c: 120: InitPorts();
   372  00190A  EC8E  F00C         	call	_InitPorts	;wreg free
   373                           
   374                           ;main.c: 121: InitI2C();
   375  00190E  EC71  F00C         	call	_InitI2C	;wreg free
   376                           
   377                           ;main.c: 122: InitPWM();
   378  001912  EC54  F00A         	call	_InitPWM	;wreg free
   379  001916                     l1932:
   380                           
   381                           ;main.c: 127: CheckPWMOutput();
   382  001916  ECCE  F001         	call	_CheckPWMOutput	;wreg free
   383  00191A  D7FD               	goto	l1932
   384  00191C                     __end_of_main:
   385                           	opt stack 0
   386                           tblptru	equ	0xFF8
   387                           tblptrh	equ	0xFF7
   388                           tblptrl	equ	0xFF6
   389                           tablat	equ	0xFF5
   390                           postinc0	equ	0xFEE
   391                           wreg	equ	0xFE8
   392                           postdec1	equ	0xFE5
   393                           fsr1l	equ	0xFE1
   394                           
   395 ;; *************** function _InitPorts *****************
   396 ;; Defined at:
   397 ;;		line 106 in file "main.c"
   398 ;; Parameters:    Size  Location     Type
   399 ;;		None
   400 ;; Auto vars:     Size  Location     Type
   401 ;;		None
   402 ;; Return value:  Size  Location     Type
   403 ;;                  1    wreg      void 
   404 ;; Registers used:
   405 ;;		wreg, status,2
   406 ;; Tracked objects:
   407 ;;		On entry : 0/0
   408 ;;		On exit  : 0/0
   409 ;;		Unchanged: 0/0
   410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   411 ;;      Params:         0       0       0       0
   412 ;;      Locals:         0       0       0       0
   413 ;;      Temps:          0       0       0       0
   414 ;;      Totals:         0       0       0       0
   415 ;;Total ram usage:        0 bytes
   416 ;; Hardware stack levels used:    1
   417 ;; Hardware stack levels required when called:    2
   418 ;; This function calls:
   419 ;;		Nothing
   420 ;; This function is called by:
   421 ;;		_main
   422 ;; This function uses a non-reentrant model
   423 ;;
   424                           
   425                           	psect	text1
   426  00191C                     __ptext1:
   427                           	opt stack 0
   428  00191C                     _InitPorts:
   429                           	opt stack 28
   430                           
   431                           ;main.c: 108: TRISA = 0x00;
   432                           
   433                           ;incstack = 0
   434  00191C  0E00               	movlw	0
   435  00191E  6E92               	movwf	3986,c	;volatile
   436                           
   437                           ;main.c: 110: TRISB = 0b01010000;
   438  001920  0E50               	movlw	80
   439  001922  6E93               	movwf	3987,c	;volatile
   440                           
   441                           ;main.c: 112: TRISC = 0x00;
   442  001924  0E00               	movlw	0
   443  001926  6E94               	movwf	3988,c	;volatile
   444  001928  0012               	return		;funcret
   445  00192A                     __end_of_InitPorts:
   446                           	opt stack 0
   447                           tblptru	equ	0xFF8
   448                           tblptrh	equ	0xFF7
   449                           tblptrl	equ	0xFF6
   450                           tablat	equ	0xFF5
   451                           postinc0	equ	0xFEE
   452                           wreg	equ	0xFE8
   453                           postdec1	equ	0xFE5
   454                           fsr1l	equ	0xFE1
   455                           
   456 ;; *************** function _InitPWM *****************
   457 ;; Defined at:
   458 ;;		line 12 in file "pwm.c"
   459 ;; Parameters:    Size  Location     Type
   460 ;;		None
   461 ;; Auto vars:     Size  Location     Type
   462 ;;  n               2   28[COMRAM] int 
   463 ;; Return value:  Size  Location     Type
   464 ;;                  1    wreg      void 
   465 ;; Registers used:
   466 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   467 ;; Tracked objects:
   468 ;;		On entry : 0/0
   469 ;;		On exit  : 0/0
   470 ;;		Unchanged: 0/0
   471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   472 ;;      Params:         0       0       0       0
   473 ;;      Locals:         2       0       0       0
   474 ;;      Temps:          0       0       0       0
   475 ;;      Totals:         2       0       0       0
   476 ;;Total ram usage:        2 bytes
   477 ;; Hardware stack levels used:    1
   478 ;; Hardware stack levels required when called:    3
   479 ;; This function calls:
   480 ;;		___wmul
   481 ;; This function is called by:
   482 ;;		_main
   483 ;; This function uses a non-reentrant model
   484 ;;
   485                           
   486                           	psect	text2
   487  0014A8                     __ptext2:
   488                           	opt stack 0
   489  0014A8                     _InitPWM:
   490                           	opt stack 27
   491                           
   492                           ;pwm.c: 14: T0CONbits.T0PS = 0b011;
   493                           
   494                           ;incstack = 0
   495  0014A8  50D5               	movf	4053,w,c	;volatile
   496  0014AA  0BF8               	andlw	-8
   497  0014AC  0903               	iorlw	3
   498  0014AE  6ED5               	movwf	4053,c	;volatile
   499                           
   500                           ;pwm.c: 16: T0CONbits.PSA = 0;
   501  0014B0  96D5               	bcf	4053,3,c	;volatile
   502                           
   503                           ;pwm.c: 18: T0CONbits.T0CS = 0;
   504  0014B2  9AD5               	bcf	4053,5,c	;volatile
   505                           
   506                           ;pwm.c: 20: T0CONbits.T08BIT = 1;
   507  0014B4  8CD5               	bsf	4053,6,c	;volatile
   508                           
   509                           ;pwm.c: 22: T0CONbits.TMR0ON = 1;
   510  0014B6  8ED5               	bsf	4053,7,c	;volatile
   511                           
   512                           ;pwm.c: 25: int n;
   513                           ;pwm.c: 26: for (n = 0; n < 4; n++) {
   514  0014B8  0E00               	movlw	0
   515  0014BA  6E42               	movwf	InitPWM@n+1,c
   516  0014BC  0E00               	movlw	0
   517  0014BE  6E41               	movwf	InitPWM@n,c
   518  0014C0  BE42               	btfsc	InitPWM@n+1,7,c
   519  0014C2  D008               	goto	l1846
   520  0014C4  5042               	movf	InitPWM@n+1,w,c
   521  0014C6  E105               	bnz	u2610
   522  0014C8  0E04               	movlw	4
   523  0014CA  5C41               	subwf	InitPWM@n,w,c
   524  0014CC  B0D8               	btfsc	status,0,c
   525  0014CE  D09B               	goto	l1852
   526  0014D0  D001               	goto	l1846
   527  0014D2                     u2610:
   528  0014D2  D099               	goto	l1852
   529  0014D4                     l1846:
   530                           
   531                           ;pwm.c: 27: Motors[n].state = (unsigned char)0;
   532  0014D4  C041  F03B         	movff	InitPWM@n,___wmul@multiplier
   533  0014D8  C042  F03C         	movff	InitPWM@n+1,___wmul@multiplier+1
   534  0014DC  0E00               	movlw	0
   535  0014DE  6E3E               	movwf	___wmul@multiplicand+1,c
   536  0014E0  0E07               	movlw	7
   537  0014E2  6E3D               	movwf	___wmul@multiplicand,c
   538  0014E4  EC4B  F00C         	call	___wmul	;wreg free
   539  0014E8  0E01               	movlw	low _Motors
   540  0014EA  243B               	addwf	?___wmul,w,c
   541  0014EC  6ED9               	movwf	fsr2l,c
   542  0014EE  0E00               	movlw	high _Motors
   543  0014F0  203C               	addwfc	?___wmul+1,w,c
   544  0014F2  6EDA               	movwf	fsr2h,c
   545  0014F4  90DF               	bcf	indf2,0,c
   546                           
   547                           ;pwm.c: 28: Motors[n].paused = (unsigned char)0;
   548  0014F6  C041  F03B         	movff	InitPWM@n,___wmul@multiplier
   549  0014FA  C042  F03C         	movff	InitPWM@n+1,___wmul@multiplier+1
   550  0014FE  0E00               	movlw	0
   551  001500  6E3E               	movwf	___wmul@multiplicand+1,c
   552  001502  0E07               	movlw	7
   553  001504  6E3D               	movwf	___wmul@multiplicand,c
   554  001506  EC4B  F00C         	call	___wmul	;wreg free
   555  00150A  0E01               	movlw	low _Motors
   556  00150C  243B               	addwf	?___wmul,w,c
   557  00150E  6ED9               	movwf	fsr2l,c
   558  001510  0E00               	movlw	high _Motors
   559  001512  203C               	addwfc	?___wmul+1,w,c
   560  001514  6EDA               	movwf	fsr2h,c
   561  001516  94DF               	bcf	indf2,2,c
   562                           
   563                           ;pwm.c: 29: Motors[n].enabled = (unsigned char)1;
   564  001518  C041  F03B         	movff	InitPWM@n,___wmul@multiplier
   565  00151C  C042  F03C         	movff	InitPWM@n+1,___wmul@multiplier+1
   566  001520  0E00               	movlw	0
   567  001522  6E3E               	movwf	___wmul@multiplicand+1,c
   568  001524  0E07               	movlw	7
   569  001526  6E3D               	movwf	___wmul@multiplicand,c
   570  001528  EC4B  F00C         	call	___wmul	;wreg free
   571  00152C  0E01               	movlw	low _Motors
   572  00152E  243B               	addwf	?___wmul,w,c
   573  001530  6ED9               	movwf	fsr2l,c
   574  001532  0E00               	movlw	high _Motors
   575  001534  203C               	addwfc	?___wmul+1,w,c
   576  001536  6EDA               	movwf	fsr2h,c
   577  001538  82DF               	bsf	indf2,1,c
   578                           
   579                           ;pwm.c: 30: Motors[n].direction = (unsigned char)1;
   580  00153A  C041  F03B         	movff	InitPWM@n,___wmul@multiplier
   581  00153E  C042  F03C         	movff	InitPWM@n+1,___wmul@multiplier+1
   582  001542  0E00               	movlw	0
   583  001544  6E3E               	movwf	___wmul@multiplicand+1,c
   584  001546  0E07               	movlw	7
   585  001548  6E3D               	movwf	___wmul@multiplicand,c
   586  00154A  EC4B  F00C         	call	___wmul	;wreg free
   587  00154E  0E01               	movlw	low _Motors
   588  001550  243B               	addwf	?___wmul,w,c
   589  001552  6ED9               	movwf	fsr2l,c
   590  001554  0E00               	movlw	high _Motors
   591  001556  203C               	addwfc	?___wmul+1,w,c
   592  001558  6EDA               	movwf	fsr2h,c
   593  00155A  86DF               	bsf	indf2,3,c
   594                           
   595                           ;pwm.c: 31: Motors[n].targetDirection = (unsigned char)1;
   596  00155C  C041  F03B         	movff	InitPWM@n,___wmul@multiplier
   597  001560  C042  F03C         	movff	InitPWM@n+1,___wmul@multiplier+1
   598  001564  0E00               	movlw	0
   599  001566  6E3E               	movwf	___wmul@multiplicand+1,c
   600  001568  0E07               	movlw	7
   601  00156A  6E3D               	movwf	___wmul@multiplicand,c
   602  00156C  EC4B  F00C         	call	___wmul	;wreg free
   603  001570  0E01               	movlw	low _Motors
   604  001572  243B               	addwf	?___wmul,w,c
   605  001574  6ED9               	movwf	fsr2l,c
   606  001576  0E00               	movlw	high _Motors
   607  001578  203C               	addwfc	?___wmul+1,w,c
   608  00157A  6EDA               	movwf	fsr2h,c
   609  00157C  88DF               	bsf	indf2,4,c
   610                           
   611                           ;pwm.c: 32: Motors[n].duty = (unsigned char)0;
   612  00157E  C041  F03B         	movff	InitPWM@n,___wmul@multiplier
   613  001582  C042  F03C         	movff	InitPWM@n+1,___wmul@multiplier+1
   614  001586  0E00               	movlw	0
   615  001588  6E3E               	movwf	___wmul@multiplicand+1,c
   616  00158A  0E07               	movlw	7
   617  00158C  6E3D               	movwf	___wmul@multiplicand,c
   618  00158E  EC4B  F00C         	call	___wmul	;wreg free
   619  001592  0E04               	movlw	4
   620  001594  263B               	addwf	?___wmul,f,c
   621  001596  0E00               	movlw	0
   622  001598  223C               	addwfc	?___wmul+1,f,c
   623  00159A  0E01               	movlw	low _Motors
   624  00159C  243B               	addwf	?___wmul,w,c
   625  00159E  6ED9               	movwf	fsr2l,c
   626  0015A0  0E00               	movlw	high _Motors
   627  0015A2  203C               	addwfc	?___wmul+1,w,c
   628  0015A4  6EDA               	movwf	fsr2h,c
   629  0015A6  0E00               	movlw	0
   630  0015A8  6EDF               	movwf	indf2,c
   631                           
   632                           ;pwm.c: 33: Motors[n].target = (unsigned char)0;
   633  0015AA  C041  F03B         	movff	InitPWM@n,___wmul@multiplier
   634  0015AE  C042  F03C         	movff	InitPWM@n+1,___wmul@multiplier+1
   635  0015B2  0E00               	movlw	0
   636  0015B4  6E3E               	movwf	___wmul@multiplicand+1,c
   637  0015B6  0E07               	movlw	7
   638  0015B8  6E3D               	movwf	___wmul@multiplicand,c
   639  0015BA  EC4B  F00C         	call	___wmul	;wreg free
   640  0015BE  0E05               	movlw	5
   641  0015C0  263B               	addwf	?___wmul,f,c
   642  0015C2  0E00               	movlw	0
   643  0015C4  223C               	addwfc	?___wmul+1,f,c
   644  0015C6  0E01               	movlw	low _Motors
   645  0015C8  243B               	addwf	?___wmul,w,c
   646  0015CA  6ED9               	movwf	fsr2l,c
   647  0015CC  0E00               	movlw	high _Motors
   648  0015CE  203C               	addwfc	?___wmul+1,w,c
   649  0015D0  6EDA               	movwf	fsr2h,c
   650  0015D2  0E00               	movlw	0
   651  0015D4  6EDF               	movwf	indf2,c
   652                           
   653                           ;pwm.c: 34: Motors[n].motorType = (unsigned char)0;
   654  0015D6  C041  F03B         	movff	InitPWM@n,___wmul@multiplier
   655  0015DA  C042  F03C         	movff	InitPWM@n+1,___wmul@multiplier+1
   656  0015DE  0E00               	movlw	0
   657  0015E0  6E3E               	movwf	___wmul@multiplicand+1,c
   658  0015E2  0E07               	movlw	7
   659  0015E4  6E3D               	movwf	___wmul@multiplicand,c
   660  0015E6  EC4B  F00C         	call	___wmul	;wreg free
   661  0015EA  0E01               	movlw	low _Motors
   662  0015EC  243B               	addwf	?___wmul,w,c
   663  0015EE  6ED9               	movwf	fsr2l,c
   664  0015F0  0E00               	movlw	high _Motors
   665  0015F2  203C               	addwfc	?___wmul+1,w,c
   666  0015F4  6EDA               	movwf	fsr2h,c
   667  0015F6  9ADF               	bcf	indf2,5,c
   668  0015F8  4A41               	infsnz	InitPWM@n,f,c
   669  0015FA  2A42               	incf	InitPWM@n+1,f,c
   670  0015FC  BE42               	btfsc	InitPWM@n+1,7,c
   671  0015FE  D76A               	goto	l1846
   672  001600  5042               	movf	InitPWM@n+1,w,c
   673  001602  E101               	bnz	l1852
   674  001604  D761               	goto	L1
   675  001606                     l1852:
   676                           
   677                           ;pwm.c: 35: }
   678                           ;pwm.c: 38: Motors[0].PWMPin = 0;
   679  001606  0E00               	movlw	0
   680  001608  6E02               	movwf	_Motors+1,c
   681                           
   682                           ;pwm.c: 39: Motors[0].dirPin = 1;
   683  00160A  0E01               	movlw	1
   684  00160C  6E03               	movwf	_Motors+2,c
   685                           
   686                           ;pwm.c: 40: Motors[0].cdirPin = 2;
   687  00160E  0E02               	movlw	2
   688  001610  6E04               	movwf	_Motors+3,c
   689                           
   690                           ;pwm.c: 42: Motors[1].PWMPin = 3;
   691  001612  0E03               	movlw	3
   692  001614  6E09               	movwf	_Motors+8,c
   693                           
   694                           ;pwm.c: 43: Motors[1].dirPin = 4;
   695  001616  0E04               	movlw	4
   696  001618  6E0A               	movwf	_Motors+9,c
   697                           
   698                           ;pwm.c: 44: Motors[1].cdirPin = 5;
   699  00161A  0E05               	movlw	5
   700  00161C  6E0B               	movwf	_Motors+10,c
   701                           
   702                           ;pwm.c: 46: Motors[2].PWMPin = 6;
   703  00161E  0E06               	movlw	6
   704  001620  6E10               	movwf	_Motors+15,c
   705                           
   706                           ;pwm.c: 47: Motors[2].dirPin = 7;
   707  001622  0E07               	movlw	7
   708  001624  6E11               	movwf	_Motors+16,c
   709                           
   710                           ;pwm.c: 48: Motors[2].cdirPin = 9;
   711  001626  0E09               	movlw	9
   712  001628  6E12               	movwf	_Motors+17,c
   713                           
   714                           ;pwm.c: 50: Motors[3].PWMPin = 10;
   715  00162A  0E0A               	movlw	10
   716  00162C  6E17               	movwf	_Motors+22,c
   717                           
   718                           ;pwm.c: 51: Motors[3].dirPin = 11;
   719  00162E  0E0B               	movlw	11
   720  001630  6E18               	movwf	_Motors+23,c
   721                           
   722                           ;pwm.c: 52: Motors[3].cdirPin = 8;
   723  001632  0E08               	movlw	8
   724  001634  6E19               	movwf	_Motors+24,c
   725  001636  0012               	return		;funcret
   726  001638                     __end_of_InitPWM:
   727                           	opt stack 0
   728                           tblptru	equ	0xFF8
   729                           tblptrh	equ	0xFF7
   730                           tblptrl	equ	0xFF6
   731                           tablat	equ	0xFF5
   732                           postinc0	equ	0xFEE
   733                           wreg	equ	0xFE8
   734                           postdec1	equ	0xFE5
   735                           fsr1l	equ	0xFE1
   736                           indf2	equ	0xFDF
   737                           fsr2h	equ	0xFDA
   738                           fsr2l	equ	0xFD9
   739                           status	equ	0xFD8
   740                           
   741 ;; *************** function _InitI2C *****************
   742 ;; Defined at:
   743 ;;		line 8 in file "i2c.c"
   744 ;; Parameters:    Size  Location     Type
   745 ;;		None
   746 ;; Auto vars:     Size  Location     Type
   747 ;;		None
   748 ;; Return value:  Size  Location     Type
   749 ;;                  1    wreg      void 
   750 ;; Registers used:
   751 ;;		wreg, status,2
   752 ;; Tracked objects:
   753 ;;		On entry : 0/0
   754 ;;		On exit  : 0/0
   755 ;;		Unchanged: 0/0
   756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   757 ;;      Params:         0       0       0       0
   758 ;;      Locals:         0       0       0       0
   759 ;;      Temps:          0       0       0       0
   760 ;;      Totals:         0       0       0       0
   761 ;;Total ram usage:        0 bytes
   762 ;; Hardware stack levels used:    1
   763 ;; Hardware stack levels required when called:    2
   764 ;; This function calls:
   765 ;;		Nothing
   766 ;; This function is called by:
   767 ;;		_main
   768 ;; This function uses a non-reentrant model
   769 ;;
   770                           
   771                           	psect	text3
   772  0018E2                     __ptext3:
   773                           	opt stack 0
   774  0018E2                     _InitI2C:
   775                           	opt stack 28
   776                           
   777                           ;i2c.c: 10: INTCON2bits.NOT_RABPU = 0;
   778                           
   779                           ;incstack = 0
   780  0018E2  9EF1               	bcf	intcon2,7,c	;volatile
   781                           
   782                           ;i2c.c: 12: WPUBbits.WPUB4 = 1;
   783  0018E4  8878               	bsf	3960,4,c	;volatile
   784                           
   785                           ;i2c.c: 13: WPUBbits.WPUB6 = 1;
   786  0018E6  8C78               	bsf	3960,6,c	;volatile
   787                           
   788                           ;i2c.c: 16: SSPSTATbits.SMP = 1;
   789  0018E8  8EC7               	bsf	4039,7,c	;volatile
   790                           
   791                           ;i2c.c: 19: SSPCON1bits.SSPM = 0b0110;
   792  0018EA  50C6               	movf	4038,w,c	;volatile
   793  0018EC  0BF0               	andlw	-16
   794  0018EE  0906               	iorlw	6
   795  0018F0  6EC6               	movwf	4038,c	;volatile
   796                           
   797                           ;i2c.c: 21: SSPCON2bits.SEN = 1;
   798  0018F2  80C5               	bsf	4037,0,c	;volatile
   799                           
   800                           ;i2c.c: 30: SSPADD = 0x23<<1;
   801  0018F4  0E46               	movlw	70
   802  0018F6  6EC8               	movwf	4040,c	;volatile
   803                           
   804                           ;i2c.c: 33: PIR1bits.SSPIF = 0;
   805  0018F8  969E               	bcf	3998,3,c	;volatile
   806                           
   807                           ;i2c.c: 35: PIE1bits.SSPIE = 1;
   808  0018FA  869D               	bsf	3997,3,c	;volatile
   809                           
   810                           ;i2c.c: 38: INTCONbits.GIE = 1;
   811  0018FC  8EF2               	bsf	intcon,7,c	;volatile
   812                           
   813                           ;i2c.c: 40: INTCONbits.PEIE = 1;
   814  0018FE  8CF2               	bsf	intcon,6,c	;volatile
   815                           
   816                           ;i2c.c: 43: SSPCON1bits.SSPEN = 1;
   817  001900  8AC6               	bsf	4038,5,c	;volatile
   818  001902  0012               	return		;funcret
   819  001904                     __end_of_InitI2C:
   820                           	opt stack 0
   821                           tblptru	equ	0xFF8
   822                           tblptrh	equ	0xFF7
   823                           tblptrl	equ	0xFF6
   824                           tablat	equ	0xFF5
   825                           intcon	equ	0xFF2
   826                           intcon2	equ	0xFF1
   827                           postinc0	equ	0xFEE
   828                           wreg	equ	0xFE8
   829                           postdec1	equ	0xFE5
   830                           fsr1l	equ	0xFE1
   831                           indf2	equ	0xFDF
   832                           fsr2h	equ	0xFDA
   833                           fsr2l	equ	0xFD9
   834                           status	equ	0xFD8
   835                           
   836 ;; *************** function _CheckPWMOutput *****************
   837 ;; Defined at:
   838 ;;		line 254 in file "pwm.c"
   839 ;; Parameters:    Size  Location     Type
   840 ;;		None
   841 ;; Auto vars:     Size  Location     Type
   842 ;;  i               2   17[BANK0 ] int 
   843 ;; Return value:  Size  Location     Type
   844 ;;                  1    wreg      void 
   845 ;; Registers used:
   846 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   847 ;; Tracked objects:
   848 ;;		On entry : 0/0
   849 ;;		On exit  : 0/0
   850 ;;		Unchanged: 0/0
   851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   852 ;;      Params:         0       0       0       0
   853 ;;      Locals:         0       2       0       0
   854 ;;      Temps:          0       2       0       0
   855 ;;      Totals:         0       4       0       0
   856 ;;Total ram usage:        4 bytes
   857 ;; Hardware stack levels used:    1
   858 ;; Hardware stack levels required when called:    5
   859 ;; This function calls:
   860 ;;		_AcceleratePWM
   861 ;;		_SetPin
   862 ;;		___wmul
   863 ;; This function is called by:
   864 ;;		_main
   865 ;; This function uses a non-reentrant model
   866 ;;
   867                           
   868                           	psect	text4
   869  00039C                     __ptext4:
   870                           	opt stack 0
   871  00039C                     _CheckPWMOutput:
   872                           	opt stack 25
   873                           
   874                           ;pwm.c: 255: int i;
   875                           ;pwm.c: 256: for (i = 0; i < 4; i++) {
   876                           
   877                           ;incstack = 0
   878  00039C  0E00               	movlw	0
   879  00039E  0100               	movlb	0	; () banked
   880  0003A0  6F72               	movwf	(CheckPWMOutput@i+1)& (0+255),b
   881  0003A2  0E00               	movlw	0
   882  0003A4  6F71               	movwf	CheckPWMOutput@i& (0+255),b
   883                           
   884                           ; BSR set to: 0
   885  0003A6  0100               	movlb	0	; () banked
   886  0003A8  BF72               	btfsc	(CheckPWMOutput@i+1)& (0+255),7,b
   887  0003AA  D00A               	goto	l1860
   888  0003AC  0100               	movlb	0	; () banked
   889  0003AE  5172               	movf	(CheckPWMOutput@i+1)& (0+255),w,b
   890  0003B0  E106               	bnz	u2630
   891  0003B2  0E04               	movlw	4
   892  0003B4  0100               	movlb	0	; () banked
   893  0003B6  5D71               	subwf	CheckPWMOutput@i& (0+255),w,b
   894  0003B8  B0D8               	btfsc	status,0,c
   895  0003BA  D2EC               	goto	l1918
   896  0003BC  D001               	goto	l1860
   897  0003BE                     u2630:
   898                           
   899                           ; BSR set to: 0
   900  0003BE  D2EA               	goto	l1918
   901  0003C0                     l1860:
   902                           
   903                           ; BSR set to: 0
   904                           ;pwm.c: 257: if (PWMEnable && Motors[i].enabled) {
   905  0003C0  5048               	movf	_PWMEnable,w,c
   906  0003C2  B4D8               	btfsc	status,2,c
   907  0003C4  D2A1               	goto	l1910
   908                           
   909                           ; BSR set to: 0
   910  0003C6  C071  F03B         	movff	CheckPWMOutput@i,___wmul@multiplier
   911  0003CA  C072  F03C         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
   912  0003CE  0E00               	movlw	0
   913  0003D0  6E3E               	movwf	___wmul@multiplicand+1,c
   914  0003D2  0E07               	movlw	7
   915  0003D4  6E3D               	movwf	___wmul@multiplicand,c
   916  0003D6  EC4B  F00C         	call	___wmul	;wreg free
   917  0003DA  0E01               	movlw	low _Motors
   918  0003DC  243B               	addwf	?___wmul,w,c
   919  0003DE  6ED9               	movwf	fsr2l,c
   920  0003E0  0E00               	movlw	high _Motors
   921  0003E2  203C               	addwfc	?___wmul+1,w,c
   922  0003E4  6EDA               	movwf	fsr2h,c
   923  0003E6  A2DF               	btfss	indf2,1,c
   924  0003E8  D28F               	goto	l1910
   925                           
   926                           ;pwm.c: 258: if (Motors[i].motorType) {
   927  0003EA  C071  F03B         	movff	CheckPWMOutput@i,___wmul@multiplier
   928  0003EE  C072  F03C         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
   929  0003F2  0E00               	movlw	0
   930  0003F4  6E3E               	movwf	___wmul@multiplicand+1,c
   931  0003F6  0E07               	movlw	7
   932  0003F8  6E3D               	movwf	___wmul@multiplicand,c
   933  0003FA  EC4B  F00C         	call	___wmul	;wreg free
   934  0003FE  0E01               	movlw	low _Motors
   935  000400  243B               	addwf	?___wmul,w,c
   936  000402  6ED9               	movwf	fsr2l,c
   937  000404  0E00               	movlw	high _Motors
   938  000406  203C               	addwfc	?___wmul+1,w,c
   939  000408  6EDA               	movwf	fsr2h,c
   940  00040A  AADF               	btfss	indf2,5,c
   941  00040C  D1C5               	goto	l1898
   942                           
   943                           ;pwm.c: 259: if (TMR0 < Motors[i].duty && Motors[i].state == 0 && Motors[i].servoCount <
      +                           19) {
   944  00040E  C071  F03B         	movff	CheckPWMOutput@i,___wmul@multiplier
   945  000412  C072  F03C         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
   946  000416  0E00               	movlw	0
   947  000418  6E3E               	movwf	___wmul@multiplicand+1,c
   948  00041A  0E07               	movlw	7
   949  00041C  6E3D               	movwf	___wmul@multiplicand,c
   950  00041E  EC4B  F00C         	call	___wmul	;wreg free
   951  000422  0E04               	movlw	4
   952  000424  263B               	addwf	?___wmul,f,c
   953  000426  0E00               	movlw	0
   954  000428  223C               	addwfc	?___wmul+1,f,c
   955  00042A  0E01               	movlw	low _Motors
   956  00042C  243B               	addwf	?___wmul,w,c
   957  00042E  6ED9               	movwf	fsr2l,c
   958  000430  0E00               	movlw	high _Motors
   959  000432  203C               	addwfc	?___wmul+1,w,c
   960  000434  6EDA               	movwf	fsr2h,c
   961  000436  50DF               	movf	indf2,w,c
   962  000438  0100               	movlb	0	; () banked
   963  00043A  6F6F               	movwf	??_CheckPWMOutput& (0+255),b
   964  00043C  0100               	movlb	0	; () banked
   965  00043E  516F               	movf	??_CheckPWMOutput& (0+255),w,b
   966  000440  5CD6               	subwf	4054,w,c	;volatile
   967  000442  0E00               	movlw	0
   968  000444  58D7               	subwfb	4055,w,c	;volatile
   969  000446  B0D8               	btfsc	status,0,c
   970  000448  D050               	goto	l1874
   971                           
   972                           ; BSR set to: 0
   973  00044A  C071  F03B         	movff	CheckPWMOutput@i,___wmul@multiplier
   974  00044E  C072  F03C         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
   975  000452  0E00               	movlw	0
   976  000454  6E3E               	movwf	___wmul@multiplicand+1,c
   977  000456  0E07               	movlw	7
   978  000458  6E3D               	movwf	___wmul@multiplicand,c
   979  00045A  EC4B  F00C         	call	___wmul	;wreg free
   980  00045E  0E01               	movlw	low _Motors
   981  000460  243B               	addwf	?___wmul,w,c
   982  000462  6ED9               	movwf	fsr2l,c
   983  000464  0E00               	movlw	high _Motors
   984  000466  203C               	addwfc	?___wmul+1,w,c
   985  000468  6EDA               	movwf	fsr2h,c
   986  00046A  B0DF               	btfsc	indf2,0,c
   987  00046C  D03E               	goto	l1874
   988  00046E  C071  F03B         	movff	CheckPWMOutput@i,___wmul@multiplier
   989  000472  C072  F03C         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
   990  000476  0E00               	movlw	0
   991  000478  6E3E               	movwf	___wmul@multiplicand+1,c
   992  00047A  0E07               	movlw	7
   993  00047C  6E3D               	movwf	___wmul@multiplicand,c
   994  00047E  EC4B  F00C         	call	___wmul	;wreg free
   995  000482  0E06               	movlw	6
   996  000484  263B               	addwf	?___wmul,f,c
   997  000486  0E00               	movlw	0
   998  000488  223C               	addwfc	?___wmul+1,f,c
   999  00048A  0E01               	movlw	low _Motors
  1000  00048C  243B               	addwf	?___wmul,w,c
  1001  00048E  6ED9               	movwf	fsr2l,c
  1002  000490  0E00               	movlw	high _Motors
  1003  000492  203C               	addwfc	?___wmul+1,w,c
  1004  000494  6EDA               	movwf	fsr2h,c
  1005  000496  0E13               	movlw	19
  1006  000498  60DF               	cpfslt	indf2,c
  1007  00049A  D027               	goto	l1874
  1008                           
  1009                           ;pwm.c: 260: Motors[i].servoCount++;
  1010  00049C  C071  F03B         	movff	CheckPWMOutput@i,___wmul@multiplier
  1011  0004A0  C072  F03C         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1012  0004A4  0E00               	movlw	0
  1013  0004A6  6E3E               	movwf	___wmul@multiplicand+1,c
  1014  0004A8  0E07               	movlw	7
  1015  0004AA  6E3D               	movwf	___wmul@multiplicand,c
  1016  0004AC  EC4B  F00C         	call	___wmul	;wreg free
  1017  0004B0  0E06               	movlw	6
  1018  0004B2  263B               	addwf	?___wmul,f,c
  1019  0004B4  0E00               	movlw	0
  1020  0004B6  223C               	addwfc	?___wmul+1,f,c
  1021  0004B8  0E01               	movlw	low _Motors
  1022  0004BA  243B               	addwf	?___wmul,w,c
  1023  0004BC  6ED9               	movwf	fsr2l,c
  1024  0004BE  0E00               	movlw	high _Motors
  1025  0004C0  203C               	addwfc	?___wmul+1,w,c
  1026  0004C2  6EDA               	movwf	fsr2h,c
  1027  0004C4  2ADF               	incf	indf2,f,c
  1028                           
  1029                           ;pwm.c: 261: Motors[i].state = 1;
  1030  0004C6  C071  F03B         	movff	CheckPWMOutput@i,___wmul@multiplier
  1031  0004CA  C072  F03C         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1032  0004CE  0E00               	movlw	0
  1033  0004D0  6E3E               	movwf	___wmul@multiplicand+1,c
  1034  0004D2  0E07               	movlw	7
  1035  0004D4  6E3D               	movwf	___wmul@multiplicand,c
  1036  0004D6  EC4B  F00C         	call	___wmul	;wreg free
  1037  0004DA  0E01               	movlw	low _Motors
  1038  0004DC  243B               	addwf	?___wmul,w,c
  1039  0004DE  6ED9               	movwf	fsr2l,c
  1040  0004E0  0E00               	movlw	high _Motors
  1041  0004E2  203C               	addwfc	?___wmul+1,w,c
  1042  0004E4  6EDA               	movwf	fsr2h,c
  1043  0004E6  80DF               	bsf	indf2,0,c
  1044                           
  1045                           ;pwm.c: 262: } else if (TMR0 < Motors[i].duty && Motors[i].state == 0 && Motors[i].servo
      +                          Count == 20) {
  1046  0004E8  D24B               	goto	l1914
  1047  0004EA                     l1874:
  1048  0004EA  C071  F03B         	movff	CheckPWMOutput@i,___wmul@multiplier
  1049  0004EE  C072  F03C         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1050  0004F2  0E00               	movlw	0
  1051  0004F4  6E3E               	movwf	___wmul@multiplicand+1,c
  1052  0004F6  0E07               	movlw	7
  1053  0004F8  6E3D               	movwf	___wmul@multiplicand,c
  1054  0004FA  EC4B  F00C         	call	___wmul	;wreg free
  1055  0004FE  0E04               	movlw	4
  1056  000500  263B               	addwf	?___wmul,f,c
  1057  000502  0E00               	movlw	0
  1058  000504  223C               	addwfc	?___wmul+1,f,c
  1059  000506  0E01               	movlw	low _Motors
  1060  000508  243B               	addwf	?___wmul,w,c
  1061  00050A  6ED9               	movwf	fsr2l,c
  1062  00050C  0E00               	movlw	high _Motors
  1063  00050E  203C               	addwfc	?___wmul+1,w,c
  1064  000510  6EDA               	movwf	fsr2h,c
  1065  000512  50DF               	movf	indf2,w,c
  1066  000514  0100               	movlb	0	; () banked
  1067  000516  6F6F               	movwf	??_CheckPWMOutput& (0+255),b
  1068  000518  0100               	movlb	0	; () banked
  1069  00051A  516F               	movf	??_CheckPWMOutput& (0+255),w,b
  1070  00051C  5CD6               	subwf	4054,w,c	;volatile
  1071  00051E  0E00               	movlw	0
  1072  000520  58D7               	subwfb	4055,w,c	;volatile
  1073  000522  B0D8               	btfsc	status,0,c
  1074  000524  D055               	goto	l1882
  1075                           
  1076                           ; BSR set to: 0
  1077  000526  C071  F03B         	movff	CheckPWMOutput@i,___wmul@multiplier
  1078  00052A  C072  F03C         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1079  00052E  0E00               	movlw	0
  1080  000530  6E3E               	movwf	___wmul@multiplicand+1,c
  1081  000532  0E07               	movlw	7
  1082  000534  6E3D               	movwf	___wmul@multiplicand,c
  1083  000536  EC4B  F00C         	call	___wmul	;wreg free
  1084  00053A  0E01               	movlw	low _Motors
  1085  00053C  243B               	addwf	?___wmul,w,c
  1086  00053E  6ED9               	movwf	fsr2l,c
  1087  000540  0E00               	movlw	high _Motors
  1088  000542  203C               	addwfc	?___wmul+1,w,c
  1089  000544  6EDA               	movwf	fsr2h,c
  1090  000546  B0DF               	btfsc	indf2,0,c
  1091  000548  D043               	goto	l1882
  1092  00054A  C071  F03B         	movff	CheckPWMOutput@i,___wmul@multiplier
  1093  00054E  C072  F03C         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1094  000552  0E00               	movlw	0
  1095  000554  6E3E               	movwf	___wmul@multiplicand+1,c
  1096  000556  0E07               	movlw	7
  1097  000558  6E3D               	movwf	___wmul@multiplicand,c
  1098  00055A  EC4B  F00C         	call	___wmul	;wreg free
  1099  00055E  0E06               	movlw	6
  1100  000560  263B               	addwf	?___wmul,f,c
  1101  000562  0E00               	movlw	0
  1102  000564  223C               	addwfc	?___wmul+1,f,c
  1103  000566  0E01               	movlw	low _Motors
  1104  000568  243B               	addwf	?___wmul,w,c
  1105  00056A  6ED9               	movwf	fsr2l,c
  1106  00056C  0E00               	movlw	high _Motors
  1107  00056E  203C               	addwfc	?___wmul+1,w,c
  1108  000570  6EDA               	movwf	fsr2h,c
  1109  000572  0E14               	movlw	20
  1110  000574  18DE               	xorwf	postinc2,w,c
  1111  000576  A4D8               	btfss	status,2,c
  1112  000578  D02B               	goto	l1882
  1113                           
  1114                           ;pwm.c: 263: Motors[i].state = 1;
  1115  00057A  C071  F03B         	movff	CheckPWMOutput@i,___wmul@multiplier
  1116  00057E  C072  F03C         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1117  000582  0E00               	movlw	0
  1118  000584  6E3E               	movwf	___wmul@multiplicand+1,c
  1119  000586  0E07               	movlw	7
  1120  000588  6E3D               	movwf	___wmul@multiplicand,c
  1121  00058A  EC4B  F00C         	call	___wmul	;wreg free
  1122  00058E  0E01               	movlw	low _Motors
  1123  000590  243B               	addwf	?___wmul,w,c
  1124  000592  6ED9               	movwf	fsr2l,c
  1125  000594  0E00               	movlw	high _Motors
  1126  000596  203C               	addwfc	?___wmul+1,w,c
  1127  000598  6EDA               	movwf	fsr2h,c
  1128  00059A  80DF               	bsf	indf2,0,c
  1129                           
  1130                           ;pwm.c: 264: SetPin(Motors[i].PWMPin,1);
  1131  00059C  0E01               	movlw	1
  1132  00059E  6E41               	movwf	SetPin@value,c
  1133  0005A0  C071  F03B         	movff	CheckPWMOutput@i,___wmul@multiplier
  1134  0005A4  C072  F03C         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1135  0005A8  0E00               	movlw	0
  1136  0005AA  6E3E               	movwf	___wmul@multiplicand+1,c
  1137  0005AC  0E07               	movlw	7
  1138  0005AE  6E3D               	movwf	___wmul@multiplicand,c
  1139  0005B0  EC4B  F00C         	call	___wmul	;wreg free
  1140  0005B4  0E01               	movlw	1
  1141  0005B6  263B               	addwf	?___wmul,f,c
  1142  0005B8  0E00               	movlw	0
  1143  0005BA  223C               	addwfc	?___wmul+1,f,c
  1144  0005BC  0E01               	movlw	low _Motors
  1145  0005BE  243B               	addwf	?___wmul,w,c
  1146  0005C0  6ED9               	movwf	fsr2l,c
  1147  0005C2  0E00               	movlw	high _Motors
  1148  0005C4  203C               	addwfc	?___wmul+1,w,c
  1149  0005C6  6EDA               	movwf	fsr2h,c
  1150  0005C8  50DF               	movf	indf2,w,c
  1151  0005CA  ECBE  F00B         	call	_SetPin
  1152                           
  1153                           ;pwm.c: 265: } else if (TMR0 >= Motors[i].duty && Motors[i].state == 1 && Motors[i].serv
      +                          oCount < 19) {
  1154  0005CE  D1D8               	goto	l1914
  1155  0005D0                     l1882:
  1156  0005D0  C071  F03B         	movff	CheckPWMOutput@i,___wmul@multiplier
  1157  0005D4  C072  F03C         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1158  0005D8  0E00               	movlw	0
  1159  0005DA  6E3E               	movwf	___wmul@multiplicand+1,c
  1160  0005DC  0E07               	movlw	7
  1161  0005DE  6E3D               	movwf	___wmul@multiplicand,c
  1162  0005E0  EC4B  F00C         	call	___wmul	;wreg free
  1163  0005E4  0E04               	movlw	4
  1164  0005E6  263B               	addwf	?___wmul,f,c
  1165  0005E8  0E00               	movlw	0
  1166  0005EA  223C               	addwfc	?___wmul+1,f,c
  1167  0005EC  0E01               	movlw	low _Motors
  1168  0005EE  243B               	addwf	?___wmul,w,c
  1169  0005F0  6ED9               	movwf	fsr2l,c
  1170  0005F2  0E00               	movlw	high _Motors
  1171  0005F4  203C               	addwfc	?___wmul+1,w,c
  1172  0005F6  6EDA               	movwf	fsr2h,c
  1173  0005F8  50DF               	movf	indf2,w,c
  1174  0005FA  0100               	movlb	0	; () banked
  1175  0005FC  6F6F               	movwf	??_CheckPWMOutput& (0+255),b
  1176  0005FE  6B70               	clrf	(??_CheckPWMOutput+1)& (0+255),b
  1177  000600  0100               	movlb	0	; () banked
  1178  000602  516F               	movf	??_CheckPWMOutput& (0+255),w,b
  1179  000604  5CD6               	subwf	4054,w,c	;volatile
  1180  000606  0100               	movlb	0	; () banked
  1181  000608  5170               	movf	(??_CheckPWMOutput+1)& (0+255),w,b
  1182  00060A  58D7               	subwfb	4055,w,c	;volatile
  1183  00060C  A0D8               	btfss	status,0,c
  1184  00060E  D03B               	goto	l1890
  1185                           
  1186                           ; BSR set to: 0
  1187  000610  C071  F03B         	movff	CheckPWMOutput@i,___wmul@multiplier
  1188  000614  C072  F03C         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1189  000618  0E00               	movlw	0
  1190  00061A  6E3E               	movwf	___wmul@multiplicand+1,c
  1191  00061C  0E07               	movlw	7
  1192  00061E  6E3D               	movwf	___wmul@multiplicand,c
  1193  000620  EC4B  F00C         	call	___wmul	;wreg free
  1194  000624  0E01               	movlw	low _Motors
  1195  000626  243B               	addwf	?___wmul,w,c
  1196  000628  6ED9               	movwf	fsr2l,c
  1197  00062A  0E00               	movlw	high _Motors
  1198  00062C  203C               	addwfc	?___wmul+1,w,c
  1199  00062E  6EDA               	movwf	fsr2h,c
  1200  000630  A0DF               	btfss	indf2,0,c
  1201  000632  D029               	goto	l1890
  1202  000634  C071  F03B         	movff	CheckPWMOutput@i,___wmul@multiplier
  1203  000638  C072  F03C         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1204  00063C  0E00               	movlw	0
  1205  00063E  6E3E               	movwf	___wmul@multiplicand+1,c
  1206  000640  0E07               	movlw	7
  1207  000642  6E3D               	movwf	___wmul@multiplicand,c
  1208  000644  EC4B  F00C         	call	___wmul	;wreg free
  1209  000648  0E06               	movlw	6
  1210  00064A  263B               	addwf	?___wmul,f,c
  1211  00064C  0E00               	movlw	0
  1212  00064E  223C               	addwfc	?___wmul+1,f,c
  1213  000650  0E01               	movlw	low _Motors
  1214  000652  243B               	addwf	?___wmul,w,c
  1215  000654  6ED9               	movwf	fsr2l,c
  1216  000656  0E00               	movlw	high _Motors
  1217  000658  203C               	addwfc	?___wmul+1,w,c
  1218  00065A  6EDA               	movwf	fsr2h,c
  1219  00065C  0E13               	movlw	19
  1220  00065E  60DF               	cpfslt	indf2,c
  1221  000660  D012               	goto	l1890
  1222                           
  1223                           ;pwm.c: 266: Motors[i].state = 0;
  1224  000662  C071  F03B         	movff	CheckPWMOutput@i,___wmul@multiplier
  1225  000666  C072  F03C         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1226  00066A  0E00               	movlw	0
  1227  00066C  6E3E               	movwf	___wmul@multiplicand+1,c
  1228  00066E  0E07               	movlw	7
  1229  000670  6E3D               	movwf	___wmul@multiplicand,c
  1230  000672  EC4B  F00C         	call	___wmul	;wreg free
  1231  000676  0E01               	movlw	low _Motors
  1232  000678  243B               	addwf	?___wmul,w,c
  1233  00067A  6ED9               	movwf	fsr2l,c
  1234  00067C  0E00               	movlw	high _Motors
  1235  00067E  203C               	addwfc	?___wmul+1,w,c
  1236  000680  6EDA               	movwf	fsr2h,c
  1237  000682  90DF               	bcf	indf2,0,c
  1238                           
  1239                           ;pwm.c: 267: } else if (TMR0 < Motors[i].duty && Motors[i].state == 0 && Motors[i].servo
      +                          Count == 20) {
  1240  000684  D17D               	goto	l1914
  1241  000686                     l1890:
  1242  000686  C071  F03B         	movff	CheckPWMOutput@i,___wmul@multiplier
  1243  00068A  C072  F03C         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1244  00068E  0E00               	movlw	0
  1245  000690  6E3E               	movwf	___wmul@multiplicand+1,c
  1246  000692  0E07               	movlw	7
  1247  000694  6E3D               	movwf	___wmul@multiplicand,c
  1248  000696  EC4B  F00C         	call	___wmul	;wreg free
  1249  00069A  0E04               	movlw	4
  1250  00069C  263B               	addwf	?___wmul,f,c
  1251  00069E  0E00               	movlw	0
  1252  0006A0  223C               	addwfc	?___wmul+1,f,c
  1253  0006A2  0E01               	movlw	low _Motors
  1254  0006A4  243B               	addwf	?___wmul,w,c
  1255  0006A6  6ED9               	movwf	fsr2l,c
  1256  0006A8  0E00               	movlw	high _Motors
  1257  0006AA  203C               	addwfc	?___wmul+1,w,c
  1258  0006AC  6EDA               	movwf	fsr2h,c
  1259  0006AE  50DF               	movf	indf2,w,c
  1260  0006B0  0100               	movlb	0	; () banked
  1261  0006B2  6F6F               	movwf	??_CheckPWMOutput& (0+255),b
  1262  0006B4  0100               	movlb	0	; () banked
  1263  0006B6  516F               	movf	??_CheckPWMOutput& (0+255),w,b
  1264  0006B8  5CD6               	subwf	4054,w,c	;volatile
  1265  0006BA  0E00               	movlw	0
  1266  0006BC  58D7               	subwfb	4055,w,c	;volatile
  1267  0006BE  B0D8               	btfsc	status,0,c
  1268  0006C0  D15F               	goto	l1914
  1269                           
  1270                           ; BSR set to: 0
  1271  0006C2  C071  F03B         	movff	CheckPWMOutput@i,___wmul@multiplier
  1272  0006C6  C072  F03C         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1273  0006CA  0E00               	movlw	0
  1274  0006CC  6E3E               	movwf	___wmul@multiplicand+1,c
  1275  0006CE  0E07               	movlw	7
  1276  0006D0  6E3D               	movwf	___wmul@multiplicand,c
  1277  0006D2  EC4B  F00C         	call	___wmul	;wreg free
  1278  0006D6  0E01               	movlw	low _Motors
  1279  0006D8  243B               	addwf	?___wmul,w,c
  1280  0006DA  6ED9               	movwf	fsr2l,c
  1281  0006DC  0E00               	movlw	high _Motors
  1282  0006DE  203C               	addwfc	?___wmul+1,w,c
  1283  0006E0  6EDA               	movwf	fsr2h,c
  1284  0006E2  B0DF               	btfsc	indf2,0,c
  1285  0006E4  D14D               	goto	l1914
  1286  0006E6  C071  F03B         	movff	CheckPWMOutput@i,___wmul@multiplier
  1287  0006EA  C072  F03C         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1288  0006EE  0E00               	movlw	0
  1289  0006F0  6E3E               	movwf	___wmul@multiplicand+1,c
  1290  0006F2  0E07               	movlw	7
  1291  0006F4  6E3D               	movwf	___wmul@multiplicand,c
  1292  0006F6  EC4B  F00C         	call	___wmul	;wreg free
  1293  0006FA  0E06               	movlw	6
  1294  0006FC  263B               	addwf	?___wmul,f,c
  1295  0006FE  0E00               	movlw	0
  1296  000700  223C               	addwfc	?___wmul+1,f,c
  1297  000702  0E01               	movlw	low _Motors
  1298  000704  243B               	addwf	?___wmul,w,c
  1299  000706  6ED9               	movwf	fsr2l,c
  1300  000708  0E00               	movlw	high _Motors
  1301  00070A  203C               	addwfc	?___wmul+1,w,c
  1302  00070C  6EDA               	movwf	fsr2h,c
  1303  00070E  0E14               	movlw	20
  1304  000710  18DE               	xorwf	postinc2,w,c
  1305  000712  A4D8               	btfss	status,2,c
  1306  000714  D135               	goto	l1914
  1307                           
  1308                           ;pwm.c: 268: Motors[i].state = 0;
  1309  000716  C071  F03B         	movff	CheckPWMOutput@i,___wmul@multiplier
  1310  00071A  C072  F03C         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1311  00071E  0E00               	movlw	0
  1312  000720  6E3E               	movwf	___wmul@multiplicand+1,c
  1313  000722  0E07               	movlw	7
  1314  000724  6E3D               	movwf	___wmul@multiplicand,c
  1315  000726  EC4B  F00C         	call	___wmul	;wreg free
  1316  00072A  0E01               	movlw	low _Motors
  1317  00072C  243B               	addwf	?___wmul,w,c
  1318  00072E  6ED9               	movwf	fsr2l,c
  1319  000730  0E00               	movlw	high _Motors
  1320  000732  203C               	addwfc	?___wmul+1,w,c
  1321  000734  6EDA               	movwf	fsr2h,c
  1322  000736  90DF               	bcf	indf2,0,c
  1323                           
  1324                           ;pwm.c: 269: Motors[i].servoCount = 0;
  1325  000738  C071  F03B         	movff	CheckPWMOutput@i,___wmul@multiplier
  1326  00073C  C072  F03C         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1327  000740  0E00               	movlw	0
  1328  000742  6E3E               	movwf	___wmul@multiplicand+1,c
  1329  000744  0E07               	movlw	7
  1330  000746  6E3D               	movwf	___wmul@multiplicand,c
  1331  000748  EC4B  F00C         	call	___wmul	;wreg free
  1332  00074C  0E06               	movlw	6
  1333  00074E  263B               	addwf	?___wmul,f,c
  1334  000750  0E00               	movlw	0
  1335  000752  223C               	addwfc	?___wmul+1,f,c
  1336  000754  0E01               	movlw	low _Motors
  1337  000756  243B               	addwf	?___wmul,w,c
  1338  000758  6ED9               	movwf	fsr2l,c
  1339  00075A  0E00               	movlw	high _Motors
  1340  00075C  203C               	addwfc	?___wmul+1,w,c
  1341  00075E  6EDA               	movwf	fsr2h,c
  1342  000760  0E00               	movlw	0
  1343  000762  6EDF               	movwf	indf2,c
  1344                           
  1345                           ;pwm.c: 270: SetPin(Motors[i].PWMPin,0);
  1346  000764  0E00               	movlw	0
  1347  000766  6E41               	movwf	SetPin@value,c
  1348  000768  C071  F03B         	movff	CheckPWMOutput@i,___wmul@multiplier
  1349  00076C  C072  F03C         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1350  000770  0E00               	movlw	0
  1351  000772  6E3E               	movwf	___wmul@multiplicand+1,c
  1352  000774  0E07               	movlw	7
  1353  000776  6E3D               	movwf	___wmul@multiplicand,c
  1354  000778  EC4B  F00C         	call	___wmul	;wreg free
  1355  00077C  0E01               	movlw	1
  1356  00077E  263B               	addwf	?___wmul,f,c
  1357  000780  0E00               	movlw	0
  1358  000782  223C               	addwfc	?___wmul+1,f,c
  1359  000784  0E01               	movlw	low _Motors
  1360  000786  243B               	addwf	?___wmul,w,c
  1361  000788  6ED9               	movwf	fsr2l,c
  1362  00078A  0E00               	movlw	high _Motors
  1363  00078C  203C               	addwfc	?___wmul+1,w,c
  1364  00078E  6EDA               	movwf	fsr2h,c
  1365  000790  50DF               	movf	indf2,w,c
  1366  000792  ECBE  F00B         	call	_SetPin
  1367                           
  1368                           ;pwm.c: 271: }
  1369                           ;pwm.c: 272: } else {
  1370  000796  D0F4               	goto	l1914
  1371  000798                     l1898:
  1372                           
  1373                           ;pwm.c: 274: if (TMR0 < Motors[i].duty && Motors[i].state == 0) {
  1374  000798  C071  F03B         	movff	CheckPWMOutput@i,___wmul@multiplier
  1375  00079C  C072  F03C         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1376  0007A0  0E00               	movlw	0
  1377  0007A2  6E3E               	movwf	___wmul@multiplicand+1,c
  1378  0007A4  0E07               	movlw	7
  1379  0007A6  6E3D               	movwf	___wmul@multiplicand,c
  1380  0007A8  EC4B  F00C         	call	___wmul	;wreg free
  1381  0007AC  0E04               	movlw	4
  1382  0007AE  263B               	addwf	?___wmul,f,c
  1383  0007B0  0E00               	movlw	0
  1384  0007B2  223C               	addwfc	?___wmul+1,f,c
  1385  0007B4  0E01               	movlw	low _Motors
  1386  0007B6  243B               	addwf	?___wmul,w,c
  1387  0007B8  6ED9               	movwf	fsr2l,c
  1388  0007BA  0E00               	movlw	high _Motors
  1389  0007BC  203C               	addwfc	?___wmul+1,w,c
  1390  0007BE  6EDA               	movwf	fsr2h,c
  1391  0007C0  50DF               	movf	indf2,w,c
  1392  0007C2  0100               	movlb	0	; () banked
  1393  0007C4  6F6F               	movwf	??_CheckPWMOutput& (0+255),b
  1394  0007C6  0100               	movlb	0	; () banked
  1395  0007C8  516F               	movf	??_CheckPWMOutput& (0+255),w,b
  1396  0007CA  5CD6               	subwf	4054,w,c	;volatile
  1397  0007CC  0E00               	movlw	0
  1398  0007CE  58D7               	subwfb	4055,w,c	;volatile
  1399  0007D0  B0D8               	btfsc	status,0,c
  1400  0007D2  D03D               	goto	l1904
  1401                           
  1402                           ; BSR set to: 0
  1403  0007D4  C071  F03B         	movff	CheckPWMOutput@i,___wmul@multiplier
  1404  0007D8  C072  F03C         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1405  0007DC  0E00               	movlw	0
  1406  0007DE  6E3E               	movwf	___wmul@multiplicand+1,c
  1407  0007E0  0E07               	movlw	7
  1408  0007E2  6E3D               	movwf	___wmul@multiplicand,c
  1409  0007E4  EC4B  F00C         	call	___wmul	;wreg free
  1410  0007E8  0E01               	movlw	low _Motors
  1411  0007EA  243B               	addwf	?___wmul,w,c
  1412  0007EC  6ED9               	movwf	fsr2l,c
  1413  0007EE  0E00               	movlw	high _Motors
  1414  0007F0  203C               	addwfc	?___wmul+1,w,c
  1415  0007F2  6EDA               	movwf	fsr2h,c
  1416  0007F4  B0DF               	btfsc	indf2,0,c
  1417  0007F6  D02B               	goto	l1904
  1418                           
  1419                           ;pwm.c: 276: Motors[i].state = 1;
  1420  0007F8  C071  F03B         	movff	CheckPWMOutput@i,___wmul@multiplier
  1421  0007FC  C072  F03C         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1422  000800  0E00               	movlw	0
  1423  000802  6E3E               	movwf	___wmul@multiplicand+1,c
  1424  000804  0E07               	movlw	7
  1425  000806  6E3D               	movwf	___wmul@multiplicand,c
  1426  000808  EC4B  F00C         	call	___wmul	;wreg free
  1427  00080C  0E01               	movlw	low _Motors
  1428  00080E  243B               	addwf	?___wmul,w,c
  1429  000810  6ED9               	movwf	fsr2l,c
  1430  000812  0E00               	movlw	high _Motors
  1431  000814  203C               	addwfc	?___wmul+1,w,c
  1432  000816  6EDA               	movwf	fsr2h,c
  1433  000818  80DF               	bsf	indf2,0,c
  1434                           
  1435                           ;pwm.c: 278: SetPin(Motors[i].PWMPin,1);
  1436  00081A  0E01               	movlw	1
  1437  00081C  6E41               	movwf	SetPin@value,c
  1438  00081E  C071  F03B         	movff	CheckPWMOutput@i,___wmul@multiplier
  1439  000822  C072  F03C         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1440  000826  0E00               	movlw	0
  1441  000828  6E3E               	movwf	___wmul@multiplicand+1,c
  1442  00082A  0E07               	movlw	7
  1443  00082C  6E3D               	movwf	___wmul@multiplicand,c
  1444  00082E  EC4B  F00C         	call	___wmul	;wreg free
  1445  000832  0E01               	movlw	1
  1446  000834  263B               	addwf	?___wmul,f,c
  1447  000836  0E00               	movlw	0
  1448  000838  223C               	addwfc	?___wmul+1,f,c
  1449  00083A  0E01               	movlw	low _Motors
  1450  00083C  243B               	addwf	?___wmul,w,c
  1451  00083E  6ED9               	movwf	fsr2l,c
  1452  000840  0E00               	movlw	high _Motors
  1453  000842  203C               	addwfc	?___wmul+1,w,c
  1454  000844  6EDA               	movwf	fsr2h,c
  1455  000846  50DF               	movf	indf2,w,c
  1456  000848  ECBE  F00B         	call	_SetPin
  1457                           
  1458                           ;pwm.c: 279: } else if (TMR0 >= Motors[i].duty && Motors[i].state == 1) {
  1459  00084C  D099               	goto	l1914
  1460  00084E                     l1904:
  1461  00084E  C071  F03B         	movff	CheckPWMOutput@i,___wmul@multiplier
  1462  000852  C072  F03C         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1463  000856  0E00               	movlw	0
  1464  000858  6E3E               	movwf	___wmul@multiplicand+1,c
  1465  00085A  0E07               	movlw	7
  1466  00085C  6E3D               	movwf	___wmul@multiplicand,c
  1467  00085E  EC4B  F00C         	call	___wmul	;wreg free
  1468  000862  0E04               	movlw	4
  1469  000864  263B               	addwf	?___wmul,f,c
  1470  000866  0E00               	movlw	0
  1471  000868  223C               	addwfc	?___wmul+1,f,c
  1472  00086A  0E01               	movlw	low _Motors
  1473  00086C  243B               	addwf	?___wmul,w,c
  1474  00086E  6ED9               	movwf	fsr2l,c
  1475  000870  0E00               	movlw	high _Motors
  1476  000872  203C               	addwfc	?___wmul+1,w,c
  1477  000874  6EDA               	movwf	fsr2h,c
  1478  000876  50DF               	movf	indf2,w,c
  1479  000878  0100               	movlb	0	; () banked
  1480  00087A  6F6F               	movwf	??_CheckPWMOutput& (0+255),b
  1481  00087C  6B70               	clrf	(??_CheckPWMOutput+1)& (0+255),b
  1482  00087E  0100               	movlb	0	; () banked
  1483  000880  516F               	movf	??_CheckPWMOutput& (0+255),w,b
  1484  000882  5CD6               	subwf	4054,w,c	;volatile
  1485  000884  0100               	movlb	0	; () banked
  1486  000886  5170               	movf	(??_CheckPWMOutput+1)& (0+255),w,b
  1487  000888  58D7               	subwfb	4055,w,c	;volatile
  1488  00088A  A0D8               	btfss	status,0,c
  1489  00088C  D079               	goto	l1914
  1490                           
  1491                           ; BSR set to: 0
  1492  00088E  C071  F03B         	movff	CheckPWMOutput@i,___wmul@multiplier
  1493  000892  C072  F03C         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1494  000896  0E00               	movlw	0
  1495  000898  6E3E               	movwf	___wmul@multiplicand+1,c
  1496  00089A  0E07               	movlw	7
  1497  00089C  6E3D               	movwf	___wmul@multiplicand,c
  1498  00089E  EC4B  F00C         	call	___wmul	;wreg free
  1499  0008A2  0E01               	movlw	low _Motors
  1500  0008A4  243B               	addwf	?___wmul,w,c
  1501  0008A6  6ED9               	movwf	fsr2l,c
  1502  0008A8  0E00               	movlw	high _Motors
  1503  0008AA  203C               	addwfc	?___wmul+1,w,c
  1504  0008AC  6EDA               	movwf	fsr2h,c
  1505  0008AE  A0DF               	btfss	indf2,0,c
  1506  0008B0  D067               	goto	l1914
  1507                           
  1508                           ;pwm.c: 281: Motors[i].state = 0;
  1509  0008B2  C071  F03B         	movff	CheckPWMOutput@i,___wmul@multiplier
  1510  0008B6  C072  F03C         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1511  0008BA  0E00               	movlw	0
  1512  0008BC  6E3E               	movwf	___wmul@multiplicand+1,c
  1513  0008BE  0E07               	movlw	7
  1514  0008C0  6E3D               	movwf	___wmul@multiplicand,c
  1515  0008C2  EC4B  F00C         	call	___wmul	;wreg free
  1516  0008C6  0E01               	movlw	low _Motors
  1517  0008C8  243B               	addwf	?___wmul,w,c
  1518  0008CA  6ED9               	movwf	fsr2l,c
  1519  0008CC  0E00               	movlw	high _Motors
  1520  0008CE  203C               	addwfc	?___wmul+1,w,c
  1521  0008D0  6EDA               	movwf	fsr2h,c
  1522  0008D2  90DF               	bcf	indf2,0,c
  1523                           
  1524                           ;pwm.c: 283: SetPin(Motors[i].PWMPin,0);
  1525  0008D4  0E00               	movlw	0
  1526  0008D6  6E41               	movwf	SetPin@value,c
  1527  0008D8  C071  F03B         	movff	CheckPWMOutput@i,___wmul@multiplier
  1528  0008DC  C072  F03C         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1529  0008E0  0E00               	movlw	0
  1530  0008E2  6E3E               	movwf	___wmul@multiplicand+1,c
  1531  0008E4  0E07               	movlw	7
  1532  0008E6  6E3D               	movwf	___wmul@multiplicand,c
  1533  0008E8  EC4B  F00C         	call	___wmul	;wreg free
  1534  0008EC  0E01               	movlw	1
  1535  0008EE  263B               	addwf	?___wmul,f,c
  1536  0008F0  0E00               	movlw	0
  1537  0008F2  223C               	addwfc	?___wmul+1,f,c
  1538  0008F4  0E01               	movlw	low _Motors
  1539  0008F6  243B               	addwf	?___wmul,w,c
  1540  0008F8  6ED9               	movwf	fsr2l,c
  1541  0008FA  0E00               	movlw	high _Motors
  1542  0008FC  203C               	addwfc	?___wmul+1,w,c
  1543  0008FE  6EDA               	movwf	fsr2h,c
  1544  000900  50DF               	movf	indf2,w,c
  1545  000902  ECBE  F00B         	call	_SetPin
  1546                           
  1547                           ;pwm.c: 284: }
  1548                           ;pwm.c: 285: }
  1549                           ;pwm.c: 286: } else if (Motors[i].state) {
  1550  000906  D03C               	goto	l1914
  1551  000908                     l1910:
  1552  000908  C071  F03B         	movff	CheckPWMOutput@i,___wmul@multiplier
  1553  00090C  C072  F03C         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1554  000910  0E00               	movlw	0
  1555  000912  6E3E               	movwf	___wmul@multiplicand+1,c
  1556  000914  0E07               	movlw	7
  1557  000916  6E3D               	movwf	___wmul@multiplicand,c
  1558  000918  EC4B  F00C         	call	___wmul	;wreg free
  1559  00091C  0E01               	movlw	low _Motors
  1560  00091E  243B               	addwf	?___wmul,w,c
  1561  000920  6ED9               	movwf	fsr2l,c
  1562  000922  0E00               	movlw	high _Motors
  1563  000924  203C               	addwfc	?___wmul+1,w,c
  1564  000926  6EDA               	movwf	fsr2h,c
  1565  000928  A0DF               	btfss	indf2,0,c
  1566  00092A  D02A               	goto	l1914
  1567                           
  1568                           ;pwm.c: 289: Motors[i].state = 0;
  1569  00092C  C071  F03B         	movff	CheckPWMOutput@i,___wmul@multiplier
  1570  000930  C072  F03C         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1571  000934  0E00               	movlw	0
  1572  000936  6E3E               	movwf	___wmul@multiplicand+1,c
  1573  000938  0E07               	movlw	7
  1574  00093A  6E3D               	movwf	___wmul@multiplicand,c
  1575  00093C  EC4B  F00C         	call	___wmul	;wreg free
  1576  000940  0E01               	movlw	low _Motors
  1577  000942  243B               	addwf	?___wmul,w,c
  1578  000944  6ED9               	movwf	fsr2l,c
  1579  000946  0E00               	movlw	high _Motors
  1580  000948  203C               	addwfc	?___wmul+1,w,c
  1581  00094A  6EDA               	movwf	fsr2h,c
  1582  00094C  90DF               	bcf	indf2,0,c
  1583                           
  1584                           ;pwm.c: 290: SetPin(Motors[i].PWMPin,0);
  1585  00094E  0E00               	movlw	0
  1586  000950  6E41               	movwf	SetPin@value,c
  1587  000952  C071  F03B         	movff	CheckPWMOutput@i,___wmul@multiplier
  1588  000956  C072  F03C         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1589  00095A  0E00               	movlw	0
  1590  00095C  6E3E               	movwf	___wmul@multiplicand+1,c
  1591  00095E  0E07               	movlw	7
  1592  000960  6E3D               	movwf	___wmul@multiplicand,c
  1593  000962  EC4B  F00C         	call	___wmul	;wreg free
  1594  000966  0E01               	movlw	1
  1595  000968  263B               	addwf	?___wmul,f,c
  1596  00096A  0E00               	movlw	0
  1597  00096C  223C               	addwfc	?___wmul+1,f,c
  1598  00096E  0E01               	movlw	low _Motors
  1599  000970  243B               	addwf	?___wmul,w,c
  1600  000972  6ED9               	movwf	fsr2l,c
  1601  000974  0E00               	movlw	high _Motors
  1602  000976  203C               	addwfc	?___wmul+1,w,c
  1603  000978  6EDA               	movwf	fsr2h,c
  1604  00097A  50DF               	movf	indf2,w,c
  1605  00097C  ECBE  F00B         	call	_SetPin
  1606  000980                     l1914:
  1607  000980  0100               	movlb	0	; () banked
  1608  000982  4B71               	infsnz	CheckPWMOutput@i& (0+255),f,b
  1609  000984  2B72               	incf	(CheckPWMOutput@i+1)& (0+255),f,b
  1610                           
  1611                           ; BSR set to: 0
  1612  000986  0100               	movlb	0	; () banked
  1613  000988  BF72               	btfsc	(CheckPWMOutput@i+1)& (0+255),7,b
  1614  00098A  D51A               	goto	l1860
  1615  00098C  0100               	movlb	0	; () banked
  1616  00098E  5172               	movf	(CheckPWMOutput@i+1)& (0+255),w,b
  1617  000990  E101               	bnz	l1918
  1618  000992  D50F               	goto	L2
  1619  000994                     l1918:
  1620                           
  1621                           ; BSR set to: 0
  1622                           ;pwm.c: 291: }
  1623                           ;pwm.c: 292: }
  1624                           ;pwm.c: 294: if (AccelCount >= AccelRate) {
  1625  000994  5045               	movf	_AccelRate,w,c
  1626  000996  5C1F               	subwf	_AccelCount,w,c
  1627  000998  5046               	movf	_AccelRate+1,w,c
  1628  00099A  5820               	subwfb	_AccelCount+1,w,c
  1629  00099C  A0D8               	btfss	status,0,c
  1630  00099E  D007               	goto	l1924
  1631                           
  1632                           ; BSR set to: 0
  1633                           ;pwm.c: 295: AcceleratePWM();
  1634  0009A0  EC1C  F00B         	call	_AcceleratePWM	;wreg free
  1635                           
  1636                           ;pwm.c: 296: AccelCount = 0;
  1637  0009A4  0E00               	movlw	0
  1638  0009A6  6E20               	movwf	_AccelCount+1,c
  1639  0009A8  0E00               	movlw	0
  1640  0009AA  6E1F               	movwf	_AccelCount,c
  1641                           
  1642                           ;pwm.c: 297: } else {
  1643  0009AC  0012               	return	
  1644  0009AE                     l1924:
  1645                           
  1646                           ;pwm.c: 298: AccelCount++;
  1647  0009AE  4A1F               	infsnz	_AccelCount,f,c
  1648  0009B0  2A20               	incf	_AccelCount+1,f,c
  1649  0009B2  0012               	return	
  1650  0009B4                     __end_of_CheckPWMOutput:
  1651                           	opt stack 0
  1652                           tblptru	equ	0xFF8
  1653                           tblptrh	equ	0xFF7
  1654                           tblptrl	equ	0xFF6
  1655                           tablat	equ	0xFF5
  1656                           intcon	equ	0xFF2
  1657                           intcon2	equ	0xFF1
  1658                           postinc0	equ	0xFEE
  1659                           wreg	equ	0xFE8
  1660                           postdec1	equ	0xFE5
  1661                           fsr1l	equ	0xFE1
  1662                           indf2	equ	0xFDF
  1663                           postinc2	equ	0xFDE
  1664                           fsr2h	equ	0xFDA
  1665                           fsr2l	equ	0xFD9
  1666                           status	equ	0xFD8
  1667                           
  1668 ;; *************** function _AcceleratePWM *****************
  1669 ;; Defined at:
  1670 ;;		line 218 in file "pwm.c"
  1671 ;; Parameters:    Size  Location     Type
  1672 ;;		None
  1673 ;; Auto vars:     Size  Location     Type
  1674 ;;  i               2   13[BANK0 ] int 
  1675 ;; Return value:  Size  Location     Type
  1676 ;;                  1    wreg      void 
  1677 ;; Registers used:
  1678 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1679 ;; Tracked objects:
  1680 ;;		On entry : 0/0
  1681 ;;		On exit  : 0/0
  1682 ;;		Unchanged: 0/0
  1683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1684 ;;      Params:         0       0       0       0
  1685 ;;      Locals:         0       2       0       0
  1686 ;;      Temps:          0       2       0       0
  1687 ;;      Totals:         0       4       0       0
  1688 ;;Total ram usage:        4 bytes
  1689 ;; Hardware stack levels used:    1
  1690 ;; Hardware stack levels required when called:    4
  1691 ;; This function calls:
  1692 ;;		_AccelerateMotor
  1693 ;;		_StopMotor
  1694 ;;		___wmul
  1695 ;; This function is called by:
  1696 ;;		_CheckPWMOutput
  1697 ;; This function uses a non-reentrant model
  1698 ;;
  1699                           
  1700                           	psect	text5
  1701  001638                     __ptext5:
  1702                           	opt stack 0
  1703  001638                     _AcceleratePWM:
  1704                           	opt stack 25
  1705                           
  1706                           ;pwm.c: 219: int i;
  1707                           ;pwm.c: 220: for (i = 0; i < 4; i++) {
  1708                           
  1709                           ;incstack = 0
  1710  001638  0E00               	movlw	0
  1711  00163A  0100               	movlb	0	; () banked
  1712  00163C  6F6E               	movwf	(AcceleratePWM@i+1)& (0+255),b
  1713  00163E  0E00               	movlw	0
  1714  001640  6F6D               	movwf	AcceleratePWM@i& (0+255),b
  1715                           
  1716                           ; BSR set to: 0
  1717  001642  0100               	movlb	0	; () banked
  1718  001644  BF6E               	btfsc	(AcceleratePWM@i+1)& (0+255),7,b
  1719  001646  D00A               	goto	l1814
  1720  001648  0100               	movlb	0	; () banked
  1721  00164A  516E               	movf	(AcceleratePWM@i+1)& (0+255),w,b
  1722  00164C  E106               	bnz	u2530
  1723  00164E  0E04               	movlw	4
  1724  001650  0100               	movlb	0	; () banked
  1725  001652  5D6D               	subwf	AcceleratePWM@i& (0+255),w,b
  1726  001654  B0D8               	btfsc	status,0,c
  1727  001656  0012               	return	
  1728  001658  D001               	goto	l1814
  1729  00165A                     u2530:
  1730                           
  1731                           ; BSR set to: 0
  1732  00165A  0012               	return	
  1733  00165C                     l1814:
  1734                           
  1735                           ; BSR set to: 0
  1736                           ;pwm.c: 221: if (PWMPause || Motors[i].paused) {
  1737  00165C  5024               	movf	_PWMPause,w,c
  1738  00165E  A4D8               	btfss	status,2,c
  1739  001660  D012               	goto	l1818
  1740                           
  1741                           ; BSR set to: 0
  1742  001662  C06D  F03B         	movff	AcceleratePWM@i,___wmul@multiplier
  1743  001666  C06E  F03C         	movff	AcceleratePWM@i+1,___wmul@multiplier+1
  1744  00166A  0E00               	movlw	0
  1745  00166C  6E3E               	movwf	___wmul@multiplicand+1,c
  1746  00166E  0E07               	movlw	7
  1747  001670  6E3D               	movwf	___wmul@multiplicand,c
  1748  001672  EC4B  F00C         	call	___wmul	;wreg free
  1749  001676  0E01               	movlw	low _Motors
  1750  001678  243B               	addwf	?___wmul,w,c
  1751  00167A  6ED9               	movwf	fsr2l,c
  1752  00167C  0E00               	movlw	high _Motors
  1753  00167E  203C               	addwfc	?___wmul+1,w,c
  1754  001680  6EDA               	movwf	fsr2h,c
  1755  001682  A4DF               	btfss	indf2,2,c
  1756  001684  D007               	goto	l1820
  1757  001686                     l1818:
  1758                           
  1759                           ;pwm.c: 222: StopMotor(i);
  1760  001686  C06D  F067         	movff	AcceleratePWM@i,StopMotor@index
  1761  00168A  C06E  F068         	movff	AcceleratePWM@i+1,StopMotor@index+1
  1762  00168E  ECC5  F008         	call	_StopMotor	;wreg free
  1763                           
  1764                           ;pwm.c: 223: } else {
  1765  001692  D069               	goto	l1828
  1766  001694                     l1820:
  1767                           
  1768                           ;pwm.c: 227: if (Motors[i].direction != Motors[i].targetDirection) {
  1769  001694  C06D  F03B         	movff	AcceleratePWM@i,___wmul@multiplier
  1770  001698  C06E  F03C         	movff	AcceleratePWM@i+1,___wmul@multiplier+1
  1771  00169C  0E00               	movlw	0
  1772  00169E  6E3E               	movwf	___wmul@multiplicand+1,c
  1773  0016A0  0E07               	movlw	7
  1774  0016A2  6E3D               	movwf	___wmul@multiplicand,c
  1775  0016A4  EC4B  F00C         	call	___wmul	;wreg free
  1776  0016A8  0E01               	movlw	low _Motors
  1777  0016AA  243B               	addwf	?___wmul,w,c
  1778  0016AC  6ED9               	movwf	fsr2l,c
  1779  0016AE  0E00               	movlw	high _Motors
  1780  0016B0  203C               	addwfc	?___wmul+1,w,c
  1781  0016B2  6EDA               	movwf	fsr2h,c
  1782  0016B4  A8DF               	btfss	indf2,4,c
  1783  0016B6  D002               	goto	u2560
  1784  0016B8  0E01               	movlw	1
  1785  0016BA  D001               	goto	u2562
  1786  0016BC                     u2560:
  1787  0016BC  0E00               	movlw	0
  1788  0016BE                     u2562:
  1789  0016BE  0100               	movlb	0	; () banked
  1790  0016C0  6F6B               	movwf	??_AcceleratePWM& (0+255),b
  1791  0016C2  C06D  F03B         	movff	AcceleratePWM@i,___wmul@multiplier
  1792  0016C6  C06E  F03C         	movff	AcceleratePWM@i+1,___wmul@multiplier+1
  1793  0016CA  0E00               	movlw	0
  1794  0016CC  6E3E               	movwf	___wmul@multiplicand+1,c
  1795  0016CE  0E07               	movlw	7
  1796  0016D0  6E3D               	movwf	___wmul@multiplicand,c
  1797  0016D2  EC4B  F00C         	call	___wmul	;wreg free
  1798  0016D6  0E01               	movlw	low _Motors
  1799  0016D8  243B               	addwf	?___wmul,w,c
  1800  0016DA  6ED9               	movwf	fsr2l,c
  1801  0016DC  0E00               	movlw	high _Motors
  1802  0016DE  203C               	addwfc	?___wmul+1,w,c
  1803  0016E0  6EDA               	movwf	fsr2h,c
  1804  0016E2  A6DF               	btfss	indf2,3,c
  1805  0016E4  D002               	goto	u2570
  1806  0016E6  0E01               	movlw	1
  1807  0016E8  D001               	goto	u2572
  1808  0016EA                     u2570:
  1809  0016EA  0E00               	movlw	0
  1810  0016EC                     u2572:
  1811  0016EC  0100               	movlb	0	; () banked
  1812  0016EE  1B6B               	xorwf	??_AcceleratePWM& (0+255),f,b
  1813  0016F0  B4D8               	btfsc	status,2,c
  1814  0016F2  D007               	goto	l1824
  1815                           
  1816                           ; BSR set to: 0
  1817                           ;pwm.c: 228: StopMotor(i);
  1818  0016F4  C06D  F067         	movff	AcceleratePWM@i,StopMotor@index
  1819  0016F8  C06E  F068         	movff	AcceleratePWM@i+1,StopMotor@index+1
  1820  0016FC  ECC5  F008         	call	_StopMotor	;wreg free
  1821                           
  1822                           ;pwm.c: 229: } else if (Motors[i].duty != Motors[i].target) {
  1823  001700  D032               	goto	l1828
  1824  001702                     l1824:
  1825  001702  C06D  F03B         	movff	AcceleratePWM@i,___wmul@multiplier
  1826  001706  C06E  F03C         	movff	AcceleratePWM@i+1,___wmul@multiplier+1
  1827  00170A  0E00               	movlw	0
  1828  00170C  6E3E               	movwf	___wmul@multiplicand+1,c
  1829  00170E  0E07               	movlw	7
  1830  001710  6E3D               	movwf	___wmul@multiplicand,c
  1831  001712  EC4B  F00C         	call	___wmul	;wreg free
  1832  001716  0E05               	movlw	5
  1833  001718  263B               	addwf	?___wmul,f,c
  1834  00171A  0E00               	movlw	0
  1835  00171C  223C               	addwfc	?___wmul+1,f,c
  1836  00171E  0E01               	movlw	low _Motors
  1837  001720  243B               	addwf	?___wmul,w,c
  1838  001722  6ED9               	movwf	fsr2l,c
  1839  001724  0E00               	movlw	high _Motors
  1840  001726  203C               	addwfc	?___wmul+1,w,c
  1841  001728  6EDA               	movwf	fsr2h,c
  1842  00172A  C06D  F03B         	movff	AcceleratePWM@i,___wmul@multiplier
  1843  00172E  C06E  F03C         	movff	AcceleratePWM@i+1,___wmul@multiplier+1
  1844  001732  0E00               	movlw	0
  1845  001734  6E3E               	movwf	___wmul@multiplicand+1,c
  1846  001736  0E07               	movlw	7
  1847  001738  6E3D               	movwf	___wmul@multiplicand,c
  1848  00173A  EC4B  F00C         	call	___wmul	;wreg free
  1849  00173E  0E04               	movlw	4
  1850  001740  263B               	addwf	?___wmul,f,c
  1851  001742  0E00               	movlw	0
  1852  001744  223C               	addwfc	?___wmul+1,f,c
  1853  001746  0E01               	movlw	low _Motors
  1854  001748  243B               	addwf	?___wmul,w,c
  1855  00174A  6EE1               	movwf	fsr1l,c
  1856  00174C  0E00               	movlw	high _Motors
  1857  00174E  203C               	addwfc	?___wmul+1,w,c
  1858  001750  6EE2               	movwf	fsr1h,c
  1859  001752  50DE               	movf	postinc2,w,c
  1860  001754  18E6               	xorwf	postinc1,w,c
  1861  001756  B4D8               	btfsc	status,2,c
  1862  001758  D006               	goto	l1828
  1863                           
  1864                           ;pwm.c: 230: AccelerateMotor(i);
  1865  00175A  C06D  F067         	movff	AcceleratePWM@i,AccelerateMotor@index
  1866  00175E  C06E  F068         	movff	AcceleratePWM@i+1,AccelerateMotor@index+1
  1867  001762  ECDA  F004         	call	_AccelerateMotor	;wreg free
  1868  001766                     l1828:
  1869  001766  0100               	movlb	0	; () banked
  1870  001768  4B6D               	infsnz	AcceleratePWM@i& (0+255),f,b
  1871  00176A  2B6E               	incf	(AcceleratePWM@i+1)& (0+255),f,b
  1872                           
  1873                           ; BSR set to: 0
  1874  00176C  0100               	movlb	0	; () banked
  1875  00176E  BF6E               	btfsc	(AcceleratePWM@i+1)& (0+255),7,b
  1876  001770  D775               	goto	l1814
  1877  001772  0100               	movlb	0	; () banked
  1878  001774  516E               	movf	(AcceleratePWM@i+1)& (0+255),w,b
  1879  001776  E101               	bnz	l252
  1880  001778  D76A               	goto	L3
  1881  00177A                     l252:
  1882                           
  1883                           ; BSR set to: 0
  1884  00177A  0012               	return		;funcret
  1885  00177C                     __end_of_AcceleratePWM:
  1886                           	opt stack 0
  1887                           tblptru	equ	0xFF8
  1888                           tblptrh	equ	0xFF7
  1889                           tblptrl	equ	0xFF6
  1890                           tablat	equ	0xFF5
  1891                           intcon	equ	0xFF2
  1892                           intcon2	equ	0xFF1
  1893                           postinc0	equ	0xFEE
  1894                           wreg	equ	0xFE8
  1895                           postinc1	equ	0xFE6
  1896                           postdec1	equ	0xFE5
  1897                           fsr1h	equ	0xFE2
  1898                           fsr1l	equ	0xFE1
  1899                           indf2	equ	0xFDF
  1900                           postinc2	equ	0xFDE
  1901                           fsr2h	equ	0xFDA
  1902                           fsr2l	equ	0xFD9
  1903                           status	equ	0xFD8
  1904                           
  1905 ;; *************** function _StopMotor *****************
  1906 ;; Defined at:
  1907 ;;		line 151 in file "pwm.c"
  1908 ;; Parameters:    Size  Location     Type
  1909 ;;  index           2    7[BANK0 ] int 
  1910 ;; Auto vars:     Size  Location     Type
  1911 ;;		None
  1912 ;; Return value:  Size  Location     Type
  1913 ;;                  1    wreg      void 
  1914 ;; Registers used:
  1915 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1916 ;; Tracked objects:
  1917 ;;		On entry : 0/0
  1918 ;;		On exit  : 0/0
  1919 ;;		Unchanged: 0/0
  1920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1921 ;;      Params:         0       2       0       0
  1922 ;;      Locals:         0       0       0       0
  1923 ;;      Temps:          1       0       0       0
  1924 ;;      Totals:         1       2       0       0
  1925 ;;Total ram usage:        3 bytes
  1926 ;; Hardware stack levels used:    1
  1927 ;; Hardware stack levels required when called:    3
  1928 ;; This function calls:
  1929 ;;		_ExponentialProfile
  1930 ;;		_SetPin
  1931 ;;		___wmul
  1932 ;; This function is called by:
  1933 ;;		_AcceleratePWM
  1934 ;; This function uses a non-reentrant model
  1935 ;;
  1936                           
  1937                           	psect	text6
  1938  00118A                     __ptext6:
  1939                           	opt stack 0
  1940  00118A                     _StopMotor:
  1941                           	opt stack 25
  1942                           
  1943                           ;pwm.c: 152: if (Motors[index].duty == 0 && Motors[index].direction != Motors[index].tar
      +                          getDirection) {
  1944                           
  1945                           ; BSR set to: 0
  1946                           ;incstack = 0
  1947  00118A  C067  F03B         	movff	StopMotor@index,___wmul@multiplier
  1948  00118E  C068  F03C         	movff	StopMotor@index+1,___wmul@multiplier+1
  1949  001192  0E00               	movlw	0
  1950  001194  6E3E               	movwf	___wmul@multiplicand+1,c
  1951  001196  0E07               	movlw	7
  1952  001198  6E3D               	movwf	___wmul@multiplicand,c
  1953  00119A  EC4B  F00C         	call	___wmul	;wreg free
  1954  00119E  0E04               	movlw	4
  1955  0011A0  263B               	addwf	?___wmul,f,c
  1956  0011A2  0E00               	movlw	0
  1957  0011A4  223C               	addwfc	?___wmul+1,f,c
  1958  0011A6  0E01               	movlw	low _Motors
  1959  0011A8  243B               	addwf	?___wmul,w,c
  1960  0011AA  6ED9               	movwf	fsr2l,c
  1961  0011AC  0E00               	movlw	high _Motors
  1962  0011AE  203C               	addwfc	?___wmul+1,w,c
  1963  0011B0  6EDA               	movwf	fsr2h,c
  1964  0011B2  50DF               	movf	indf2,w,c
  1965  0011B4  A4D8               	btfss	status,2,c
  1966  0011B6  D16D               	goto	l1772
  1967  0011B8  C067  F03B         	movff	StopMotor@index,___wmul@multiplier
  1968  0011BC  C068  F03C         	movff	StopMotor@index+1,___wmul@multiplier+1
  1969  0011C0  0E00               	movlw	0
  1970  0011C2  6E3E               	movwf	___wmul@multiplicand+1,c
  1971  0011C4  0E07               	movlw	7
  1972  0011C6  6E3D               	movwf	___wmul@multiplicand,c
  1973  0011C8  EC4B  F00C         	call	___wmul	;wreg free
  1974  0011CC  0E01               	movlw	low _Motors
  1975  0011CE  243B               	addwf	?___wmul,w,c
  1976  0011D0  6ED9               	movwf	fsr2l,c
  1977  0011D2  0E00               	movlw	high _Motors
  1978  0011D4  203C               	addwfc	?___wmul+1,w,c
  1979  0011D6  6EDA               	movwf	fsr2h,c
  1980  0011D8  A8DF               	btfss	indf2,4,c
  1981  0011DA  D002               	goto	u2370
  1982  0011DC  0E01               	movlw	1
  1983  0011DE  D001               	goto	u2372
  1984  0011E0                     u2370:
  1985  0011E0  0E00               	movlw	0
  1986  0011E2                     u2372:
  1987  0011E2  6E44               	movwf	??_StopMotor& (0+255),c
  1988  0011E4  C067  F03B         	movff	StopMotor@index,___wmul@multiplier
  1989  0011E8  C068  F03C         	movff	StopMotor@index+1,___wmul@multiplier+1
  1990  0011EC  0E00               	movlw	0
  1991  0011EE  6E3E               	movwf	___wmul@multiplicand+1,c
  1992  0011F0  0E07               	movlw	7
  1993  0011F2  6E3D               	movwf	___wmul@multiplicand,c
  1994  0011F4  EC4B  F00C         	call	___wmul	;wreg free
  1995  0011F8  0E01               	movlw	low _Motors
  1996  0011FA  243B               	addwf	?___wmul,w,c
  1997  0011FC  6ED9               	movwf	fsr2l,c
  1998  0011FE  0E00               	movlw	high _Motors
  1999  001200  203C               	addwfc	?___wmul+1,w,c
  2000  001202  6EDA               	movwf	fsr2h,c
  2001  001204  A6DF               	btfss	indf2,3,c
  2002  001206  D002               	goto	u2380
  2003  001208  0E01               	movlw	1
  2004  00120A  D001               	goto	u2382
  2005  00120C                     u2380:
  2006  00120C  0E00               	movlw	0
  2007  00120E                     u2382:
  2008  00120E  1A44               	xorwf	??_StopMotor,f,c
  2009  001210  B4D8               	btfsc	status,2,c
  2010  001212  D13F               	goto	l1772
  2011                           
  2012                           ;pwm.c: 153: Motors[index].duty = Motors[index].targetDirection;
  2013  001214  C067  F03B         	movff	StopMotor@index,___wmul@multiplier
  2014  001218  C068  F03C         	movff	StopMotor@index+1,___wmul@multiplier+1
  2015  00121C  0E00               	movlw	0
  2016  00121E  6E3E               	movwf	___wmul@multiplicand+1,c
  2017  001220  0E07               	movlw	7
  2018  001222  6E3D               	movwf	___wmul@multiplicand,c
  2019  001224  EC4B  F00C         	call	___wmul	;wreg free
  2020  001228  0E04               	movlw	4
  2021  00122A  263B               	addwf	?___wmul,f,c
  2022  00122C  0E00               	movlw	0
  2023  00122E  223C               	addwfc	?___wmul+1,f,c
  2024  001230  0E01               	movlw	low _Motors
  2025  001232  243B               	addwf	?___wmul,w,c
  2026  001234  6ED9               	movwf	fsr2l,c
  2027  001236  0E00               	movlw	high _Motors
  2028  001238  203C               	addwfc	?___wmul+1,w,c
  2029  00123A  6EDA               	movwf	fsr2h,c
  2030  00123C  C067  F03B         	movff	StopMotor@index,___wmul@multiplier
  2031  001240  C068  F03C         	movff	StopMotor@index+1,___wmul@multiplier+1
  2032  001244  0E00               	movlw	0
  2033  001246  6E3E               	movwf	___wmul@multiplicand+1,c
  2034  001248  0E07               	movlw	7
  2035  00124A  6E3D               	movwf	___wmul@multiplicand,c
  2036  00124C  EC4B  F00C         	call	___wmul	;wreg free
  2037  001250  0E01               	movlw	low _Motors
  2038  001252  243B               	addwf	?___wmul,w,c
  2039  001254  6EE1               	movwf	fsr1l,c
  2040  001256  0E00               	movlw	high _Motors
  2041  001258  203C               	addwfc	?___wmul+1,w,c
  2042  00125A  6EE2               	movwf	fsr1h,c
  2043  00125C  A8E7               	btfss	indf1,4,c
  2044  00125E  D002               	goto	u2400
  2045  001260  0E01               	movlw	1
  2046  001262  D001               	goto	u2406
  2047  001264                     u2400:
  2048  001264  0E00               	movlw	0
  2049  001266                     u2406:
  2050  001266  6EDF               	movwf	indf2,c
  2051                           
  2052                           ;pwm.c: 155: SetPin(Motors[index].dirPin, Motors[index].direction);
  2053  001268  C067  F03B         	movff	StopMotor@index,___wmul@multiplier
  2054  00126C  C068  F03C         	movff	StopMotor@index+1,___wmul@multiplier+1
  2055  001270  0E00               	movlw	0
  2056  001272  6E3E               	movwf	___wmul@multiplicand+1,c
  2057  001274  0E07               	movlw	7
  2058  001276  6E3D               	movwf	___wmul@multiplicand,c
  2059  001278  EC4B  F00C         	call	___wmul	;wreg free
  2060  00127C  0E01               	movlw	low _Motors
  2061  00127E  243B               	addwf	?___wmul,w,c
  2062  001280  6ED9               	movwf	fsr2l,c
  2063  001282  0E00               	movlw	high _Motors
  2064  001284  203C               	addwfc	?___wmul+1,w,c
  2065  001286  6EDA               	movwf	fsr2h,c
  2066  001288  0E00               	movlw	0
  2067  00128A  B6DF               	btfsc	indf2,3,c
  2068  00128C  0E01               	movlw	1
  2069  00128E  6E41               	movwf	SetPin@value,c
  2070  001290  C067  F03B         	movff	StopMotor@index,___wmul@multiplier
  2071  001294  C068  F03C         	movff	StopMotor@index+1,___wmul@multiplier+1
  2072  001298  0E00               	movlw	0
  2073  00129A  6E3E               	movwf	___wmul@multiplicand+1,c
  2074  00129C  0E07               	movlw	7
  2075  00129E  6E3D               	movwf	___wmul@multiplicand,c
  2076  0012A0  EC4B  F00C         	call	___wmul	;wreg free
  2077  0012A4  0E02               	movlw	2
  2078  0012A6  263B               	addwf	?___wmul,f,c
  2079  0012A8  0E00               	movlw	0
  2080  0012AA  223C               	addwfc	?___wmul+1,f,c
  2081  0012AC  0E01               	movlw	low _Motors
  2082  0012AE  243B               	addwf	?___wmul,w,c
  2083  0012B0  6ED9               	movwf	fsr2l,c
  2084  0012B2  0E00               	movlw	high _Motors
  2085  0012B4  203C               	addwfc	?___wmul+1,w,c
  2086  0012B6  6EDA               	movwf	fsr2h,c
  2087  0012B8  50DF               	movf	indf2,w,c
  2088  0012BA  ECBE  F00B         	call	_SetPin
  2089                           
  2090                           ;pwm.c: 156: SetPin(Motors[index].cdirPin, !Motors[index].direction);
  2091  0012BE  C067  F03B         	movff	StopMotor@index,___wmul@multiplier
  2092  0012C2  C068  F03C         	movff	StopMotor@index+1,___wmul@multiplier+1
  2093  0012C6  0E00               	movlw	0
  2094  0012C8  6E3E               	movwf	___wmul@multiplicand+1,c
  2095  0012CA  0E07               	movlw	7
  2096  0012CC  6E3D               	movwf	___wmul@multiplicand,c
  2097  0012CE  EC4B  F00C         	call	___wmul	;wreg free
  2098  0012D2  0E01               	movlw	low _Motors
  2099  0012D4  243B               	addwf	?___wmul,w,c
  2100  0012D6  6ED9               	movwf	fsr2l,c
  2101  0012D8  0E00               	movlw	high _Motors
  2102  0012DA  203C               	addwfc	?___wmul+1,w,c
  2103  0012DC  6EDA               	movwf	fsr2h,c
  2104  0012DE  B6DF               	btfsc	indf2,3,c
  2105  0012E0  D002               	goto	u2410
  2106  0012E2  0E01               	movlw	1
  2107  0012E4  D001               	goto	u2420
  2108  0012E6                     u2410:
  2109  0012E6  0E00               	movlw	0
  2110  0012E8                     u2420:
  2111  0012E8  6E41               	movwf	SetPin@value,c
  2112  0012EA  C067  F03B         	movff	StopMotor@index,___wmul@multiplier
  2113  0012EE  C068  F03C         	movff	StopMotor@index+1,___wmul@multiplier+1
  2114  0012F2  0E00               	movlw	0
  2115  0012F4  6E3E               	movwf	___wmul@multiplicand+1,c
  2116  0012F6  0E07               	movlw	7
  2117  0012F8  6E3D               	movwf	___wmul@multiplicand,c
  2118  0012FA  EC4B  F00C         	call	___wmul	;wreg free
  2119  0012FE  0E03               	movlw	3
  2120  001300  263B               	addwf	?___wmul,f,c
  2121  001302  0E00               	movlw	0
  2122  001304  223C               	addwfc	?___wmul+1,f,c
  2123  001306  0E01               	movlw	low _Motors
  2124  001308  243B               	addwf	?___wmul,w,c
  2125  00130A  6ED9               	movwf	fsr2l,c
  2126  00130C  0E00               	movlw	high _Motors
  2127  00130E  203C               	addwfc	?___wmul+1,w,c
  2128  001310  6EDA               	movwf	fsr2h,c
  2129  001312  50DF               	movf	indf2,w,c
  2130  001314  ECBE  F00B         	call	_SetPin
  2131                           
  2132                           ;pwm.c: 157: } else {
  2133  001318  0012               	return	
  2134  00131A                     l1756:
  2135                           
  2136                           ;pwm.c: 160: Motors[index].duty = 0;
  2137  00131A  C067  F03B         	movff	StopMotor@index,___wmul@multiplier
  2138  00131E  C068  F03C         	movff	StopMotor@index+1,___wmul@multiplier+1
  2139  001322  0E00               	movlw	0
  2140  001324  6E3E               	movwf	___wmul@multiplicand+1,c
  2141  001326  0E07               	movlw	7
  2142  001328  6E3D               	movwf	___wmul@multiplicand,c
  2143  00132A  EC4B  F00C         	call	___wmul	;wreg free
  2144  00132E  0E04               	movlw	4
  2145  001330  263B               	addwf	?___wmul,f,c
  2146  001332  0E00               	movlw	0
  2147  001334  223C               	addwfc	?___wmul+1,f,c
  2148  001336  0E01               	movlw	low _Motors
  2149  001338  243B               	addwf	?___wmul,w,c
  2150  00133A  6ED9               	movwf	fsr2l,c
  2151  00133C  0E00               	movlw	high _Motors
  2152  00133E  203C               	addwfc	?___wmul+1,w,c
  2153  001340  6EDA               	movwf	fsr2h,c
  2154  001342  0E00               	movlw	0
  2155  001344  6EDF               	movwf	indf2,c
  2156                           
  2157                           ;pwm.c: 161: break;
  2158  001346  0012               	return	
  2159  001348                     l1758:
  2160                           
  2161                           ;pwm.c: 163: if (Motors[index].duty > MinimumDuty) {
  2162  001348  C067  F03B         	movff	StopMotor@index,___wmul@multiplier
  2163  00134C  C068  F03C         	movff	StopMotor@index+1,___wmul@multiplier+1
  2164  001350  0E00               	movlw	0
  2165  001352  6E3E               	movwf	___wmul@multiplicand+1,c
  2166  001354  0E07               	movlw	7
  2167  001356  6E3D               	movwf	___wmul@multiplicand,c
  2168  001358  EC4B  F00C         	call	___wmul	;wreg free
  2169  00135C  0E04               	movlw	4
  2170  00135E  263B               	addwf	?___wmul,f,c
  2171  001360  0E00               	movlw	0
  2172  001362  223C               	addwfc	?___wmul+1,f,c
  2173  001364  0E01               	movlw	low _Motors
  2174  001366  243B               	addwf	?___wmul,w,c
  2175  001368  6ED9               	movwf	fsr2l,c
  2176  00136A  0E00               	movlw	high _Motors
  2177  00136C  203C               	addwfc	?___wmul+1,w,c
  2178  00136E  6EDA               	movwf	fsr2h,c
  2179  001370  50DE               	movf	postinc2,w,c
  2180  001372  5C23               	subwf	_MinimumDuty,w,c
  2181  001374  B0D8               	btfsc	status,0,c
  2182  001376  D016               	goto	l1762
  2183                           
  2184                           ;pwm.c: 164: Motors[index].duty -= 1;
  2185  001378  C067  F03B         	movff	StopMotor@index,___wmul@multiplier
  2186  00137C  C068  F03C         	movff	StopMotor@index+1,___wmul@multiplier+1
  2187  001380  0E00               	movlw	0
  2188  001382  6E3E               	movwf	___wmul@multiplicand+1,c
  2189  001384  0E07               	movlw	7
  2190  001386  6E3D               	movwf	___wmul@multiplicand,c
  2191  001388  EC4B  F00C         	call	___wmul	;wreg free
  2192  00138C  0E04               	movlw	4
  2193  00138E  263B               	addwf	?___wmul,f,c
  2194  001390  0E00               	movlw	0
  2195  001392  223C               	addwfc	?___wmul+1,f,c
  2196  001394  0E01               	movlw	low _Motors
  2197  001396  243B               	addwf	?___wmul,w,c
  2198  001398  6ED9               	movwf	fsr2l,c
  2199  00139A  0E00               	movlw	high _Motors
  2200  00139C  203C               	addwfc	?___wmul+1,w,c
  2201  00139E  6EDA               	movwf	fsr2h,c
  2202  0013A0  06DF               	decf	indf2,f,c
  2203                           
  2204                           ;pwm.c: 165: } else {
  2205  0013A2  0012               	return	
  2206  0013A4                     l1762:
  2207                           
  2208                           ;pwm.c: 166: Motors[index].duty = 0;
  2209  0013A4  C067  F03B         	movff	StopMotor@index,___wmul@multiplier
  2210  0013A8  C068  F03C         	movff	StopMotor@index+1,___wmul@multiplier+1
  2211  0013AC  0E00               	movlw	0
  2212  0013AE  6E3E               	movwf	___wmul@multiplicand+1,c
  2213  0013B0  0E07               	movlw	7
  2214  0013B2  6E3D               	movwf	___wmul@multiplicand,c
  2215  0013B4  EC4B  F00C         	call	___wmul	;wreg free
  2216  0013B8  0E04               	movlw	4
  2217  0013BA  263B               	addwf	?___wmul,f,c
  2218  0013BC  0E00               	movlw	0
  2219  0013BE  223C               	addwfc	?___wmul+1,f,c
  2220  0013C0  0E01               	movlw	low _Motors
  2221  0013C2  243B               	addwf	?___wmul,w,c
  2222  0013C4  6ED9               	movwf	fsr2l,c
  2223  0013C6  0E00               	movlw	high _Motors
  2224  0013C8  203C               	addwfc	?___wmul+1,w,c
  2225  0013CA  6EDA               	movwf	fsr2h,c
  2226  0013CC  0E00               	movlw	0
  2227  0013CE  6EDF               	movwf	indf2,c
  2228                           
  2229                           ;pwm.c: 167: }
  2230                           ;pwm.c: 168: break;
  2231  0013D0  0012               	return	
  2232  0013D2                     l1764:
  2233                           
  2234                           ;pwm.c: 170: if (MinimumDuty < Motors[index].duty) {
  2235  0013D2  C067  F03B         	movff	StopMotor@index,___wmul@multiplier
  2236  0013D6  C068  F03C         	movff	StopMotor@index+1,___wmul@multiplier+1
  2237  0013DA  0E00               	movlw	0
  2238  0013DC  6E3E               	movwf	___wmul@multiplicand+1,c
  2239  0013DE  0E07               	movlw	7
  2240  0013E0  6E3D               	movwf	___wmul@multiplicand,c
  2241  0013E2  EC4B  F00C         	call	___wmul	;wreg free
  2242  0013E6  0E04               	movlw	4
  2243  0013E8  263B               	addwf	?___wmul,f,c
  2244  0013EA  0E00               	movlw	0
  2245  0013EC  223C               	addwfc	?___wmul+1,f,c
  2246  0013EE  0E01               	movlw	low _Motors
  2247  0013F0  243B               	addwf	?___wmul,w,c
  2248  0013F2  6ED9               	movwf	fsr2l,c
  2249  0013F4  0E00               	movlw	high _Motors
  2250  0013F6  203C               	addwfc	?___wmul+1,w,c
  2251  0013F8  6EDA               	movwf	fsr2h,c
  2252  0013FA  50DE               	movf	postinc2,w,c
  2253  0013FC  5C23               	subwf	_MinimumDuty,w,c
  2254  0013FE  B0D8               	btfsc	status,0,c
  2255  001400  D031               	goto	l1768
  2256                           
  2257                           ;pwm.c: 171: Motors[index].duty -= ExponentialProfile(Motors[index].duty, MinimumDuty);
  2258  001402  C023  F041         	movff	_MinimumDuty,ExponentialProfile@target
  2259  001406  C067  F03B         	movff	StopMotor@index,___wmul@multiplier
  2260  00140A  C068  F03C         	movff	StopMotor@index+1,___wmul@multiplier+1
  2261  00140E  0E00               	movlw	0
  2262  001410  6E3E               	movwf	___wmul@multiplicand+1,c
  2263  001412  0E07               	movlw	7
  2264  001414  6E3D               	movwf	___wmul@multiplicand,c
  2265  001416  EC4B  F00C         	call	___wmul	;wreg free
  2266  00141A  0E04               	movlw	4
  2267  00141C  263B               	addwf	?___wmul,f,c
  2268  00141E  0E00               	movlw	0
  2269  001420  223C               	addwfc	?___wmul+1,f,c
  2270  001422  0E01               	movlw	low _Motors
  2271  001424  243B               	addwf	?___wmul,w,c
  2272  001426  6ED9               	movwf	fsr2l,c
  2273  001428  0E00               	movlw	high _Motors
  2274  00142A  203C               	addwfc	?___wmul+1,w,c
  2275  00142C  6EDA               	movwf	fsr2h,c
  2276  00142E  50DF               	movf	indf2,w,c
  2277  001430  EC08  F007         	call	_ExponentialProfile
  2278  001434  6E44               	movwf	??_StopMotor& (0+255),c
  2279  001436  C067  F03B         	movff	StopMotor@index,___wmul@multiplier
  2280  00143A  C068  F03C         	movff	StopMotor@index+1,___wmul@multiplier+1
  2281  00143E  0E00               	movlw	0
  2282  001440  6E3E               	movwf	___wmul@multiplicand+1,c
  2283  001442  0E07               	movlw	7
  2284  001444  6E3D               	movwf	___wmul@multiplicand,c
  2285  001446  EC4B  F00C         	call	___wmul	;wreg free
  2286  00144A  0E04               	movlw	4
  2287  00144C  263B               	addwf	?___wmul,f,c
  2288  00144E  0E00               	movlw	0
  2289  001450  223C               	addwfc	?___wmul+1,f,c
  2290  001452  0E01               	movlw	low _Motors
  2291  001454  243B               	addwf	?___wmul,w,c
  2292  001456  6ED9               	movwf	fsr2l,c
  2293  001458  0E00               	movlw	high _Motors
  2294  00145A  203C               	addwfc	?___wmul+1,w,c
  2295  00145C  6EDA               	movwf	fsr2h,c
  2296  00145E  5044               	movf	??_StopMotor,w,c
  2297  001460  5EDF               	subwf	indf2,f,c
  2298                           
  2299                           ;pwm.c: 172: } else {
  2300  001462  0012               	return	
  2301  001464                     l1768:
  2302                           
  2303                           ;pwm.c: 173: Motors[index].duty = 0;
  2304  001464  C067  F03B         	movff	StopMotor@index,___wmul@multiplier
  2305  001468  C068  F03C         	movff	StopMotor@index+1,___wmul@multiplier+1
  2306  00146C  0E00               	movlw	0
  2307  00146E  6E3E               	movwf	___wmul@multiplicand+1,c
  2308  001470  0E07               	movlw	7
  2309  001472  6E3D               	movwf	___wmul@multiplicand,c
  2310  001474  EC4B  F00C         	call	___wmul	;wreg free
  2311  001478  0E04               	movlw	4
  2312  00147A  263B               	addwf	?___wmul,f,c
  2313  00147C  0E00               	movlw	0
  2314  00147E  223C               	addwfc	?___wmul+1,f,c
  2315  001480  0E01               	movlw	low _Motors
  2316  001482  243B               	addwf	?___wmul,w,c
  2317  001484  6ED9               	movwf	fsr2l,c
  2318  001486  0E00               	movlw	high _Motors
  2319  001488  203C               	addwfc	?___wmul+1,w,c
  2320  00148A  6EDA               	movwf	fsr2h,c
  2321  00148C  0E00               	movlw	0
  2322  00148E  6EDF               	movwf	indf2,c
  2323                           
  2324                           ;pwm.c: 178: }
  2325                           
  2326                           ;pwm.c: 177: break;
  2327                           
  2328                           ;pwm.c: 176: default:
  2329                           
  2330                           ;pwm.c: 174: }
  2331                           ;pwm.c: 175: break;
  2332  001490  0012               	return	
  2333  001492                     l1772:
  2334  001492  5047               	movf	_AccelType,w,c
  2335                           
  2336                           ; Switch size 1, requested type "space"
  2337                           ; Number of cases is 3, Range of values is 0 to 2
  2338                           ; switch strategies available:
  2339                           ; Name         Instructions Cycles
  2340                           ; simple_byte           10     6 (average)
  2341                           ;	Chosen strategy is simple_byte
  2342  001494  0A00               	xorlw	0	; case 0
  2343  001496  B4D8               	btfsc	status,2,c
  2344  001498  D740               	goto	l1756
  2345  00149A  0A01               	xorlw	1	; case 1
  2346  00149C  B4D8               	btfsc	status,2,c
  2347  00149E  D754               	goto	l1758
  2348  0014A0  0A03               	xorlw	3	; case 2
  2349  0014A2  A4D8               	btfss	status,2,c
  2350  0014A4  0012               	return	
  2351  0014A6  D795               	goto	l1764
  2352  0014A8                     __end_of_StopMotor:
  2353                           	opt stack 0
  2354                           tblptru	equ	0xFF8
  2355                           tblptrh	equ	0xFF7
  2356                           tblptrl	equ	0xFF6
  2357                           tablat	equ	0xFF5
  2358                           intcon	equ	0xFF2
  2359                           intcon2	equ	0xFF1
  2360                           postinc0	equ	0xFEE
  2361                           wreg	equ	0xFE8
  2362                           indf1	equ	0xFE7
  2363                           postinc1	equ	0xFE6
  2364                           postdec1	equ	0xFE5
  2365                           fsr1h	equ	0xFE2
  2366                           fsr1l	equ	0xFE1
  2367                           indf2	equ	0xFDF
  2368                           postinc2	equ	0xFDE
  2369                           fsr2h	equ	0xFDA
  2370                           fsr2l	equ	0xFD9
  2371                           status	equ	0xFD8
  2372                           
  2373 ;; *************** function _SetPin *****************
  2374 ;; Defined at:
  2375 ;;		line 58 in file "pwm.c"
  2376 ;; Parameters:    Size  Location     Type
  2377 ;;  pin             1    wreg     unsigned char 
  2378 ;;  value           1   28[COMRAM] unsigned char 
  2379 ;; Auto vars:     Size  Location     Type
  2380 ;;  pin             1   29[COMRAM] unsigned char 
  2381 ;; Return value:  Size  Location     Type
  2382 ;;                  1    wreg      void 
  2383 ;; Registers used:
  2384 ;;		wreg, status,2, status,0
  2385 ;; Tracked objects:
  2386 ;;		On entry : 0/0
  2387 ;;		On exit  : 0/0
  2388 ;;		Unchanged: 0/0
  2389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2390 ;;      Params:         1       0       0       0
  2391 ;;      Locals:         1       0       0       0
  2392 ;;      Temps:          0       0       0       0
  2393 ;;      Totals:         2       0       0       0
  2394 ;;Total ram usage:        2 bytes
  2395 ;; Hardware stack levels used:    1
  2396 ;; Hardware stack levels required when called:    2
  2397 ;; This function calls:
  2398 ;;		Nothing
  2399 ;; This function is called by:
  2400 ;;		_StopMotor
  2401 ;;		_CheckPWMOutput
  2402 ;; This function uses a non-reentrant model
  2403 ;;
  2404                           
  2405                           	psect	text7
  2406  00177C                     __ptext7:
  2407                           	opt stack 0
  2408  00177C                     _SetPin:
  2409                           	opt stack 27
  2410                           
  2411                           ;incstack = 0
  2412                           ;SetPin@pin stored from wreg
  2413  00177C  6E42               	movwf	SetPin@pin,c
  2414                           
  2415                           ;pwm.c: 59: switch (pin) {
  2416  00177E  D048               	goto	l1678
  2417  001780                     l167:
  2418                           
  2419                           ;pwm.c: 61: LATCbits.LC0 = value;
  2420  001780  B041               	btfsc	SetPin@value,0,c
  2421  001782  D002               	bra	u2115
  2422  001784  908B               	bcf	3979,0,c	;volatile
  2423  001786  D001               	bra	u2116
  2424  001788                     u2115:
  2425  001788  808B               	bsf	3979,0,c	;volatile
  2426  00178A                     u2116:
  2427                           
  2428                           ;pwm.c: 62: break;
  2429  00178A  0012               	return	
  2430  00178C                     l169:
  2431                           
  2432                           ;pwm.c: 64: LATCbits.LC1 = value;
  2433  00178C  B041               	btfsc	SetPin@value,0,c
  2434  00178E  D002               	bra	u2125
  2435  001790  928B               	bcf	3979,1,c	;volatile
  2436  001792  D001               	bra	u2126
  2437  001794                     u2125:
  2438  001794  828B               	bsf	3979,1,c	;volatile
  2439  001796                     u2126:
  2440                           
  2441                           ;pwm.c: 65: break;
  2442  001796  0012               	return	
  2443  001798                     l170:
  2444                           
  2445                           ;pwm.c: 67: LATCbits.LC2 = value;
  2446  001798  B041               	btfsc	SetPin@value,0,c
  2447  00179A  D002               	bra	u2135
  2448  00179C  948B               	bcf	3979,2,c	;volatile
  2449  00179E  D001               	bra	u2136
  2450  0017A0                     u2135:
  2451  0017A0  848B               	bsf	3979,2,c	;volatile
  2452  0017A2                     u2136:
  2453                           
  2454                           ;pwm.c: 68: break;
  2455  0017A2  0012               	return	
  2456  0017A4                     l171:
  2457                           
  2458                           ;pwm.c: 70: LATCbits.LC3 = value;
  2459  0017A4  B041               	btfsc	SetPin@value,0,c
  2460  0017A6  D002               	bra	u2145
  2461  0017A8  968B               	bcf	3979,3,c	;volatile
  2462  0017AA  D001               	bra	u2146
  2463  0017AC                     u2145:
  2464  0017AC  868B               	bsf	3979,3,c	;volatile
  2465  0017AE                     u2146:
  2466                           
  2467                           ;pwm.c: 71: break;
  2468  0017AE  0012               	return	
  2469  0017B0                     l172:
  2470                           
  2471                           ;pwm.c: 73: LATCbits.LC4 = value;
  2472  0017B0  B041               	btfsc	SetPin@value,0,c
  2473  0017B2  D002               	bra	u2155
  2474  0017B4  988B               	bcf	3979,4,c	;volatile
  2475  0017B6  D001               	bra	u2156
  2476  0017B8                     u2155:
  2477  0017B8  888B               	bsf	3979,4,c	;volatile
  2478  0017BA                     u2156:
  2479                           
  2480                           ;pwm.c: 74: break;
  2481  0017BA  0012               	return	
  2482  0017BC                     l173:
  2483                           
  2484                           ;pwm.c: 76: LATCbits.LC5 = value;
  2485  0017BC  B041               	btfsc	SetPin@value,0,c
  2486  0017BE  D002               	bra	u2165
  2487  0017C0  9A8B               	bcf	3979,5,c	;volatile
  2488  0017C2  D001               	bra	u2166
  2489  0017C4                     u2165:
  2490  0017C4  8A8B               	bsf	3979,5,c	;volatile
  2491  0017C6                     u2166:
  2492                           
  2493                           ;pwm.c: 77: break;
  2494  0017C6  0012               	return	
  2495  0017C8                     l174:
  2496                           
  2497                           ;pwm.c: 79: LATCbits.LC6 = value;
  2498  0017C8  B041               	btfsc	SetPin@value,0,c
  2499  0017CA  D002               	bra	u2175
  2500  0017CC  9C8B               	bcf	3979,6,c	;volatile
  2501  0017CE  D001               	bra	u2176
  2502  0017D0                     u2175:
  2503  0017D0  8C8B               	bsf	3979,6,c	;volatile
  2504  0017D2                     u2176:
  2505                           
  2506                           ;pwm.c: 80: break;
  2507  0017D2  0012               	return	
  2508  0017D4                     l175:
  2509                           
  2510                           ;pwm.c: 82: LATCbits.LC7 = value;
  2511  0017D4  B041               	btfsc	SetPin@value,0,c
  2512  0017D6  D002               	bra	u2185
  2513  0017D8  9E8B               	bcf	3979,7,c	;volatile
  2514  0017DA  D001               	bra	u2186
  2515  0017DC                     u2185:
  2516  0017DC  8E8B               	bsf	3979,7,c	;volatile
  2517  0017DE                     u2186:
  2518                           
  2519                           ;pwm.c: 83: break;
  2520  0017DE  0012               	return	
  2521  0017E0                     l176:
  2522                           
  2523                           ;pwm.c: 85: LATBbits.LB5 = value;
  2524  0017E0  B041               	btfsc	SetPin@value,0,c
  2525  0017E2  D002               	bra	u2195
  2526  0017E4  9A8A               	bcf	3978,5,c	;volatile
  2527  0017E6  D001               	bra	u2196
  2528  0017E8                     u2195:
  2529  0017E8  8A8A               	bsf	3978,5,c	;volatile
  2530  0017EA                     u2196:
  2531                           
  2532                           ;pwm.c: 86: break;
  2533  0017EA  0012               	return	
  2534  0017EC                     l177:
  2535                           
  2536                           ;pwm.c: 88: LATBbits.LB7 = value;
  2537  0017EC  B041               	btfsc	SetPin@value,0,c
  2538  0017EE  D002               	bra	u2205
  2539  0017F0  9E8A               	bcf	3978,7,c	;volatile
  2540  0017F2  D001               	bra	u2206
  2541  0017F4                     u2205:
  2542  0017F4  8E8A               	bsf	3978,7,c	;volatile
  2543  0017F6                     u2206:
  2544                           
  2545                           ;pwm.c: 89: break;
  2546  0017F6  0012               	return	
  2547  0017F8                     l178:
  2548                           
  2549                           ;pwm.c: 91: LATAbits.LA4 = value;
  2550  0017F8  B041               	btfsc	SetPin@value,0,c
  2551  0017FA  D002               	bra	u2215
  2552  0017FC  9889               	bcf	3977,4,c	;volatile
  2553  0017FE  D001               	bra	u2216
  2554  001800                     u2215:
  2555  001800  8889               	bsf	3977,4,c	;volatile
  2556  001802                     u2216:
  2557                           
  2558                           ;pwm.c: 92: break;
  2559  001802  0012               	return	
  2560  001804                     l179:
  2561                           
  2562                           ;pwm.c: 94: LATAbits.LA5 = value;
  2563  001804  B041               	btfsc	SetPin@value,0,c
  2564  001806  D002               	bra	u2225
  2565  001808  9A89               	bcf	3977,5,c	;volatile
  2566  00180A  D001               	bra	u2226
  2567  00180C                     u2225:
  2568  00180C  8A89               	bsf	3977,5,c	;volatile
  2569  00180E                     u2226:
  2570                           
  2571                           ;pwm.c: 96: }
  2572                           
  2573                           ;pwm.c: 95: break;
  2574  00180E  0012               	return	
  2575  001810                     l1678:
  2576  001810  5042               	movf	SetPin@pin,w,c
  2577                           
  2578                           ; Switch size 1, requested type "space"
  2579                           ; Number of cases is 12, Range of values is 0 to 11
  2580                           ; switch strategies available:
  2581                           ; Name         Instructions Cycles
  2582                           ; simple_byte           37    19 (average)
  2583                           ;	Chosen strategy is simple_byte
  2584  001812  0A00               	xorlw	0	; case 0
  2585  001814  B4D8               	btfsc	status,2,c
  2586  001816  D7B4               	goto	l167
  2587  001818  0A01               	xorlw	1	; case 1
  2588  00181A  B4D8               	btfsc	status,2,c
  2589  00181C  D7B7               	goto	l169
  2590  00181E  0A03               	xorlw	3	; case 2
  2591  001820  B4D8               	btfsc	status,2,c
  2592  001822  D7BA               	goto	l170
  2593  001824  0A01               	xorlw	1	; case 3
  2594  001826  B4D8               	btfsc	status,2,c
  2595  001828  D7BD               	goto	l171
  2596  00182A  0A07               	xorlw	7	; case 4
  2597  00182C  B4D8               	btfsc	status,2,c
  2598  00182E  D7C0               	goto	l172
  2599  001830  0A01               	xorlw	1	; case 5
  2600  001832  B4D8               	btfsc	status,2,c
  2601  001834  D7C3               	goto	l173
  2602  001836  0A03               	xorlw	3	; case 6
  2603  001838  B4D8               	btfsc	status,2,c
  2604  00183A  D7C6               	goto	l174
  2605  00183C  0A01               	xorlw	1	; case 7
  2606  00183E  B4D8               	btfsc	status,2,c
  2607  001840  D7C9               	goto	l175
  2608  001842  0A0F               	xorlw	15	; case 8
  2609  001844  B4D8               	btfsc	status,2,c
  2610  001846  D7CC               	goto	l176
  2611  001848  0A01               	xorlw	1	; case 9
  2612  00184A  B4D8               	btfsc	status,2,c
  2613  00184C  D7CF               	goto	l177
  2614  00184E  0A03               	xorlw	3	; case 10
  2615  001850  B4D8               	btfsc	status,2,c
  2616  001852  D7D2               	goto	l178
  2617  001854  0A01               	xorlw	1	; case 11
  2618  001856  A4D8               	btfss	status,2,c
  2619  001858  0012               	return	
  2620  00185A  D7D4               	goto	l179
  2621  00185C                     __end_of_SetPin:
  2622                           	opt stack 0
  2623                           tblptru	equ	0xFF8
  2624                           tblptrh	equ	0xFF7
  2625                           tblptrl	equ	0xFF6
  2626                           tablat	equ	0xFF5
  2627                           intcon	equ	0xFF2
  2628                           intcon2	equ	0xFF1
  2629                           postinc0	equ	0xFEE
  2630                           wreg	equ	0xFE8
  2631                           indf1	equ	0xFE7
  2632                           postinc1	equ	0xFE6
  2633                           postdec1	equ	0xFE5
  2634                           fsr1h	equ	0xFE2
  2635                           fsr1l	equ	0xFE1
  2636                           indf2	equ	0xFDF
  2637                           postinc2	equ	0xFDE
  2638                           fsr2h	equ	0xFDA
  2639                           fsr2l	equ	0xFD9
  2640                           status	equ	0xFD8
  2641                           
  2642 ;; *************** function _AccelerateMotor *****************
  2643 ;; Defined at:
  2644 ;;		line 182 in file "pwm.c"
  2645 ;; Parameters:    Size  Location     Type
  2646 ;;  index           2    7[BANK0 ] int 
  2647 ;; Auto vars:     Size  Location     Type
  2648 ;;		None
  2649 ;; Return value:  Size  Location     Type
  2650 ;;                  1    wreg      void 
  2651 ;; Registers used:
  2652 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2653 ;; Tracked objects:
  2654 ;;		On entry : 0/0
  2655 ;;		On exit  : 0/0
  2656 ;;		Unchanged: 0/0
  2657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2658 ;;      Params:         0       2       0       0
  2659 ;;      Locals:         0       0       0       0
  2660 ;;      Temps:          0       2       0       0
  2661 ;;      Totals:         0       4       0       0
  2662 ;;Total ram usage:        4 bytes
  2663 ;; Hardware stack levels used:    1
  2664 ;; Hardware stack levels required when called:    3
  2665 ;; This function calls:
  2666 ;;		_ExponentialProfile
  2667 ;;		___wmul
  2668 ;; This function is called by:
  2669 ;;		_AcceleratePWM
  2670 ;; This function uses a non-reentrant model
  2671 ;;
  2672                           
  2673                           	psect	text8
  2674  0009B4                     __ptext8:
  2675                           	opt stack 0
  2676  0009B4                     _AccelerateMotor:
  2677                           	opt stack 25
  2678                           
  2679                           ;pwm.c: 183: if (Motors[index].duty < MinimumDuty && Motors[index].target >= MinimumDuty
      +                          ) {
  2680                           
  2681                           ;incstack = 0
  2682  0009B4  C067  F03B         	movff	AccelerateMotor@index,___wmul@multiplier
  2683  0009B8  C068  F03C         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  2684  0009BC  0E00               	movlw	0
  2685  0009BE  6E3E               	movwf	___wmul@multiplicand+1,c
  2686  0009C0  0E07               	movlw	7
  2687  0009C2  6E3D               	movwf	___wmul@multiplicand,c
  2688  0009C4  EC4B  F00C         	call	___wmul	;wreg free
  2689  0009C8  0E04               	movlw	4
  2690  0009CA  263B               	addwf	?___wmul,f,c
  2691  0009CC  0E00               	movlw	0
  2692  0009CE  223C               	addwfc	?___wmul+1,f,c
  2693  0009D0  0E01               	movlw	low _Motors
  2694  0009D2  243B               	addwf	?___wmul,w,c
  2695  0009D4  6ED9               	movwf	fsr2l,c
  2696  0009D6  0E00               	movlw	high _Motors
  2697  0009D8  203C               	addwfc	?___wmul+1,w,c
  2698  0009DA  6EDA               	movwf	fsr2h,c
  2699  0009DC  5023               	movf	_MinimumDuty,w,c
  2700  0009DE  5CDE               	subwf	postinc2,w,c
  2701  0009E0  B0D8               	btfsc	status,0,c
  2702  0009E2  D02F               	goto	l1780
  2703  0009E4  C067  F03B         	movff	AccelerateMotor@index,___wmul@multiplier
  2704  0009E8  C068  F03C         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  2705  0009EC  0E00               	movlw	0
  2706  0009EE  6E3E               	movwf	___wmul@multiplicand+1,c
  2707  0009F0  0E07               	movlw	7
  2708  0009F2  6E3D               	movwf	___wmul@multiplicand,c
  2709  0009F4  EC4B  F00C         	call	___wmul	;wreg free
  2710  0009F8  0E05               	movlw	5
  2711  0009FA  263B               	addwf	?___wmul,f,c
  2712  0009FC  0E00               	movlw	0
  2713  0009FE  223C               	addwfc	?___wmul+1,f,c
  2714  000A00  0E01               	movlw	low _Motors
  2715  000A02  243B               	addwf	?___wmul,w,c
  2716  000A04  6ED9               	movwf	fsr2l,c
  2717  000A06  0E00               	movlw	high _Motors
  2718  000A08  203C               	addwfc	?___wmul+1,w,c
  2719  000A0A  6EDA               	movwf	fsr2h,c
  2720  000A0C  5023               	movf	_MinimumDuty,w,c
  2721  000A0E  5CDE               	subwf	postinc2,w,c
  2722  000A10  A0D8               	btfss	status,0,c
  2723  000A12  D017               	goto	l1780
  2724                           
  2725                           ;pwm.c: 184: Motors[index].duty = MinimumDuty;
  2726  000A14  C067  F03B         	movff	AccelerateMotor@index,___wmul@multiplier
  2727  000A18  C068  F03C         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  2728  000A1C  0E00               	movlw	0
  2729  000A1E  6E3E               	movwf	___wmul@multiplicand+1,c
  2730  000A20  0E07               	movlw	7
  2731  000A22  6E3D               	movwf	___wmul@multiplicand,c
  2732  000A24  EC4B  F00C         	call	___wmul	;wreg free
  2733  000A28  0E04               	movlw	4
  2734  000A2A  263B               	addwf	?___wmul,f,c
  2735  000A2C  0E00               	movlw	0
  2736  000A2E  223C               	addwfc	?___wmul+1,f,c
  2737  000A30  0E01               	movlw	low _Motors
  2738  000A32  243B               	addwf	?___wmul,w,c
  2739  000A34  6ED9               	movwf	fsr2l,c
  2740  000A36  0E00               	movlw	high _Motors
  2741  000A38  203C               	addwfc	?___wmul+1,w,c
  2742  000A3A  6EDA               	movwf	fsr2h,c
  2743  000A3C  C023  FFDF         	movff	_MinimumDuty,indf2
  2744                           
  2745                           ;pwm.c: 185: } else if (Motors[index].duty <= MinimumDuty && Motors[index].target < Mini
      +                          mumDuty) {
  2746  000A40  D1DC               	goto	l1806
  2747  000A42                     l1780:
  2748  000A42  C067  F03B         	movff	AccelerateMotor@index,___wmul@multiplier
  2749  000A46  C068  F03C         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  2750  000A4A  0E00               	movlw	0
  2751  000A4C  6E3E               	movwf	___wmul@multiplicand+1,c
  2752  000A4E  0E07               	movlw	7
  2753  000A50  6E3D               	movwf	___wmul@multiplicand,c
  2754  000A52  EC4B  F00C         	call	___wmul	;wreg free
  2755  000A56  0E04               	movlw	4
  2756  000A58  263B               	addwf	?___wmul,f,c
  2757  000A5A  0E00               	movlw	0
  2758  000A5C  223C               	addwfc	?___wmul+1,f,c
  2759  000A5E  0E01               	movlw	low _Motors
  2760  000A60  243B               	addwf	?___wmul,w,c
  2761  000A62  6ED9               	movwf	fsr2l,c
  2762  000A64  0E00               	movlw	high _Motors
  2763  000A66  203C               	addwfc	?___wmul+1,w,c
  2764  000A68  6EDA               	movwf	fsr2h,c
  2765  000A6A  50DE               	movf	postinc2,w,c
  2766  000A6C  5C23               	subwf	_MinimumDuty,w,c
  2767  000A6E  A0D8               	btfss	status,0,c
  2768  000A70  D1C4               	goto	l1806
  2769  000A72  C067  F03B         	movff	AccelerateMotor@index,___wmul@multiplier
  2770  000A76  C068  F03C         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  2771  000A7A  0E00               	movlw	0
  2772  000A7C  6E3E               	movwf	___wmul@multiplicand+1,c
  2773  000A7E  0E07               	movlw	7
  2774  000A80  6E3D               	movwf	___wmul@multiplicand,c
  2775  000A82  EC4B  F00C         	call	___wmul	;wreg free
  2776  000A86  0E05               	movlw	5
  2777  000A88  263B               	addwf	?___wmul,f,c
  2778  000A8A  0E00               	movlw	0
  2779  000A8C  223C               	addwfc	?___wmul+1,f,c
  2780  000A8E  0E01               	movlw	low _Motors
  2781  000A90  243B               	addwf	?___wmul,w,c
  2782  000A92  6ED9               	movwf	fsr2l,c
  2783  000A94  0E00               	movlw	high _Motors
  2784  000A96  203C               	addwfc	?___wmul+1,w,c
  2785  000A98  6EDA               	movwf	fsr2h,c
  2786  000A9A  5023               	movf	_MinimumDuty,w,c
  2787  000A9C  5CDE               	subwf	postinc2,w,c
  2788  000A9E  B0D8               	btfsc	status,0,c
  2789  000AA0  D1AC               	goto	l1806
  2790                           
  2791                           ;pwm.c: 186: Motors[index].duty = 0;
  2792  000AA2  C067  F03B         	movff	AccelerateMotor@index,___wmul@multiplier
  2793  000AA6  C068  F03C         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  2794  000AAA  0E00               	movlw	0
  2795  000AAC  6E3E               	movwf	___wmul@multiplicand+1,c
  2796  000AAE  0E07               	movlw	7
  2797  000AB0  6E3D               	movwf	___wmul@multiplicand,c
  2798  000AB2  EC4B  F00C         	call	___wmul	;wreg free
  2799  000AB6  0E04               	movlw	4
  2800  000AB8  263B               	addwf	?___wmul,f,c
  2801  000ABA  0E00               	movlw	0
  2802  000ABC  223C               	addwfc	?___wmul+1,f,c
  2803  000ABE  0E01               	movlw	low _Motors
  2804  000AC0  243B               	addwf	?___wmul,w,c
  2805  000AC2  6ED9               	movwf	fsr2l,c
  2806  000AC4  0E00               	movlw	high _Motors
  2807  000AC6  203C               	addwfc	?___wmul+1,w,c
  2808  000AC8  6EDA               	movwf	fsr2h,c
  2809  000ACA  0E00               	movlw	0
  2810  000ACC  6EDF               	movwf	indf2,c
  2811                           
  2812                           ;pwm.c: 187: }
  2813                           ;pwm.c: 188: switch (AccelType) {
  2814  000ACE  D195               	goto	l1806
  2815  000AD0                     l1786:
  2816                           
  2817                           ;pwm.c: 190: Motors[index].duty = Motors[index].target;
  2818  000AD0  C067  F03B         	movff	AccelerateMotor@index,___wmul@multiplier
  2819  000AD4  C068  F03C         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  2820  000AD8  0E00               	movlw	0
  2821  000ADA  6E3E               	movwf	___wmul@multiplicand+1,c
  2822  000ADC  0E07               	movlw	7
  2823  000ADE  6E3D               	movwf	___wmul@multiplicand,c
  2824  000AE0  EC4B  F00C         	call	___wmul	;wreg free
  2825  000AE4  0E05               	movlw	5
  2826  000AE6  263B               	addwf	?___wmul,f,c
  2827  000AE8  0E00               	movlw	0
  2828  000AEA  223C               	addwfc	?___wmul+1,f,c
  2829  000AEC  0E01               	movlw	low _Motors
  2830  000AEE  243B               	addwf	?___wmul,w,c
  2831  000AF0  6ED9               	movwf	fsr2l,c
  2832  000AF2  0E00               	movlw	high _Motors
  2833  000AF4  203C               	addwfc	?___wmul+1,w,c
  2834  000AF6  6EDA               	movwf	fsr2h,c
  2835  000AF8  C067  F03B         	movff	AccelerateMotor@index,___wmul@multiplier
  2836  000AFC  C068  F03C         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  2837  000B00  0E00               	movlw	0
  2838  000B02  6E3E               	movwf	___wmul@multiplicand+1,c
  2839  000B04  0E07               	movlw	7
  2840  000B06  6E3D               	movwf	___wmul@multiplicand,c
  2841  000B08  EC4B  F00C         	call	___wmul	;wreg free
  2842  000B0C  0E04               	movlw	4
  2843  000B0E  263B               	addwf	?___wmul,f,c
  2844  000B10  0E00               	movlw	0
  2845  000B12  223C               	addwfc	?___wmul+1,f,c
  2846  000B14  0E01               	movlw	low _Motors
  2847  000B16  243B               	addwf	?___wmul,w,c
  2848  000B18  6EE1               	movwf	fsr1l,c
  2849  000B1A  0E00               	movlw	high _Motors
  2850  000B1C  203C               	addwfc	?___wmul+1,w,c
  2851  000B1E  6EE2               	movwf	fsr1h,c
  2852  000B20  CFDF FFE7          	movff	indf2,indf1
  2853                           
  2854                           ;pwm.c: 191: break;
  2855  000B24  0012               	return	
  2856  000B26                     l1788:
  2857                           
  2858                           ;pwm.c: 193: if (Motors[index].duty > Motors[index].target) {
  2859  000B26  C067  F03B         	movff	AccelerateMotor@index,___wmul@multiplier
  2860  000B2A  C068  F03C         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  2861  000B2E  0E00               	movlw	0
  2862  000B30  6E3E               	movwf	___wmul@multiplicand+1,c
  2863  000B32  0E07               	movlw	7
  2864  000B34  6E3D               	movwf	___wmul@multiplicand,c
  2865  000B36  EC4B  F00C         	call	___wmul	;wreg free
  2866  000B3A  0E04               	movlw	4
  2867  000B3C  263B               	addwf	?___wmul,f,c
  2868  000B3E  0E00               	movlw	0
  2869  000B40  223C               	addwfc	?___wmul+1,f,c
  2870  000B42  0E01               	movlw	low _Motors
  2871  000B44  243B               	addwf	?___wmul,w,c
  2872  000B46  6ED9               	movwf	fsr2l,c
  2873  000B48  0E00               	movlw	high _Motors
  2874  000B4A  203C               	addwfc	?___wmul+1,w,c
  2875  000B4C  6EDA               	movwf	fsr2h,c
  2876  000B4E  C067  F03B         	movff	AccelerateMotor@index,___wmul@multiplier
  2877  000B52  C068  F03C         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  2878  000B56  0E00               	movlw	0
  2879  000B58  6E3E               	movwf	___wmul@multiplicand+1,c
  2880  000B5A  0E07               	movlw	7
  2881  000B5C  6E3D               	movwf	___wmul@multiplicand,c
  2882  000B5E  EC4B  F00C         	call	___wmul	;wreg free
  2883  000B62  0E05               	movlw	5
  2884  000B64  263B               	addwf	?___wmul,f,c
  2885  000B66  0E00               	movlw	0
  2886  000B68  223C               	addwfc	?___wmul+1,f,c
  2887  000B6A  0E01               	movlw	low _Motors
  2888  000B6C  243B               	addwf	?___wmul,w,c
  2889  000B6E  6EE1               	movwf	fsr1l,c
  2890  000B70  0E00               	movlw	high _Motors
  2891  000B72  203C               	addwfc	?___wmul+1,w,c
  2892  000B74  6EE2               	movwf	fsr1h,c
  2893  000B76  50DE               	movf	postinc2,w,c
  2894  000B78  5CE6               	subwf	postinc1,w,c
  2895  000B7A  B0D8               	btfsc	status,0,c
  2896  000B7C  D016               	goto	l1792
  2897                           
  2898                           ;pwm.c: 194: Motors[index].duty -= 1;
  2899  000B7E  C067  F03B         	movff	AccelerateMotor@index,___wmul@multiplier
  2900  000B82  C068  F03C         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  2901  000B86  0E00               	movlw	0
  2902  000B88  6E3E               	movwf	___wmul@multiplicand+1,c
  2903  000B8A  0E07               	movlw	7
  2904  000B8C  6E3D               	movwf	___wmul@multiplicand,c
  2905  000B8E  EC4B  F00C         	call	___wmul	;wreg free
  2906  000B92  0E04               	movlw	4
  2907  000B94  263B               	addwf	?___wmul,f,c
  2908  000B96  0E00               	movlw	0
  2909  000B98  223C               	addwfc	?___wmul+1,f,c
  2910  000B9A  0E01               	movlw	low _Motors
  2911  000B9C  243B               	addwf	?___wmul,w,c
  2912  000B9E  6ED9               	movwf	fsr2l,c
  2913  000BA0  0E00               	movlw	high _Motors
  2914  000BA2  203C               	addwfc	?___wmul+1,w,c
  2915  000BA4  6EDA               	movwf	fsr2h,c
  2916  000BA6  06DF               	decf	indf2,f,c
  2917                           
  2918                           ;pwm.c: 195: } else if (Motors[index].duty < Motors[index].target) {
  2919  000BA8  0012               	return	
  2920  000BAA                     l1792:
  2921  000BAA  C067  F03B         	movff	AccelerateMotor@index,___wmul@multiplier
  2922  000BAE  C068  F03C         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  2923  000BB2  0E00               	movlw	0
  2924  000BB4  6E3E               	movwf	___wmul@multiplicand+1,c
  2925  000BB6  0E07               	movlw	7
  2926  000BB8  6E3D               	movwf	___wmul@multiplicand,c
  2927  000BBA  EC4B  F00C         	call	___wmul	;wreg free
  2928  000BBE  0E05               	movlw	5
  2929  000BC0  263B               	addwf	?___wmul,f,c
  2930  000BC2  0E00               	movlw	0
  2931  000BC4  223C               	addwfc	?___wmul+1,f,c
  2932  000BC6  0E01               	movlw	low _Motors
  2933  000BC8  243B               	addwf	?___wmul,w,c
  2934  000BCA  6ED9               	movwf	fsr2l,c
  2935  000BCC  0E00               	movlw	high _Motors
  2936  000BCE  203C               	addwfc	?___wmul+1,w,c
  2937  000BD0  6EDA               	movwf	fsr2h,c
  2938  000BD2  C067  F03B         	movff	AccelerateMotor@index,___wmul@multiplier
  2939  000BD6  C068  F03C         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  2940  000BDA  0E00               	movlw	0
  2941  000BDC  6E3E               	movwf	___wmul@multiplicand+1,c
  2942  000BDE  0E07               	movlw	7
  2943  000BE0  6E3D               	movwf	___wmul@multiplicand,c
  2944  000BE2  EC4B  F00C         	call	___wmul	;wreg free
  2945  000BE6  0E04               	movlw	4
  2946  000BE8  263B               	addwf	?___wmul,f,c
  2947  000BEA  0E00               	movlw	0
  2948  000BEC  223C               	addwfc	?___wmul+1,f,c
  2949  000BEE  0E01               	movlw	low _Motors
  2950  000BF0  243B               	addwf	?___wmul,w,c
  2951  000BF2  6EE1               	movwf	fsr1l,c
  2952  000BF4  0E00               	movlw	high _Motors
  2953  000BF6  203C               	addwfc	?___wmul+1,w,c
  2954  000BF8  6EE2               	movwf	fsr1h,c
  2955  000BFA  50DE               	movf	postinc2,w,c
  2956  000BFC  5CE6               	subwf	postinc1,w,c
  2957  000BFE  B0D8               	btfsc	status,0,c
  2958  000C00  0012               	return	
  2959                           
  2960                           ;pwm.c: 196: Motors[index].duty += 1;
  2961  000C02  C067  F03B         	movff	AccelerateMotor@index,___wmul@multiplier
  2962  000C06  C068  F03C         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  2963  000C0A  0E00               	movlw	0
  2964  000C0C  6E3E               	movwf	___wmul@multiplicand+1,c
  2965  000C0E  0E07               	movlw	7
  2966  000C10  6E3D               	movwf	___wmul@multiplicand,c
  2967  000C12  EC4B  F00C         	call	___wmul	;wreg free
  2968  000C16  0E04               	movlw	4
  2969  000C18  263B               	addwf	?___wmul,f,c
  2970  000C1A  0E00               	movlw	0
  2971  000C1C  223C               	addwfc	?___wmul+1,f,c
  2972  000C1E  0E01               	movlw	low _Motors
  2973  000C20  243B               	addwf	?___wmul,w,c
  2974  000C22  6ED9               	movwf	fsr2l,c
  2975  000C24  0E00               	movlw	high _Motors
  2976  000C26  203C               	addwfc	?___wmul+1,w,c
  2977  000C28  6EDA               	movwf	fsr2h,c
  2978  000C2A  2ADF               	incf	indf2,f,c
  2979                           
  2980                           ;pwm.c: 197: }
  2981                           ;pwm.c: 198: break;
  2982  000C2C  0012               	return	
  2983  000C2E                     l1796:
  2984                           
  2985                           ;pwm.c: 200: if (Motors[index].duty > Motors[index].target) {
  2986  000C2E  C067  F03B         	movff	AccelerateMotor@index,___wmul@multiplier
  2987  000C32  C068  F03C         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  2988  000C36  0E00               	movlw	0
  2989  000C38  6E3E               	movwf	___wmul@multiplicand+1,c
  2990  000C3A  0E07               	movlw	7
  2991  000C3C  6E3D               	movwf	___wmul@multiplicand,c
  2992  000C3E  EC4B  F00C         	call	___wmul	;wreg free
  2993  000C42  0E04               	movlw	4
  2994  000C44  263B               	addwf	?___wmul,f,c
  2995  000C46  0E00               	movlw	0
  2996  000C48  223C               	addwfc	?___wmul+1,f,c
  2997  000C4A  0E01               	movlw	low _Motors
  2998  000C4C  243B               	addwf	?___wmul,w,c
  2999  000C4E  6ED9               	movwf	fsr2l,c
  3000  000C50  0E00               	movlw	high _Motors
  3001  000C52  203C               	addwfc	?___wmul+1,w,c
  3002  000C54  6EDA               	movwf	fsr2h,c
  3003  000C56  C067  F03B         	movff	AccelerateMotor@index,___wmul@multiplier
  3004  000C5A  C068  F03C         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3005  000C5E  0E00               	movlw	0
  3006  000C60  6E3E               	movwf	___wmul@multiplicand+1,c
  3007  000C62  0E07               	movlw	7
  3008  000C64  6E3D               	movwf	___wmul@multiplicand,c
  3009  000C66  EC4B  F00C         	call	___wmul	;wreg free
  3010  000C6A  0E05               	movlw	5
  3011  000C6C  263B               	addwf	?___wmul,f,c
  3012  000C6E  0E00               	movlw	0
  3013  000C70  223C               	addwfc	?___wmul+1,f,c
  3014  000C72  0E01               	movlw	low _Motors
  3015  000C74  243B               	addwf	?___wmul,w,c
  3016  000C76  6EE1               	movwf	fsr1l,c
  3017  000C78  0E00               	movlw	high _Motors
  3018  000C7A  203C               	addwfc	?___wmul+1,w,c
  3019  000C7C  6EE2               	movwf	fsr1h,c
  3020  000C7E  50DE               	movf	postinc2,w,c
  3021  000C80  5CE6               	subwf	postinc1,w,c
  3022  000C82  B0D8               	btfsc	status,0,c
  3023  000C84  D047               	goto	l1800
  3024                           
  3025                           ;pwm.c: 201: Motors[index].duty -= ExponentialProfile(Motors[index].duty, Motors[index].
      +                          target);
  3026  000C86  C067  F03B         	movff	AccelerateMotor@index,___wmul@multiplier
  3027  000C8A  C068  F03C         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3028  000C8E  0E00               	movlw	0
  3029  000C90  6E3E               	movwf	___wmul@multiplicand+1,c
  3030  000C92  0E07               	movlw	7
  3031  000C94  6E3D               	movwf	___wmul@multiplicand,c
  3032  000C96  EC4B  F00C         	call	___wmul	;wreg free
  3033  000C9A  0E05               	movlw	5
  3034  000C9C  263B               	addwf	?___wmul,f,c
  3035  000C9E  0E00               	movlw	0
  3036  000CA0  223C               	addwfc	?___wmul+1,f,c
  3037  000CA2  0E01               	movlw	low _Motors
  3038  000CA4  243B               	addwf	?___wmul,w,c
  3039  000CA6  6ED9               	movwf	fsr2l,c
  3040  000CA8  0E00               	movlw	high _Motors
  3041  000CAA  203C               	addwfc	?___wmul+1,w,c
  3042  000CAC  6EDA               	movwf	fsr2h,c
  3043  000CAE  50DF               	movf	indf2,w,c
  3044  000CB0  6E41               	movwf	ExponentialProfile@target,c
  3045  000CB2  C067  F03B         	movff	AccelerateMotor@index,___wmul@multiplier
  3046  000CB6  C068  F03C         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3047  000CBA  0E00               	movlw	0
  3048  000CBC  6E3E               	movwf	___wmul@multiplicand+1,c
  3049  000CBE  0E07               	movlw	7
  3050  000CC0  6E3D               	movwf	___wmul@multiplicand,c
  3051  000CC2  EC4B  F00C         	call	___wmul	;wreg free
  3052  000CC6  0E04               	movlw	4
  3053  000CC8  263B               	addwf	?___wmul,f,c
  3054  000CCA  0E00               	movlw	0
  3055  000CCC  223C               	addwfc	?___wmul+1,f,c
  3056  000CCE  0E01               	movlw	low _Motors
  3057  000CD0  243B               	addwf	?___wmul,w,c
  3058  000CD2  6ED9               	movwf	fsr2l,c
  3059  000CD4  0E00               	movlw	high _Motors
  3060  000CD6  203C               	addwfc	?___wmul+1,w,c
  3061  000CD8  6EDA               	movwf	fsr2h,c
  3062  000CDA  50DF               	movf	indf2,w,c
  3063  000CDC  EC08  F007         	call	_ExponentialProfile
  3064  000CE0  0100               	movlb	0	; () banked
  3065  000CE2  6F69               	movwf	??_AccelerateMotor& (0+255),b
  3066  000CE4  C067  F03B         	movff	AccelerateMotor@index,___wmul@multiplier
  3067  000CE8  C068  F03C         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3068  000CEC  0E00               	movlw	0
  3069  000CEE  6E3E               	movwf	___wmul@multiplicand+1,c
  3070  000CF0  0E07               	movlw	7
  3071  000CF2  6E3D               	movwf	___wmul@multiplicand,c
  3072  000CF4  EC4B  F00C         	call	___wmul	;wreg free
  3073  000CF8  0E04               	movlw	4
  3074  000CFA  263B               	addwf	?___wmul,f,c
  3075  000CFC  0E00               	movlw	0
  3076  000CFE  223C               	addwfc	?___wmul+1,f,c
  3077  000D00  0E01               	movlw	low _Motors
  3078  000D02  243B               	addwf	?___wmul,w,c
  3079  000D04  6ED9               	movwf	fsr2l,c
  3080  000D06  0E00               	movlw	high _Motors
  3081  000D08  203C               	addwfc	?___wmul+1,w,c
  3082  000D0A  6EDA               	movwf	fsr2h,c
  3083  000D0C  0100               	movlb	0	; () banked
  3084  000D0E  5169               	movf	??_AccelerateMotor& (0+255),w,b
  3085  000D10  5EDF               	subwf	indf2,f,c
  3086                           
  3087                           ;pwm.c: 202: } else if (Motors[index].duty < Motors[index].target) {
  3088  000D12  0012               	return	
  3089  000D14                     l1800:
  3090  000D14  C067  F03B         	movff	AccelerateMotor@index,___wmul@multiplier
  3091  000D18  C068  F03C         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3092  000D1C  0E00               	movlw	0
  3093  000D1E  6E3E               	movwf	___wmul@multiplicand+1,c
  3094  000D20  0E07               	movlw	7
  3095  000D22  6E3D               	movwf	___wmul@multiplicand,c
  3096  000D24  EC4B  F00C         	call	___wmul	;wreg free
  3097  000D28  0E05               	movlw	5
  3098  000D2A  263B               	addwf	?___wmul,f,c
  3099  000D2C  0E00               	movlw	0
  3100  000D2E  223C               	addwfc	?___wmul+1,f,c
  3101  000D30  0E01               	movlw	low _Motors
  3102  000D32  243B               	addwf	?___wmul,w,c
  3103  000D34  6ED9               	movwf	fsr2l,c
  3104  000D36  0E00               	movlw	high _Motors
  3105  000D38  203C               	addwfc	?___wmul+1,w,c
  3106  000D3A  6EDA               	movwf	fsr2h,c
  3107  000D3C  C067  F03B         	movff	AccelerateMotor@index,___wmul@multiplier
  3108  000D40  C068  F03C         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3109  000D44  0E00               	movlw	0
  3110  000D46  6E3E               	movwf	___wmul@multiplicand+1,c
  3111  000D48  0E07               	movlw	7
  3112  000D4A  6E3D               	movwf	___wmul@multiplicand,c
  3113  000D4C  EC4B  F00C         	call	___wmul	;wreg free
  3114  000D50  0E04               	movlw	4
  3115  000D52  263B               	addwf	?___wmul,f,c
  3116  000D54  0E00               	movlw	0
  3117  000D56  223C               	addwfc	?___wmul+1,f,c
  3118  000D58  0E01               	movlw	low _Motors
  3119  000D5A  243B               	addwf	?___wmul,w,c
  3120  000D5C  6EE1               	movwf	fsr1l,c
  3121  000D5E  0E00               	movlw	high _Motors
  3122  000D60  203C               	addwfc	?___wmul+1,w,c
  3123  000D62  6EE2               	movwf	fsr1h,c
  3124  000D64  50DE               	movf	postinc2,w,c
  3125  000D66  5CE6               	subwf	postinc1,w,c
  3126  000D68  B0D8               	btfsc	status,0,c
  3127  000D6A  0012               	return	
  3128                           
  3129                           ;pwm.c: 203: Motors[index].duty += ExponentialProfile(Motors[index].duty, Motors[index].
      +                          target);
  3130  000D6C  C067  F03B         	movff	AccelerateMotor@index,___wmul@multiplier
  3131  000D70  C068  F03C         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3132  000D74  0E00               	movlw	0
  3133  000D76  6E3E               	movwf	___wmul@multiplicand+1,c
  3134  000D78  0E07               	movlw	7
  3135  000D7A  6E3D               	movwf	___wmul@multiplicand,c
  3136  000D7C  EC4B  F00C         	call	___wmul	;wreg free
  3137  000D80  0E05               	movlw	5
  3138  000D82  263B               	addwf	?___wmul,f,c
  3139  000D84  0E00               	movlw	0
  3140  000D86  223C               	addwfc	?___wmul+1,f,c
  3141  000D88  0E01               	movlw	low _Motors
  3142  000D8A  243B               	addwf	?___wmul,w,c
  3143  000D8C  6ED9               	movwf	fsr2l,c
  3144  000D8E  0E00               	movlw	high _Motors
  3145  000D90  203C               	addwfc	?___wmul+1,w,c
  3146  000D92  6EDA               	movwf	fsr2h,c
  3147  000D94  50DF               	movf	indf2,w,c
  3148  000D96  6E41               	movwf	ExponentialProfile@target,c
  3149  000D98  C067  F03B         	movff	AccelerateMotor@index,___wmul@multiplier
  3150  000D9C  C068  F03C         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3151  000DA0  0E00               	movlw	0
  3152  000DA2  6E3E               	movwf	___wmul@multiplicand+1,c
  3153  000DA4  0E07               	movlw	7
  3154  000DA6  6E3D               	movwf	___wmul@multiplicand,c
  3155  000DA8  EC4B  F00C         	call	___wmul	;wreg free
  3156  000DAC  0E04               	movlw	4
  3157  000DAE  263B               	addwf	?___wmul,f,c
  3158  000DB0  0E00               	movlw	0
  3159  000DB2  223C               	addwfc	?___wmul+1,f,c
  3160  000DB4  0E01               	movlw	low _Motors
  3161  000DB6  243B               	addwf	?___wmul,w,c
  3162  000DB8  6ED9               	movwf	fsr2l,c
  3163  000DBA  0E00               	movlw	high _Motors
  3164  000DBC  203C               	addwfc	?___wmul+1,w,c
  3165  000DBE  6EDA               	movwf	fsr2h,c
  3166  000DC0  50DF               	movf	indf2,w,c
  3167  000DC2  EC08  F007         	call	_ExponentialProfile
  3168  000DC6  0100               	movlb	0	; () banked
  3169  000DC8  6F69               	movwf	??_AccelerateMotor& (0+255),b
  3170  000DCA  C067  F03B         	movff	AccelerateMotor@index,___wmul@multiplier
  3171  000DCE  C068  F03C         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3172  000DD2  0E00               	movlw	0
  3173  000DD4  6E3E               	movwf	___wmul@multiplicand+1,c
  3174  000DD6  0E07               	movlw	7
  3175  000DD8  6E3D               	movwf	___wmul@multiplicand,c
  3176  000DDA  EC4B  F00C         	call	___wmul	;wreg free
  3177  000DDE  0E04               	movlw	4
  3178  000DE0  263B               	addwf	?___wmul,f,c
  3179  000DE2  0E00               	movlw	0
  3180  000DE4  223C               	addwfc	?___wmul+1,f,c
  3181  000DE6  0E01               	movlw	low _Motors
  3182  000DE8  243B               	addwf	?___wmul,w,c
  3183  000DEA  6ED9               	movwf	fsr2l,c
  3184  000DEC  0E00               	movlw	high _Motors
  3185  000DEE  203C               	addwfc	?___wmul+1,w,c
  3186  000DF0  6EDA               	movwf	fsr2h,c
  3187  000DF2  0100               	movlb	0	; () banked
  3188  000DF4  5169               	movf	??_AccelerateMotor& (0+255),w,b
  3189  000DF6  26DF               	addwf	indf2,f,c
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;pwm.c: 208: }
  3193                           
  3194                           ; BSR set to: 0
  3195                           ;pwm.c: 207: break;
  3196                           
  3197                           ;pwm.c: 206: default:
  3198                           
  3199                           ; BSR set to: 0
  3200                           ;pwm.c: 204: }
  3201                           ;pwm.c: 205: break;
  3202                           
  3203                           ; BSR set to: 0
  3204  000DF8  0012               	return	
  3205  000DFA                     l1806:
  3206  000DFA  5047               	movf	_AccelType,w,c
  3207                           
  3208                           ; Switch size 1, requested type "space"
  3209                           ; Number of cases is 3, Range of values is 0 to 2
  3210                           ; switch strategies available:
  3211                           ; Name         Instructions Cycles
  3212                           ; simple_byte           10     6 (average)
  3213                           ;	Chosen strategy is simple_byte
  3214  000DFC  0A00               	xorlw	0	; case 0
  3215  000DFE  B4D8               	btfsc	status,2,c
  3216  000E00  D667               	goto	l1786
  3217  000E02  0A01               	xorlw	1	; case 1
  3218  000E04  B4D8               	btfsc	status,2,c
  3219  000E06  D68F               	goto	l1788
  3220  000E08  0A03               	xorlw	3	; case 2
  3221  000E0A  A4D8               	btfss	status,2,c
  3222  000E0C  0012               	return	
  3223  000E0E  D70F               	goto	l1796
  3224  000E10                     __end_of_AccelerateMotor:
  3225                           	opt stack 0
  3226                           tblptru	equ	0xFF8
  3227                           tblptrh	equ	0xFF7
  3228                           tblptrl	equ	0xFF6
  3229                           tablat	equ	0xFF5
  3230                           intcon	equ	0xFF2
  3231                           intcon2	equ	0xFF1
  3232                           postinc0	equ	0xFEE
  3233                           wreg	equ	0xFE8
  3234                           indf1	equ	0xFE7
  3235                           postinc1	equ	0xFE6
  3236                           postdec1	equ	0xFE5
  3237                           fsr1h	equ	0xFE2
  3238                           fsr1l	equ	0xFE1
  3239                           indf2	equ	0xFDF
  3240                           postinc2	equ	0xFDE
  3241                           fsr2h	equ	0xFDA
  3242                           fsr2l	equ	0xFD9
  3243                           status	equ	0xFD8
  3244                           
  3245 ;; *************** function ___wmul *****************
  3246 ;; Defined at:
  3247 ;;		line 15 in file "/Applications/microchip/xc8/v1.42/sources/common/Umul16.c"
  3248 ;; Parameters:    Size  Location     Type
  3249 ;;  multiplier      2   22[COMRAM] unsigned int 
  3250 ;;  multiplicand    2   24[COMRAM] unsigned int 
  3251 ;; Auto vars:     Size  Location     Type
  3252 ;;  product         2   26[COMRAM] unsigned int 
  3253 ;; Return value:  Size  Location     Type
  3254 ;;                  2   22[COMRAM] unsigned int 
  3255 ;; Registers used:
  3256 ;;		wreg, status,2, status,0, prodl, prodh
  3257 ;; Tracked objects:
  3258 ;;		On entry : 0/0
  3259 ;;		On exit  : 0/0
  3260 ;;		Unchanged: 0/0
  3261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3262 ;;      Params:         4       0       0       0
  3263 ;;      Locals:         2       0       0       0
  3264 ;;      Temps:          0       0       0       0
  3265 ;;      Totals:         6       0       0       0
  3266 ;;Total ram usage:        6 bytes
  3267 ;; Hardware stack levels used:    1
  3268 ;; Hardware stack levels required when called:    2
  3269 ;; This function calls:
  3270 ;;		Nothing
  3271 ;; This function is called by:
  3272 ;;		_InitPWM
  3273 ;;		_StopMotor
  3274 ;;		_AccelerateMotor
  3275 ;;		_AcceleratePWM
  3276 ;;		_CheckPWMOutput
  3277 ;; This function uses a non-reentrant model
  3278 ;;
  3279                           
  3280                           	psect	text9
  3281  001896                     __ptext9:
  3282                           	opt stack 0
  3283  001896                     ___wmul:
  3284                           	opt stack 27
  3285                           
  3286                           ;incstack = 0
  3287  001896  503B               	movf	___wmul@multiplier,w,c
  3288  001898  023D               	mulwf	___wmul@multiplicand,c
  3289  00189A  CFF3 F03F          	movff	prodl,___wmul@product
  3290  00189E  CFF4 F040          	movff	prodh,___wmul@product+1
  3291  0018A2  503B               	movf	___wmul@multiplier,w,c
  3292  0018A4  023E               	mulwf	___wmul@multiplicand+1,c
  3293  0018A6  50F3               	movf	prodl,w,c
  3294  0018A8  2640               	addwf	___wmul@product+1,f,c
  3295  0018AA  503C               	movf	___wmul@multiplier+1,w,c
  3296  0018AC  023D               	mulwf	___wmul@multiplicand,c
  3297  0018AE  50F3               	movf	prodl,w,c
  3298  0018B0  2640               	addwf	___wmul@product+1,f,c
  3299  0018B2  C03F  F03B         	movff	___wmul@product,?___wmul
  3300  0018B6  C040  F03C         	movff	___wmul@product+1,?___wmul+1
  3301  0018BA  0012               	return	
  3302  0018BC                     __end_of___wmul:
  3303                           	opt stack 0
  3304                           tblptru	equ	0xFF8
  3305                           tblptrh	equ	0xFF7
  3306                           tblptrl	equ	0xFF6
  3307                           tablat	equ	0xFF5
  3308                           prodh	equ	0xFF4
  3309                           prodl	equ	0xFF3
  3310                           intcon	equ	0xFF2
  3311                           intcon2	equ	0xFF1
  3312                           postinc0	equ	0xFEE
  3313                           wreg	equ	0xFE8
  3314                           indf1	equ	0xFE7
  3315                           postinc1	equ	0xFE6
  3316                           postdec1	equ	0xFE5
  3317                           fsr1h	equ	0xFE2
  3318                           fsr1l	equ	0xFE1
  3319                           indf2	equ	0xFDF
  3320                           postinc2	equ	0xFDE
  3321                           fsr2h	equ	0xFDA
  3322                           fsr2l	equ	0xFD9
  3323                           status	equ	0xFD8
  3324                           
  3325 ;; *************** function _ExponentialProfile *****************
  3326 ;; Defined at:
  3327 ;;		line 103 in file "pwm.c"
  3328 ;; Parameters:    Size  Location     Type
  3329 ;;  current         1    wreg     unsigned char 
  3330 ;;  target          1   28[COMRAM] unsigned char 
  3331 ;; Auto vars:     Size  Location     Type
  3332 ;;  current         1   30[COMRAM] unsigned char 
  3333 ;;  change          1   29[COMRAM] unsigned char 
  3334 ;; Return value:  Size  Location     Type
  3335 ;;                  1    wreg      unsigned char 
  3336 ;; Registers used:
  3337 ;;		wreg, status,2, status,0
  3338 ;; Tracked objects:
  3339 ;;		On entry : 0/0
  3340 ;;		On exit  : 0/0
  3341 ;;		Unchanged: 0/0
  3342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3343 ;;      Params:         1       0       0       0
  3344 ;;      Locals:         2       0       0       0
  3345 ;;      Temps:          0       7       0       0
  3346 ;;      Totals:         3       7       0       0
  3347 ;;Total ram usage:       10 bytes
  3348 ;; Hardware stack levels used:    1
  3349 ;; Hardware stack levels required when called:    2
  3350 ;; This function calls:
  3351 ;;		Nothing
  3352 ;; This function is called by:
  3353 ;;		_StopMotor
  3354 ;;		_AccelerateMotor
  3355 ;; This function uses a non-reentrant model
  3356 ;;
  3357                           
  3358                           	psect	text10
  3359  000E10                     __ptext10:
  3360                           	opt stack 0
  3361  000E10                     _ExponentialProfile:
  3362                           	opt stack 25
  3363                           
  3364                           ;incstack = 0
  3365                           ;ExponentialProfile@current stored from wreg
  3366  000E10  6E43               	movwf	ExponentialProfile@current,c
  3367                           
  3368                           ;pwm.c: 104: unsigned char change = 0;
  3369  000E12  0E00               	movlw	0
  3370  000E14  6E42               	movwf	ExponentialProfile@change,c
  3371                           
  3372                           ;pwm.c: 105: if (current > target) {
  3373  000E16  5043               	movf	ExponentialProfile@current,w,c
  3374  000E18  5C41               	subwf	ExponentialProfile@target,w,c
  3375  000E1A  B0D8               	btfsc	status,0,c
  3376  000E1C  D0D9               	goto	l1710
  3377                           
  3378                           ;pwm.c: 107: if (current-MinimumDuty > 200) {
  3379  000E1E  5023               	movf	_MinimumDuty,w,c
  3380  000E20  0100               	movlb	0	; () banked
  3381  000E22  6F60               	movwf	??_ExponentialProfile& (0+255),b
  3382  000E24  6B61               	clrf	(??_ExponentialProfile+1)& (0+255),b
  3383  000E26  0100               	movlb	0	; () banked
  3384  000E28  1F60               	comf	??_ExponentialProfile& (0+255),f,b
  3385  000E2A  1F61               	comf	(??_ExponentialProfile+1)& (0+255),f,b
  3386  000E2C  4B60               	infsnz	??_ExponentialProfile& (0+255),f,b
  3387  000E2E  2B61               	incf	(??_ExponentialProfile+1)& (0+255),f,b
  3388  000E30  5043               	movf	ExponentialProfile@current,w,c
  3389  000E32  0100               	movlb	0	; () banked
  3390  000E34  6F62               	movwf	(??_ExponentialProfile+2)& (0+255),b
  3391  000E36  6B63               	clrf	(??_ExponentialProfile+3)& (0+255),b
  3392  000E38  0100               	movlb	0	; () banked
  3393  000E3A  5160               	movf	??_ExponentialProfile& (0+255),w,b
  3394  000E3C  0100               	movlb	0	; () banked
  3395  000E3E  2762               	addwf	(??_ExponentialProfile+2)& (0+255),f,b
  3396  000E40  0100               	movlb	0	; () banked
  3397  000E42  5161               	movf	(??_ExponentialProfile+1)& (0+255),w,b
  3398  000E44  0100               	movlb	0	; () banked
  3399  000E46  2363               	addwfc	(??_ExponentialProfile+3)& (0+255),f,b
  3400  000E48  0100               	movlb	0	; () banked
  3401  000E4A  BF63               	btfsc	(??_ExponentialProfile+3)& (0+255),7,b
  3402  000E4C  D00A               	goto	l1688
  3403  000E4E  0100               	movlb	0	; () banked
  3404  000E50  5163               	movf	(??_ExponentialProfile+3)& (0+255),w,b
  3405  000E52  E105               	bnz	u2240
  3406  000E54  0EC9               	movlw	201
  3407  000E56  0100               	movlb	0	; () banked
  3408  000E58  5D62               	subwf	(??_ExponentialProfile+2)& (0+255),w,b
  3409  000E5A  A0D8               	btfss	status,0,c
  3410  000E5C  D002               	goto	l1688
  3411  000E5E                     u2240:
  3412                           
  3413                           ; BSR set to: 0
  3414                           ;pwm.c: 108: change = 50;
  3415  000E5E  0E32               	movlw	50
  3416  000E60  D089               	goto	L8
  3417  000E62                     l1688:
  3418                           
  3419                           ; BSR set to: 0
  3420  000E62  5023               	movf	_MinimumDuty,w,c
  3421  000E64  0100               	movlb	0	; () banked
  3422  000E66  6F60               	movwf	??_ExponentialProfile& (0+255),b
  3423  000E68  6B61               	clrf	(??_ExponentialProfile+1)& (0+255),b
  3424  000E6A  0100               	movlb	0	; () banked
  3425  000E6C  1F60               	comf	??_ExponentialProfile& (0+255),f,b
  3426  000E6E  1F61               	comf	(??_ExponentialProfile+1)& (0+255),f,b
  3427  000E70  4B60               	infsnz	??_ExponentialProfile& (0+255),f,b
  3428  000E72  2B61               	incf	(??_ExponentialProfile+1)& (0+255),f,b
  3429  000E74  5043               	movf	ExponentialProfile@current,w,c
  3430  000E76  0100               	movlb	0	; () banked
  3431  000E78  6F62               	movwf	(??_ExponentialProfile+2)& (0+255),b
  3432  000E7A  6B63               	clrf	(??_ExponentialProfile+3)& (0+255),b
  3433  000E7C  0100               	movlb	0	; () banked
  3434  000E7E  5160               	movf	??_ExponentialProfile& (0+255),w,b
  3435  000E80  0100               	movlb	0	; () banked
  3436  000E82  2762               	addwf	(??_ExponentialProfile+2)& (0+255),f,b
  3437  000E84  0100               	movlb	0	; () banked
  3438  000E86  5161               	movf	(??_ExponentialProfile+1)& (0+255),w,b
  3439  000E88  0100               	movlb	0	; () banked
  3440  000E8A  2363               	addwfc	(??_ExponentialProfile+3)& (0+255),f,b
  3441  000E8C  0100               	movlb	0	; () banked
  3442  000E8E  BF63               	btfsc	(??_ExponentialProfile+3)& (0+255),7,b
  3443  000E90  D00A               	goto	l1692
  3444  000E92  0100               	movlb	0	; () banked
  3445  000E94  5163               	movf	(??_ExponentialProfile+3)& (0+255),w,b
  3446  000E96  E105               	bnz	u2250
  3447  000E98  0E97               	movlw	151
  3448  000E9A  0100               	movlb	0	; () banked
  3449  000E9C  5D62               	subwf	(??_ExponentialProfile+2)& (0+255),w,b
  3450  000E9E  A0D8               	btfss	status,0,c
  3451  000EA0  D002               	goto	l1692
  3452  000EA2                     u2250:
  3453                           
  3454                           ; BSR set to: 0
  3455                           ;pwm.c: 110: change = 25;
  3456  000EA2  0E19               	movlw	25
  3457  000EA4  D067               	goto	L8
  3458  000EA6                     l1692:
  3459                           
  3460                           ; BSR set to: 0
  3461  000EA6  5023               	movf	_MinimumDuty,w,c
  3462  000EA8  0100               	movlb	0	; () banked
  3463  000EAA  6F60               	movwf	??_ExponentialProfile& (0+255),b
  3464  000EAC  6B61               	clrf	(??_ExponentialProfile+1)& (0+255),b
  3465  000EAE  0100               	movlb	0	; () banked
  3466  000EB0  1F60               	comf	??_ExponentialProfile& (0+255),f,b
  3467  000EB2  1F61               	comf	(??_ExponentialProfile+1)& (0+255),f,b
  3468  000EB4  4B60               	infsnz	??_ExponentialProfile& (0+255),f,b
  3469  000EB6  2B61               	incf	(??_ExponentialProfile+1)& (0+255),f,b
  3470  000EB8  5043               	movf	ExponentialProfile@current,w,c
  3471  000EBA  0100               	movlb	0	; () banked
  3472  000EBC  6F62               	movwf	(??_ExponentialProfile+2)& (0+255),b
  3473  000EBE  6B63               	clrf	(??_ExponentialProfile+3)& (0+255),b
  3474  000EC0  0100               	movlb	0	; () banked
  3475  000EC2  5160               	movf	??_ExponentialProfile& (0+255),w,b
  3476  000EC4  0100               	movlb	0	; () banked
  3477  000EC6  2762               	addwf	(??_ExponentialProfile+2)& (0+255),f,b
  3478  000EC8  0100               	movlb	0	; () banked
  3479  000ECA  5161               	movf	(??_ExponentialProfile+1)& (0+255),w,b
  3480  000ECC  0100               	movlb	0	; () banked
  3481  000ECE  2363               	addwfc	(??_ExponentialProfile+3)& (0+255),f,b
  3482  000ED0  0100               	movlb	0	; () banked
  3483  000ED2  BF63               	btfsc	(??_ExponentialProfile+3)& (0+255),7,b
  3484  000ED4  D00A               	goto	l1696
  3485  000ED6  0100               	movlb	0	; () banked
  3486  000ED8  5163               	movf	(??_ExponentialProfile+3)& (0+255),w,b
  3487  000EDA  E105               	bnz	u2260
  3488  000EDC  0E65               	movlw	101
  3489  000EDE  0100               	movlb	0	; () banked
  3490  000EE0  5D62               	subwf	(??_ExponentialProfile+2)& (0+255),w,b
  3491  000EE2  A0D8               	btfss	status,0,c
  3492  000EE4  D002               	goto	l1696
  3493  000EE6                     u2260:
  3494                           
  3495                           ; BSR set to: 0
  3496                           ;pwm.c: 112: change = 20;
  3497  000EE6  0E14               	movlw	20
  3498  000EE8  D045               	goto	L8
  3499  000EEA                     l1696:
  3500                           
  3501                           ; BSR set to: 0
  3502  000EEA  5023               	movf	_MinimumDuty,w,c
  3503  000EEC  0100               	movlb	0	; () banked
  3504  000EEE  6F60               	movwf	??_ExponentialProfile& (0+255),b
  3505  000EF0  6B61               	clrf	(??_ExponentialProfile+1)& (0+255),b
  3506  000EF2  0100               	movlb	0	; () banked
  3507  000EF4  1F60               	comf	??_ExponentialProfile& (0+255),f,b
  3508  000EF6  1F61               	comf	(??_ExponentialProfile+1)& (0+255),f,b
  3509  000EF8  4B60               	infsnz	??_ExponentialProfile& (0+255),f,b
  3510  000EFA  2B61               	incf	(??_ExponentialProfile+1)& (0+255),f,b
  3511  000EFC  5043               	movf	ExponentialProfile@current,w,c
  3512  000EFE  0100               	movlb	0	; () banked
  3513  000F00  6F62               	movwf	(??_ExponentialProfile+2)& (0+255),b
  3514  000F02  6B63               	clrf	(??_ExponentialProfile+3)& (0+255),b
  3515  000F04  0100               	movlb	0	; () banked
  3516  000F06  5160               	movf	??_ExponentialProfile& (0+255),w,b
  3517  000F08  0100               	movlb	0	; () banked
  3518  000F0A  2762               	addwf	(??_ExponentialProfile+2)& (0+255),f,b
  3519  000F0C  0100               	movlb	0	; () banked
  3520  000F0E  5161               	movf	(??_ExponentialProfile+1)& (0+255),w,b
  3521  000F10  0100               	movlb	0	; () banked
  3522  000F12  2363               	addwfc	(??_ExponentialProfile+3)& (0+255),f,b
  3523  000F14  0100               	movlb	0	; () banked
  3524  000F16  BF63               	btfsc	(??_ExponentialProfile+3)& (0+255),7,b
  3525  000F18  D00A               	goto	l1700
  3526  000F1A  0100               	movlb	0	; () banked
  3527  000F1C  5163               	movf	(??_ExponentialProfile+3)& (0+255),w,b
  3528  000F1E  E105               	bnz	u2270
  3529  000F20  0E4C               	movlw	76
  3530  000F22  0100               	movlb	0	; () banked
  3531  000F24  5D62               	subwf	(??_ExponentialProfile+2)& (0+255),w,b
  3532  000F26  A0D8               	btfss	status,0,c
  3533  000F28  D002               	goto	l1700
  3534  000F2A                     u2270:
  3535                           
  3536                           ; BSR set to: 0
  3537                           ;pwm.c: 114: change = 10;
  3538  000F2A  0E0A               	movlw	10
  3539  000F2C  D023               	goto	L8
  3540  000F2E                     l1700:
  3541                           
  3542                           ; BSR set to: 0
  3543  000F2E  5023               	movf	_MinimumDuty,w,c
  3544  000F30  0100               	movlb	0	; () banked
  3545  000F32  6F60               	movwf	??_ExponentialProfile& (0+255),b
  3546  000F34  6B61               	clrf	(??_ExponentialProfile+1)& (0+255),b
  3547  000F36  0100               	movlb	0	; () banked
  3548  000F38  1F60               	comf	??_ExponentialProfile& (0+255),f,b
  3549  000F3A  1F61               	comf	(??_ExponentialProfile+1)& (0+255),f,b
  3550  000F3C  4B60               	infsnz	??_ExponentialProfile& (0+255),f,b
  3551  000F3E  2B61               	incf	(??_ExponentialProfile+1)& (0+255),f,b
  3552  000F40  5043               	movf	ExponentialProfile@current,w,c
  3553  000F42  0100               	movlb	0	; () banked
  3554  000F44  6F62               	movwf	(??_ExponentialProfile+2)& (0+255),b
  3555  000F46  6B63               	clrf	(??_ExponentialProfile+3)& (0+255),b
  3556  000F48  0100               	movlb	0	; () banked
  3557  000F4A  5160               	movf	??_ExponentialProfile& (0+255),w,b
  3558  000F4C  0100               	movlb	0	; () banked
  3559  000F4E  2762               	addwf	(??_ExponentialProfile+2)& (0+255),f,b
  3560  000F50  0100               	movlb	0	; () banked
  3561  000F52  5161               	movf	(??_ExponentialProfile+1)& (0+255),w,b
  3562  000F54  0100               	movlb	0	; () banked
  3563  000F56  2363               	addwfc	(??_ExponentialProfile+3)& (0+255),f,b
  3564  000F58  0100               	movlb	0	; () banked
  3565  000F5A  BF63               	btfsc	(??_ExponentialProfile+3)& (0+255),7,b
  3566  000F5C  D00A               	goto	l1704
  3567  000F5E  0100               	movlb	0	; () banked
  3568  000F60  5163               	movf	(??_ExponentialProfile+3)& (0+255),w,b
  3569  000F62  E105               	bnz	u2280
  3570  000F64  0E33               	movlw	51
  3571  000F66  0100               	movlb	0	; () banked
  3572  000F68  5D62               	subwf	(??_ExponentialProfile+2)& (0+255),w,b
  3573  000F6A  A0D8               	btfss	status,0,c
  3574  000F6C  D002               	goto	l1704
  3575  000F6E                     u2280:
  3576                           
  3577                           ; BSR set to: 0
  3578                           ;pwm.c: 116: change = 5;
  3579  000F6E  0E05               	movlw	5
  3580  000F70  D001               	goto	L8
  3581  000F72                     l1704:
  3582                           
  3583                           ; BSR set to: 0
  3584                           ;pwm.c: 118: change = 1;
  3585  000F72  0E01               	movlw	1
  3586  000F74                     L8:
  3587  000F74  6E42               	movwf	ExponentialProfile@change,c
  3588                           
  3589                           ; BSR set to: 0
  3590                           ;pwm.c: 119: }
  3591                           ;pwm.c: 120: if (current-target < change) {
  3592                           
  3593                           ; BSR set to: 0
  3594                           
  3595                           ; BSR set to: 0
  3596                           
  3597                           ; BSR set to: 0
  3598                           
  3599                           ; BSR set to: 0
  3600                           
  3601                           ; BSR set to: 0
  3602  000F76  5042               	movf	ExponentialProfile@change,w,c
  3603  000F78  0100               	movlb	0	; () banked
  3604  000F7A  6F60               	movwf	??_ExponentialProfile& (0+255),b
  3605  000F7C  6B61               	clrf	(??_ExponentialProfile+1)& (0+255),b
  3606  000F7E  5041               	movf	ExponentialProfile@target,w,c
  3607  000F80  0100               	movlb	0	; () banked
  3608  000F82  6F62               	movwf	(??_ExponentialProfile+2)& (0+255),b
  3609  000F84  6B63               	clrf	(??_ExponentialProfile+3)& (0+255),b
  3610  000F86  0100               	movlb	0	; () banked
  3611  000F88  1F62               	comf	(??_ExponentialProfile+2)& (0+255),f,b
  3612  000F8A  1F63               	comf	(??_ExponentialProfile+3)& (0+255),f,b
  3613  000F8C  4B62               	infsnz	(??_ExponentialProfile+2)& (0+255),f,b
  3614  000F8E  2B63               	incf	(??_ExponentialProfile+3)& (0+255),f,b
  3615  000F90  5043               	movf	ExponentialProfile@current,w,c
  3616  000F92  0100               	movlb	0	; () banked
  3617  000F94  6F64               	movwf	(??_ExponentialProfile+4)& (0+255),b
  3618  000F96  6B65               	clrf	(??_ExponentialProfile+5)& (0+255),b
  3619  000F98  0100               	movlb	0	; () banked
  3620  000F9A  5162               	movf	(??_ExponentialProfile+2)& (0+255),w,b
  3621  000F9C  0100               	movlb	0	; () banked
  3622  000F9E  2764               	addwf	(??_ExponentialProfile+4)& (0+255),f,b
  3623  000FA0  0100               	movlb	0	; () banked
  3624  000FA2  5163               	movf	(??_ExponentialProfile+3)& (0+255),w,b
  3625  000FA4  0100               	movlb	0	; () banked
  3626  000FA6  2365               	addwfc	(??_ExponentialProfile+5)& (0+255),f,b
  3627  000FA8  0100               	movlb	0	; () banked
  3628  000FAA  5160               	movf	??_ExponentialProfile& (0+255),w,b
  3629  000FAC  0100               	movlb	0	; () banked
  3630  000FAE  5D64               	subwf	(??_ExponentialProfile+4)& (0+255),w,b
  3631  000FB0  0100               	movlb	0	; () banked
  3632  000FB2  5165               	movf	(??_ExponentialProfile+5)& (0+255),w,b
  3633  000FB4  0A80               	xorlw	128
  3634  000FB6  0100               	movlb	0	; () banked
  3635  000FB8  6F66               	movwf	(??_ExponentialProfile+6)& (0+255),b
  3636  000FBA  0100               	movlb	0	; () banked
  3637  000FBC  5161               	movf	(??_ExponentialProfile+1)& (0+255),w,b
  3638  000FBE  0A80               	xorlw	128
  3639  000FC0  0100               	movlb	0	; () banked
  3640  000FC2  5966               	subwfb	(??_ExponentialProfile+6)& (0+255),w,b
  3641  000FC4  B0D8               	btfsc	status,0,c
  3642  000FC6  D0DF               	goto	l1736
  3643                           
  3644                           ; BSR set to: 0
  3645                           ;pwm.c: 121: change = current-target;
  3646  000FC8  5041               	movf	ExponentialProfile@target,w,c
  3647  000FCA  0800               	sublw	0
  3648  000FCC  2443               	addwf	ExponentialProfile@current,w,c
  3649  000FCE  D0DA               	goto	L9
  3650  000FD0                     l1710:
  3651                           
  3652                           ;pwm.c: 125: if (current-MinimumDuty > 200) {
  3653  000FD0  5023               	movf	_MinimumDuty,w,c
  3654  000FD2  0100               	movlb	0	; () banked
  3655  000FD4  6F60               	movwf	??_ExponentialProfile& (0+255),b
  3656  000FD6  6B61               	clrf	(??_ExponentialProfile+1)& (0+255),b
  3657  000FD8  0100               	movlb	0	; () banked
  3658  000FDA  1F60               	comf	??_ExponentialProfile& (0+255),f,b
  3659  000FDC  1F61               	comf	(??_ExponentialProfile+1)& (0+255),f,b
  3660  000FDE  4B60               	infsnz	??_ExponentialProfile& (0+255),f,b
  3661  000FE0  2B61               	incf	(??_ExponentialProfile+1)& (0+255),f,b
  3662  000FE2  5043               	movf	ExponentialProfile@current,w,c
  3663  000FE4  0100               	movlb	0	; () banked
  3664  000FE6  6F62               	movwf	(??_ExponentialProfile+2)& (0+255),b
  3665  000FE8  6B63               	clrf	(??_ExponentialProfile+3)& (0+255),b
  3666  000FEA  0100               	movlb	0	; () banked
  3667  000FEC  5160               	movf	??_ExponentialProfile& (0+255),w,b
  3668  000FEE  0100               	movlb	0	; () banked
  3669  000FF0  2762               	addwf	(??_ExponentialProfile+2)& (0+255),f,b
  3670  000FF2  0100               	movlb	0	; () banked
  3671  000FF4  5161               	movf	(??_ExponentialProfile+1)& (0+255),w,b
  3672  000FF6  0100               	movlb	0	; () banked
  3673  000FF8  2363               	addwfc	(??_ExponentialProfile+3)& (0+255),f,b
  3674  000FFA  0100               	movlb	0	; () banked
  3675  000FFC  BF63               	btfsc	(??_ExponentialProfile+3)& (0+255),7,b
  3676  000FFE  D00C               	goto	l1714
  3677  001000  0100               	movlb	0	; () banked
  3678  001002  5163               	movf	(??_ExponentialProfile+3)& (0+255),w,b
  3679  001004  E105               	bnz	u2300
  3680  001006  0EC9               	movlw	201
  3681  001008  0100               	movlb	0	; () banked
  3682  00100A  5D62               	subwf	(??_ExponentialProfile+2)& (0+255),w,b
  3683  00100C  A0D8               	btfss	status,0,c
  3684  00100E  D004               	goto	l1714
  3685  001010                     u2300:
  3686                           
  3687                           ; BSR set to: 0
  3688                           ;pwm.c: 126: change = current-target;
  3689  001010  5041               	movf	ExponentialProfile@target,w,c
  3690  001012  0800               	sublw	0
  3691  001014  2443               	addwf	ExponentialProfile@current,w,c
  3692  001016  D089               	goto	L14
  3693  001018                     l1714:
  3694                           
  3695                           ; BSR set to: 0
  3696  001018  5023               	movf	_MinimumDuty,w,c
  3697  00101A  0100               	movlb	0	; () banked
  3698  00101C  6F60               	movwf	??_ExponentialProfile& (0+255),b
  3699  00101E  6B61               	clrf	(??_ExponentialProfile+1)& (0+255),b
  3700  001020  0100               	movlb	0	; () banked
  3701  001022  1F60               	comf	??_ExponentialProfile& (0+255),f,b
  3702  001024  1F61               	comf	(??_ExponentialProfile+1)& (0+255),f,b
  3703  001026  4B60               	infsnz	??_ExponentialProfile& (0+255),f,b
  3704  001028  2B61               	incf	(??_ExponentialProfile+1)& (0+255),f,b
  3705  00102A  5043               	movf	ExponentialProfile@current,w,c
  3706  00102C  0100               	movlb	0	; () banked
  3707  00102E  6F62               	movwf	(??_ExponentialProfile+2)& (0+255),b
  3708  001030  6B63               	clrf	(??_ExponentialProfile+3)& (0+255),b
  3709  001032  0100               	movlb	0	; () banked
  3710  001034  5160               	movf	??_ExponentialProfile& (0+255),w,b
  3711  001036  0100               	movlb	0	; () banked
  3712  001038  2762               	addwf	(??_ExponentialProfile+2)& (0+255),f,b
  3713  00103A  0100               	movlb	0	; () banked
  3714  00103C  5161               	movf	(??_ExponentialProfile+1)& (0+255),w,b
  3715  00103E  0100               	movlb	0	; () banked
  3716  001040  2363               	addwfc	(??_ExponentialProfile+3)& (0+255),f,b
  3717  001042  0100               	movlb	0	; () banked
  3718  001044  BF63               	btfsc	(??_ExponentialProfile+3)& (0+255),7,b
  3719  001046  D00A               	goto	l1718
  3720  001048  0100               	movlb	0	; () banked
  3721  00104A  5163               	movf	(??_ExponentialProfile+3)& (0+255),w,b
  3722  00104C  E105               	bnz	u2310
  3723  00104E  0E97               	movlw	151
  3724  001050  0100               	movlb	0	; () banked
  3725  001052  5D62               	subwf	(??_ExponentialProfile+2)& (0+255),w,b
  3726  001054  A0D8               	btfss	status,0,c
  3727  001056  D002               	goto	l1718
  3728  001058                     u2310:
  3729                           
  3730                           ; BSR set to: 0
  3731                           ;pwm.c: 128: change = 25;
  3732  001058  0E19               	movlw	25
  3733  00105A  D067               	goto	L14
  3734  00105C                     l1718:
  3735                           
  3736                           ; BSR set to: 0
  3737  00105C  5023               	movf	_MinimumDuty,w,c
  3738  00105E  0100               	movlb	0	; () banked
  3739  001060  6F60               	movwf	??_ExponentialProfile& (0+255),b
  3740  001062  6B61               	clrf	(??_ExponentialProfile+1)& (0+255),b
  3741  001064  0100               	movlb	0	; () banked
  3742  001066  1F60               	comf	??_ExponentialProfile& (0+255),f,b
  3743  001068  1F61               	comf	(??_ExponentialProfile+1)& (0+255),f,b
  3744  00106A  4B60               	infsnz	??_ExponentialProfile& (0+255),f,b
  3745  00106C  2B61               	incf	(??_ExponentialProfile+1)& (0+255),f,b
  3746  00106E  5043               	movf	ExponentialProfile@current,w,c
  3747  001070  0100               	movlb	0	; () banked
  3748  001072  6F62               	movwf	(??_ExponentialProfile+2)& (0+255),b
  3749  001074  6B63               	clrf	(??_ExponentialProfile+3)& (0+255),b
  3750  001076  0100               	movlb	0	; () banked
  3751  001078  5160               	movf	??_ExponentialProfile& (0+255),w,b
  3752  00107A  0100               	movlb	0	; () banked
  3753  00107C  2762               	addwf	(??_ExponentialProfile+2)& (0+255),f,b
  3754  00107E  0100               	movlb	0	; () banked
  3755  001080  5161               	movf	(??_ExponentialProfile+1)& (0+255),w,b
  3756  001082  0100               	movlb	0	; () banked
  3757  001084  2363               	addwfc	(??_ExponentialProfile+3)& (0+255),f,b
  3758  001086  0100               	movlb	0	; () banked
  3759  001088  BF63               	btfsc	(??_ExponentialProfile+3)& (0+255),7,b
  3760  00108A  D00A               	goto	l1722
  3761  00108C  0100               	movlb	0	; () banked
  3762  00108E  5163               	movf	(??_ExponentialProfile+3)& (0+255),w,b
  3763  001090  E105               	bnz	u2320
  3764  001092  0E65               	movlw	101
  3765  001094  0100               	movlb	0	; () banked
  3766  001096  5D62               	subwf	(??_ExponentialProfile+2)& (0+255),w,b
  3767  001098  A0D8               	btfss	status,0,c
  3768  00109A  D002               	goto	l1722
  3769  00109C                     u2320:
  3770                           
  3771                           ; BSR set to: 0
  3772                           ;pwm.c: 130: change = 20;
  3773  00109C  0E14               	movlw	20
  3774  00109E  D045               	goto	L14
  3775  0010A0                     l1722:
  3776                           
  3777                           ; BSR set to: 0
  3778  0010A0  5023               	movf	_MinimumDuty,w,c
  3779  0010A2  0100               	movlb	0	; () banked
  3780  0010A4  6F60               	movwf	??_ExponentialProfile& (0+255),b
  3781  0010A6  6B61               	clrf	(??_ExponentialProfile+1)& (0+255),b
  3782  0010A8  0100               	movlb	0	; () banked
  3783  0010AA  1F60               	comf	??_ExponentialProfile& (0+255),f,b
  3784  0010AC  1F61               	comf	(??_ExponentialProfile+1)& (0+255),f,b
  3785  0010AE  4B60               	infsnz	??_ExponentialProfile& (0+255),f,b
  3786  0010B0  2B61               	incf	(??_ExponentialProfile+1)& (0+255),f,b
  3787  0010B2  5043               	movf	ExponentialProfile@current,w,c
  3788  0010B4  0100               	movlb	0	; () banked
  3789  0010B6  6F62               	movwf	(??_ExponentialProfile+2)& (0+255),b
  3790  0010B8  6B63               	clrf	(??_ExponentialProfile+3)& (0+255),b
  3791  0010BA  0100               	movlb	0	; () banked
  3792  0010BC  5160               	movf	??_ExponentialProfile& (0+255),w,b
  3793  0010BE  0100               	movlb	0	; () banked
  3794  0010C0  2762               	addwf	(??_ExponentialProfile+2)& (0+255),f,b
  3795  0010C2  0100               	movlb	0	; () banked
  3796  0010C4  5161               	movf	(??_ExponentialProfile+1)& (0+255),w,b
  3797  0010C6  0100               	movlb	0	; () banked
  3798  0010C8  2363               	addwfc	(??_ExponentialProfile+3)& (0+255),f,b
  3799  0010CA  0100               	movlb	0	; () banked
  3800  0010CC  BF63               	btfsc	(??_ExponentialProfile+3)& (0+255),7,b
  3801  0010CE  D00A               	goto	l1726
  3802  0010D0  0100               	movlb	0	; () banked
  3803  0010D2  5163               	movf	(??_ExponentialProfile+3)& (0+255),w,b
  3804  0010D4  E105               	bnz	u2330
  3805  0010D6  0E4C               	movlw	76
  3806  0010D8  0100               	movlb	0	; () banked
  3807  0010DA  5D62               	subwf	(??_ExponentialProfile+2)& (0+255),w,b
  3808  0010DC  A0D8               	btfss	status,0,c
  3809  0010DE  D002               	goto	l1726
  3810  0010E0                     u2330:
  3811                           
  3812                           ; BSR set to: 0
  3813                           ;pwm.c: 132: change = 10;
  3814  0010E0  0E0A               	movlw	10
  3815  0010E2  D023               	goto	L14
  3816  0010E4                     l1726:
  3817                           
  3818                           ; BSR set to: 0
  3819  0010E4  5023               	movf	_MinimumDuty,w,c
  3820  0010E6  0100               	movlb	0	; () banked
  3821  0010E8  6F60               	movwf	??_ExponentialProfile& (0+255),b
  3822  0010EA  6B61               	clrf	(??_ExponentialProfile+1)& (0+255),b
  3823  0010EC  0100               	movlb	0	; () banked
  3824  0010EE  1F60               	comf	??_ExponentialProfile& (0+255),f,b
  3825  0010F0  1F61               	comf	(??_ExponentialProfile+1)& (0+255),f,b
  3826  0010F2  4B60               	infsnz	??_ExponentialProfile& (0+255),f,b
  3827  0010F4  2B61               	incf	(??_ExponentialProfile+1)& (0+255),f,b
  3828  0010F6  5043               	movf	ExponentialProfile@current,w,c
  3829  0010F8  0100               	movlb	0	; () banked
  3830  0010FA  6F62               	movwf	(??_ExponentialProfile+2)& (0+255),b
  3831  0010FC  6B63               	clrf	(??_ExponentialProfile+3)& (0+255),b
  3832  0010FE  0100               	movlb	0	; () banked
  3833  001100  5160               	movf	??_ExponentialProfile& (0+255),w,b
  3834  001102  0100               	movlb	0	; () banked
  3835  001104  2762               	addwf	(??_ExponentialProfile+2)& (0+255),f,b
  3836  001106  0100               	movlb	0	; () banked
  3837  001108  5161               	movf	(??_ExponentialProfile+1)& (0+255),w,b
  3838  00110A  0100               	movlb	0	; () banked
  3839  00110C  2363               	addwfc	(??_ExponentialProfile+3)& (0+255),f,b
  3840  00110E  0100               	movlb	0	; () banked
  3841  001110  BF63               	btfsc	(??_ExponentialProfile+3)& (0+255),7,b
  3842  001112  D00A               	goto	l1730
  3843  001114  0100               	movlb	0	; () banked
  3844  001116  5163               	movf	(??_ExponentialProfile+3)& (0+255),w,b
  3845  001118  E105               	bnz	u2340
  3846  00111A  0E33               	movlw	51
  3847  00111C  0100               	movlb	0	; () banked
  3848  00111E  5D62               	subwf	(??_ExponentialProfile+2)& (0+255),w,b
  3849  001120  A0D8               	btfss	status,0,c
  3850  001122  D002               	goto	l1730
  3851  001124                     u2340:
  3852                           
  3853                           ; BSR set to: 0
  3854                           ;pwm.c: 134: change = 5;
  3855  001124  0E05               	movlw	5
  3856  001126  D001               	goto	L14
  3857  001128                     l1730:
  3858                           
  3859                           ; BSR set to: 0
  3860                           ;pwm.c: 136: change = 1;
  3861  001128  0E01               	movlw	1
  3862  00112A                     L14:
  3863  00112A  6E42               	movwf	ExponentialProfile@change,c
  3864                           
  3865                           ; BSR set to: 0
  3866                           ;pwm.c: 137: }
  3867                           ;pwm.c: 138: if (target-current < change) {
  3868                           
  3869                           ; BSR set to: 0
  3870                           
  3871                           ; BSR set to: 0
  3872                           
  3873                           ; BSR set to: 0
  3874                           
  3875                           ; BSR set to: 0
  3876                           
  3877                           ; BSR set to: 0
  3878  00112C  5042               	movf	ExponentialProfile@change,w,c
  3879  00112E  0100               	movlb	0	; () banked
  3880  001130  6F60               	movwf	??_ExponentialProfile& (0+255),b
  3881  001132  6B61               	clrf	(??_ExponentialProfile+1)& (0+255),b
  3882  001134  5043               	movf	ExponentialProfile@current,w,c
  3883  001136  0100               	movlb	0	; () banked
  3884  001138  6F62               	movwf	(??_ExponentialProfile+2)& (0+255),b
  3885  00113A  6B63               	clrf	(??_ExponentialProfile+3)& (0+255),b
  3886  00113C  0100               	movlb	0	; () banked
  3887  00113E  1F62               	comf	(??_ExponentialProfile+2)& (0+255),f,b
  3888  001140  1F63               	comf	(??_ExponentialProfile+3)& (0+255),f,b
  3889  001142  4B62               	infsnz	(??_ExponentialProfile+2)& (0+255),f,b
  3890  001144  2B63               	incf	(??_ExponentialProfile+3)& (0+255),f,b
  3891  001146  5041               	movf	ExponentialProfile@target,w,c
  3892  001148  0100               	movlb	0	; () banked
  3893  00114A  6F64               	movwf	(??_ExponentialProfile+4)& (0+255),b
  3894  00114C  6B65               	clrf	(??_ExponentialProfile+5)& (0+255),b
  3895  00114E  0100               	movlb	0	; () banked
  3896  001150  5162               	movf	(??_ExponentialProfile+2)& (0+255),w,b
  3897  001152  0100               	movlb	0	; () banked
  3898  001154  2764               	addwf	(??_ExponentialProfile+4)& (0+255),f,b
  3899  001156  0100               	movlb	0	; () banked
  3900  001158  5163               	movf	(??_ExponentialProfile+3)& (0+255),w,b
  3901  00115A  0100               	movlb	0	; () banked
  3902  00115C  2365               	addwfc	(??_ExponentialProfile+5)& (0+255),f,b
  3903  00115E  0100               	movlb	0	; () banked
  3904  001160  5160               	movf	??_ExponentialProfile& (0+255),w,b
  3905  001162  0100               	movlb	0	; () banked
  3906  001164  5D64               	subwf	(??_ExponentialProfile+4)& (0+255),w,b
  3907  001166  0100               	movlb	0	; () banked
  3908  001168  5165               	movf	(??_ExponentialProfile+5)& (0+255),w,b
  3909  00116A  0A80               	xorlw	128
  3910  00116C  0100               	movlb	0	; () banked
  3911  00116E  6F66               	movwf	(??_ExponentialProfile+6)& (0+255),b
  3912  001170  0100               	movlb	0	; () banked
  3913  001172  5161               	movf	(??_ExponentialProfile+1)& (0+255),w,b
  3914  001174  0A80               	xorlw	128
  3915  001176  0100               	movlb	0	; () banked
  3916  001178  5966               	subwfb	(??_ExponentialProfile+6)& (0+255),w,b
  3917  00117A  B0D8               	btfsc	status,0,c
  3918  00117C  D004               	goto	l1736
  3919                           
  3920                           ; BSR set to: 0
  3921                           ;pwm.c: 139: change = target-current;
  3922  00117E  5043               	movf	ExponentialProfile@current,w,c
  3923  001180  0800               	sublw	0
  3924  001182  2441               	addwf	ExponentialProfile@target,w,c
  3925  001184                     L9:
  3926  001184  6E42               	movwf	ExponentialProfile@change,c
  3927  001186                     l1736:
  3928                           
  3929                           ; BSR set to: 0
  3930                           ;pwm.c: 140: }
  3931                           ;pwm.c: 141: }
  3932                           ;pwm.c: 142: return change;
  3933  001186  5042               	movf	ExponentialProfile@change,w,c
  3934  001188  0012               	return	
  3935  00118A                     __end_of_ExponentialProfile:
  3936                           	opt stack 0
  3937                           tblptru	equ	0xFF8
  3938                           tblptrh	equ	0xFF7
  3939                           tblptrl	equ	0xFF6
  3940                           tablat	equ	0xFF5
  3941                           prodh	equ	0xFF4
  3942                           prodl	equ	0xFF3
  3943                           intcon	equ	0xFF2
  3944                           intcon2	equ	0xFF1
  3945                           postinc0	equ	0xFEE
  3946                           wreg	equ	0xFE8
  3947                           indf1	equ	0xFE7
  3948                           postinc1	equ	0xFE6
  3949                           postdec1	equ	0xFE5
  3950                           fsr1h	equ	0xFE2
  3951                           fsr1l	equ	0xFE1
  3952                           indf2	equ	0xFDF
  3953                           postinc2	equ	0xFDE
  3954                           fsr2h	equ	0xFDA
  3955                           fsr2l	equ	0xFD9
  3956                           status	equ	0xFD8
  3957                           
  3958 ;; *************** function _I2C_Slave_Read *****************
  3959 ;; Defined at:
  3960 ;;		line 91 in file "i2c.c"
  3961 ;; Parameters:    Size  Location     Type
  3962 ;;		None
  3963 ;; Auto vars:     Size  Location     Type
  3964 ;;		None
  3965 ;; Return value:  Size  Location     Type
  3966 ;;                  1    wreg      void 
  3967 ;; Registers used:
  3968 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3969 ;; Tracked objects:
  3970 ;;		On entry : 0/0
  3971 ;;		On exit  : 0/0
  3972 ;;		Unchanged: 0/0
  3973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3974 ;;      Params:         0       0       0       0
  3975 ;;      Locals:         0       0       0       0
  3976 ;;      Temps:         16       0       0       0
  3977 ;;      Totals:        16       0       0       0
  3978 ;;Total ram usage:       16 bytes
  3979 ;; Hardware stack levels used:    1
  3980 ;; Hardware stack levels required when called:    1
  3981 ;; This function calls:
  3982 ;;		i2___wmul
  3983 ;; This function is called by:
  3984 ;;		Interrupt level 2
  3985 ;; This function uses a non-reentrant model
  3986 ;;
  3987                           
  3988                           	psect	intcode
  3989  000008                     __pintcode:
  3990                           	opt stack 0
  3991  000008                     _I2C_Slave_Read:
  3992                           	opt stack 25
  3993                           
  3994                           ; BSR set to: 0
  3995                           ;incstack = 0
  3996  000008  8249               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3997  00000A  CFFA F02D          	movff	pclath,??_I2C_Slave_Read+2
  3998  00000E  CFFB F02E          	movff	pclatu,??_I2C_Slave_Read+3
  3999  000012  CFE9 F02F          	movff	fsr0l,??_I2C_Slave_Read+4
  4000  000016  CFEA F030          	movff	fsr0h,??_I2C_Slave_Read+5
  4001  00001A  CFE1 F031          	movff	fsr1l,??_I2C_Slave_Read+6
  4002  00001E  CFE2 F032          	movff	fsr1h,??_I2C_Slave_Read+7
  4003  000022  CFD9 F033          	movff	fsr2l,??_I2C_Slave_Read+8
  4004  000026  CFDA F034          	movff	fsr2h,??_I2C_Slave_Read+9
  4005  00002A  CFF3 F035          	movff	prodl,??_I2C_Slave_Read+10
  4006  00002E  CFF4 F036          	movff	prodh,??_I2C_Slave_Read+11
  4007  000032  CFF6 F037          	movff	tblptrl,??_I2C_Slave_Read+12
  4008  000036  CFF7 F038          	movff	tblptrh,??_I2C_Slave_Read+13
  4009  00003A  CFF8 F039          	movff	tblptru,??_I2C_Slave_Read+14
  4010  00003E  CFF5 F03A          	movff	tablat,??_I2C_Slave_Read+15
  4011                           
  4012                           ;i2c.c: 93: if(PIR1bits.SSPIF == 1) {
  4013  000042  A69E               	btfss	3998,3,c	;volatile
  4014  000044  D18B               	goto	i2l134
  4015                           
  4016                           ;i2c.c: 95: currentByte = SSPBUF;
  4017  000046  CFC9 F022          	movff	4041,_currentByte	;volatile
  4018                           
  4019                           ;i2c.c: 97: SSPCON1bits.CKP = 0;
  4020  00004A  98C6               	bcf	4038,4,c	;volatile
  4021                           
  4022                           ;i2c.c: 99: if ((SSPCON1bits.SSPOV) || (SSPCON1bits.WCOL)) {
  4023  00004C  BCC6               	btfsc	4038,6,c	;volatile
  4024  00004E  D002               	goto	i2l90
  4025  000050  AEC6               	btfss	4038,7,c	;volatile
  4026  000052  D003               	goto	i2l88
  4027  000054                     i2l90:
  4028                           
  4029                           ;i2c.c: 100: SSPCON1bits.SSPOV = 0;
  4030  000054  9CC6               	bcf	4038,6,c	;volatile
  4031                           
  4032                           ;i2c.c: 101: SSPCON1bits.WCOL = 0;
  4033  000056  9EC6               	bcf	4038,7,c	;volatile
  4034  000058  D178               	goto	i2l1668
  4035  00005A                     i2l88:
  4036  00005A  AAC7               	btfss	4039,5,c	;volatile
  4037  00005C  B4C7               	btfsc	4039,2,c	;volatile
  4038  00005E  D001               	goto	i2l92
  4039  000060  D172               	goto	i2l1666
  4040  000062                     i2l92:
  4041  000062  BAC7               	btfsc	4039,5,c	;volatile
  4042  000064  B4C7               	btfsc	4039,2,c	;volatile
  4043  000066  D173               	goto	i2l94
  4044                           
  4045                           ;i2c.c: 110: if (state == 0) {
  4046  000068  5021               	movf	_state,w,c
  4047  00006A  A4D8               	btfss	status,2,c
  4048  00006C  D14A               	goto	i2l1664
  4049                           
  4050                           ;i2c.c: 112: state = currentByte;
  4051  00006E  C022  F021         	movff	_currentByte,_state
  4052                           
  4053                           ;i2c.c: 113: } else {
  4054  000072  D16B               	goto	i2l1668
  4055  000074                     i2l1578:
  4056                           
  4057                           ;i2c.c: 117: for (i = 0; i < 4; i++) {
  4058  000074  0E00               	movlw	0
  4059  000076  6E1E               	movwf	_i+1,c
  4060  000078  0E00               	movlw	0
  4061  00007A  6E1D               	movwf	_i,c
  4062  00007C  BE1E               	btfsc	_i+1,7,c
  4063  00007E  D008               	goto	i2l1584
  4064  000080  501E               	movf	_i+1,w,c
  4065  000082  E105               	bnz	i2u189_40
  4066  000084  0E04               	movlw	4
  4067  000086  5C1D               	subwf	_i,w,c
  4068  000088  B0D8               	btfsc	status,0,c
  4069  00008A  D15D               	goto	i2l1666
  4070  00008C  D001               	goto	i2l1584
  4071  00008E                     i2u189_40:
  4072  00008E  D15B               	goto	i2l1666
  4073  000090                     i2l1584:
  4074                           
  4075                           ;i2c.c: 118: Motors[i].target = currentByte;
  4076  000090  C01D  F025         	movff	_i,i2___wmul@multiplier
  4077  000094  C01E  F026         	movff	_i+1,i2___wmul@multiplier+1
  4078  000098  0E00               	movlw	0
  4079  00009A  6E28               	movwf	i2___wmul@multiplicand+1,c
  4080  00009C  0E07               	movlw	7
  4081  00009E  6E27               	movwf	i2___wmul@multiplicand,c
  4082  0000A0  EC5E  F00C         	call	i2___wmul	;wreg free
  4083  0000A4  0E05               	movlw	5
  4084  0000A6  2625               	addwf	?i2___wmul,f,c
  4085  0000A8  0E00               	movlw	0
  4086  0000AA  2226               	addwfc	?i2___wmul+1,f,c
  4087  0000AC  0E01               	movlw	low _Motors
  4088  0000AE  2425               	addwf	?i2___wmul,w,c
  4089  0000B0  6ED9               	movwf	fsr2l,c
  4090  0000B2  0E00               	movlw	high _Motors
  4091  0000B4  2026               	addwfc	?i2___wmul+1,w,c
  4092  0000B6  6EDA               	movwf	fsr2h,c
  4093  0000B8  C022  FFDF         	movff	_currentByte,indf2
  4094                           
  4095                           ;i2c.c: 119: if (currentByte < MinimumDuty) {
  4096  0000BC  5023               	movf	_MinimumDuty,w,c
  4097  0000BE  5C22               	subwf	_currentByte,w,c
  4098  0000C0  B0D8               	btfsc	status,0,c
  4099  0000C2  D016               	goto	i2l1590
  4100                           
  4101                           ;i2c.c: 120: Motors[i].target = 0;
  4102  0000C4  C01D  F025         	movff	_i,i2___wmul@multiplier
  4103  0000C8  C01E  F026         	movff	_i+1,i2___wmul@multiplier+1
  4104  0000CC  0E00               	movlw	0
  4105  0000CE  6E28               	movwf	i2___wmul@multiplicand+1,c
  4106  0000D0  0E07               	movlw	7
  4107  0000D2  6E27               	movwf	i2___wmul@multiplicand,c
  4108  0000D4  EC5E  F00C         	call	i2___wmul	;wreg free
  4109  0000D8  0E05               	movlw	5
  4110  0000DA  2625               	addwf	?i2___wmul,f,c
  4111  0000DC  0E00               	movlw	0
  4112  0000DE  2226               	addwfc	?i2___wmul+1,f,c
  4113  0000E0  0E01               	movlw	low _Motors
  4114  0000E2  2425               	addwf	?i2___wmul,w,c
  4115  0000E4  6ED9               	movwf	fsr2l,c
  4116  0000E6  0E00               	movlw	high _Motors
  4117  0000E8  2026               	addwfc	?i2___wmul+1,w,c
  4118  0000EA  6EDA               	movwf	fsr2h,c
  4119  0000EC  0E00               	movlw	0
  4120  0000EE  6EDF               	movwf	indf2,c
  4121  0000F0                     i2l1590:
  4122  0000F0  4A1D               	infsnz	_i,f,c
  4123  0000F2  2A1E               	incf	_i+1,f,c
  4124  0000F4  BE1E               	btfsc	_i+1,7,c
  4125  0000F6  D7CC               	goto	i2l1584
  4126  0000F8  501E               	movf	_i+1,w,c
  4127  0000FA  E101               	bnz	i2u191_40
  4128  0000FC  D7C3               	goto	L15
  4129  0000FE                     i2u191_40:
  4130                           
  4131                           ;i2c.c: 121: }
  4132                           ;i2c.c: 122: }
  4133                           ;i2c.c: 123: break;
  4134  0000FE  D123               	goto	i2l1666
  4135  000100                     i2l103:
  4136                           
  4137                           ;i2c.c: 125: Motors[0].target = currentByte;
  4138  000100  C022  F006         	movff	_currentByte,_Motors+5
  4139                           
  4140                           ;i2c.c: 126: if (currentByte < MinimumDuty) {
  4141  000104  5023               	movf	_MinimumDuty,w,c
  4142  000106  5C22               	subwf	_currentByte,w,c
  4143  000108  B0D8               	btfsc	status,0,c
  4144  00010A  D11D               	goto	i2l1666
  4145                           
  4146                           ;i2c.c: 127: Motors[0].target = 0;
  4147  00010C  0E00               	movlw	0
  4148  00010E  6E06               	movwf	_Motors+5,c
  4149                           
  4150                           ;i2c.c: 128: }
  4151                           ;i2c.c: 129: break;
  4152  000110  D11A               	goto	i2l1666
  4153  000112                     i2l105:
  4154                           
  4155                           ;i2c.c: 131: Motors[1].target = currentByte;
  4156  000112  C022  F00D         	movff	_currentByte,_Motors+12
  4157                           
  4158                           ;i2c.c: 132: if (currentByte < MinimumDuty) {
  4159  000116  5023               	movf	_MinimumDuty,w,c
  4160  000118  5C22               	subwf	_currentByte,w,c
  4161  00011A  B0D8               	btfsc	status,0,c
  4162  00011C  D114               	goto	i2l1666
  4163                           
  4164                           ;i2c.c: 133: Motors[1].target = 0;
  4165  00011E  0E00               	movlw	0
  4166  000120  6E0D               	movwf	_Motors+12,c
  4167                           
  4168                           ;i2c.c: 134: }
  4169                           ;i2c.c: 135: break;
  4170  000122  D111               	goto	i2l1666
  4171  000124                     i2l107:
  4172                           
  4173                           ;i2c.c: 137: Motors[2].target = currentByte;
  4174  000124  C022  F014         	movff	_currentByte,_Motors+19
  4175                           
  4176                           ;i2c.c: 138: if (currentByte < MinimumDuty) {
  4177  000128  5023               	movf	_MinimumDuty,w,c
  4178  00012A  5C22               	subwf	_currentByte,w,c
  4179  00012C  B0D8               	btfsc	status,0,c
  4180  00012E  D10B               	goto	i2l1666
  4181                           
  4182                           ;i2c.c: 139: Motors[2].target = 0;
  4183  000130  0E00               	movlw	0
  4184  000132  6E14               	movwf	_Motors+19,c
  4185                           
  4186                           ;i2c.c: 140: }
  4187                           ;i2c.c: 141: break;
  4188  000134  D108               	goto	i2l1666
  4189  000136                     i2l109:
  4190                           
  4191                           ;i2c.c: 143: Motors[3].target = currentByte;
  4192  000136  C022  F01B         	movff	_currentByte,_Motors+26
  4193                           
  4194                           ;i2c.c: 144: if (currentByte < MinimumDuty) {
  4195  00013A  5023               	movf	_MinimumDuty,w,c
  4196  00013C  5C22               	subwf	_currentByte,w,c
  4197  00013E  B0D8               	btfsc	status,0,c
  4198  000140  D102               	goto	i2l1666
  4199                           
  4200                           ;i2c.c: 145: Motors[3].target = 0;
  4201  000142  0E00               	movlw	0
  4202  000144  6E1B               	movwf	_Motors+26,c
  4203                           
  4204                           ;i2c.c: 146: }
  4205                           ;i2c.c: 147: break;
  4206  000146  D0FF               	goto	i2l1666
  4207  000148                     i2l1610:
  4208                           
  4209                           ;i2c.c: 149: for (i = 0; i < 4; i++) {
  4210  000148  0E00               	movlw	0
  4211  00014A  6E1E               	movwf	_i+1,c
  4212  00014C  0E00               	movlw	0
  4213  00014E  6E1D               	movwf	_i,c
  4214  000150  BE1E               	btfsc	_i+1,7,c
  4215  000152  D008               	goto	i2l1616
  4216  000154  501E               	movf	_i+1,w,c
  4217  000156  E105               	bnz	i2u196_40
  4218  000158  0E04               	movlw	4
  4219  00015A  5C1D               	subwf	_i,w,c
  4220  00015C  B0D8               	btfsc	status,0,c
  4221  00015E  D0F3               	goto	i2l1666
  4222  000160  D001               	goto	i2l1616
  4223  000162                     i2u196_40:
  4224  000162  D0F1               	goto	i2l1666
  4225  000164                     i2l1616:
  4226                           
  4227                           ;i2c.c: 150: if ((currentByte>>(i+1)) & 0b00000001) {
  4228  000164  C01D  F02B         	movff	_i,??_I2C_Slave_Read
  4229  000168  0E01               	movlw	1
  4230  00016A  262B               	addwf	??_I2C_Slave_Read,f,c
  4231  00016C  C022  F02C         	movff	_currentByte,??_I2C_Slave_Read+1
  4232  000170  2A2B               	incf	??_I2C_Slave_Read,f,c
  4233  000172  D002               	goto	i2u197_44
  4234  000174                     i2u197_45:
  4235  000174  90D8               	bcf	status,0,c
  4236  000176  322C               	rrcf	??_I2C_Slave_Read+1,f,c
  4237  000178                     i2u197_44:
  4238  000178  2E2B               	decfsz	??_I2C_Slave_Read,f,c
  4239  00017A  D7FC               	goto	i2u197_45
  4240  00017C  A02C               	btfss	??_I2C_Slave_Read+1,0,c
  4241  00017E  D012               	goto	i2l1620
  4242                           
  4243                           ;i2c.c: 151: Motors[i].targetDirection = 1;
  4244  000180  C01D  F025         	movff	_i,i2___wmul@multiplier
  4245  000184  C01E  F026         	movff	_i+1,i2___wmul@multiplier+1
  4246  000188  0E00               	movlw	0
  4247  00018A  6E28               	movwf	i2___wmul@multiplicand+1,c
  4248  00018C  0E07               	movlw	7
  4249  00018E  6E27               	movwf	i2___wmul@multiplicand,c
  4250  000190  EC5E  F00C         	call	i2___wmul	;wreg free
  4251  000194  0E01               	movlw	low _Motors
  4252  000196  2425               	addwf	?i2___wmul,w,c
  4253  000198  6ED9               	movwf	fsr2l,c
  4254  00019A  0E00               	movlw	high _Motors
  4255  00019C  2026               	addwfc	?i2___wmul+1,w,c
  4256  00019E  6EDA               	movwf	fsr2h,c
  4257  0001A0  88DF               	bsf	indf2,4,c
  4258                           
  4259                           ;i2c.c: 152: } else {
  4260  0001A2  D011               	goto	i2l1622
  4261  0001A4                     i2l1620:
  4262                           
  4263                           ;i2c.c: 153: Motors[i].targetDirection = 0;
  4264  0001A4  C01D  F025         	movff	_i,i2___wmul@multiplier
  4265  0001A8  C01E  F026         	movff	_i+1,i2___wmul@multiplier+1
  4266  0001AC  0E00               	movlw	0
  4267  0001AE  6E28               	movwf	i2___wmul@multiplicand+1,c
  4268  0001B0  0E07               	movlw	7
  4269  0001B2  6E27               	movwf	i2___wmul@multiplicand,c
  4270  0001B4  EC5E  F00C         	call	i2___wmul	;wreg free
  4271  0001B8  0E01               	movlw	low _Motors
  4272  0001BA  2425               	addwf	?i2___wmul,w,c
  4273  0001BC  6ED9               	movwf	fsr2l,c
  4274  0001BE  0E00               	movlw	high _Motors
  4275  0001C0  2026               	addwfc	?i2___wmul+1,w,c
  4276  0001C2  6EDA               	movwf	fsr2h,c
  4277  0001C4  98DF               	bcf	indf2,4,c
  4278  0001C6                     i2l1622:
  4279  0001C6  4A1D               	infsnz	_i,f,c
  4280  0001C8  2A1E               	incf	_i+1,f,c
  4281  0001CA  BE1E               	btfsc	_i+1,7,c
  4282  0001CC  D7CB               	goto	i2l1616
  4283  0001CE  501E               	movf	_i+1,w,c
  4284  0001D0  E101               	bnz	i2u199_40
  4285  0001D2  D7C2               	goto	L16
  4286  0001D4                     i2u199_40:
  4287                           
  4288                           ;i2c.c: 154: }
  4289                           ;i2c.c: 155: }
  4290                           ;i2c.c: 156: break;
  4291  0001D4  D0B8               	goto	i2l1666
  4292  0001D6                     i2l1626:
  4293                           
  4294                           ;i2c.c: 158: PWMEnable = (currentByte & 0b00000001);
  4295  0001D6  5022               	movf	_currentByte,w,c
  4296  0001D8  0B01               	andlw	1
  4297  0001DA  6E48               	movwf	_PWMEnable,c
  4298                           
  4299                           ;i2c.c: 159: for (i = 0; i < 4; i++) {
  4300  0001DC  0E00               	movlw	0
  4301  0001DE  6E1E               	movwf	_i+1,c
  4302  0001E0  0E00               	movlw	0
  4303  0001E2  6E1D               	movwf	_i,c
  4304  0001E4  BE1E               	btfsc	_i+1,7,c
  4305  0001E6  D008               	goto	i2l1634
  4306  0001E8  501E               	movf	_i+1,w,c
  4307  0001EA  E105               	bnz	i2u200_40
  4308  0001EC  0E04               	movlw	4
  4309  0001EE  5C1D               	subwf	_i,w,c
  4310  0001F0  B0D8               	btfsc	status,0,c
  4311  0001F2  D0A9               	goto	i2l1666
  4312  0001F4  D001               	goto	i2l1634
  4313  0001F6                     i2u200_40:
  4314  0001F6  D0A7               	goto	i2l1666
  4315  0001F8                     i2l1634:
  4316                           
  4317                           ;i2c.c: 160: if ((currentByte>>(i+1)) & 0b00000001) {
  4318  0001F8  C01D  F02B         	movff	_i,??_I2C_Slave_Read
  4319  0001FC  0E01               	movlw	1
  4320  0001FE  262B               	addwf	??_I2C_Slave_Read,f,c
  4321  000200  C022  F02C         	movff	_currentByte,??_I2C_Slave_Read+1
  4322  000204  2A2B               	incf	??_I2C_Slave_Read,f,c
  4323  000206  D002               	goto	i2u201_44
  4324  000208                     i2u201_45:
  4325  000208  90D8               	bcf	status,0,c
  4326  00020A  322C               	rrcf	??_I2C_Slave_Read+1,f,c
  4327  00020C                     i2u201_44:
  4328  00020C  2E2B               	decfsz	??_I2C_Slave_Read,f,c
  4329  00020E  D7FC               	goto	i2u201_45
  4330  000210  A02C               	btfss	??_I2C_Slave_Read+1,0,c
  4331  000212  D012               	goto	i2l1638
  4332                           
  4333                           ;i2c.c: 161: Motors[i].enabled = 1;
  4334  000214  C01D  F025         	movff	_i,i2___wmul@multiplier
  4335  000218  C01E  F026         	movff	_i+1,i2___wmul@multiplier+1
  4336  00021C  0E00               	movlw	0
  4337  00021E  6E28               	movwf	i2___wmul@multiplicand+1,c
  4338  000220  0E07               	movlw	7
  4339  000222  6E27               	movwf	i2___wmul@multiplicand,c
  4340  000224  EC5E  F00C         	call	i2___wmul	;wreg free
  4341  000228  0E01               	movlw	low _Motors
  4342  00022A  2425               	addwf	?i2___wmul,w,c
  4343  00022C  6ED9               	movwf	fsr2l,c
  4344  00022E  0E00               	movlw	high _Motors
  4345  000230  2026               	addwfc	?i2___wmul+1,w,c
  4346  000232  6EDA               	movwf	fsr2h,c
  4347  000234  82DF               	bsf	indf2,1,c
  4348                           
  4349                           ;i2c.c: 162: } else {
  4350  000236  D011               	goto	i2l1640
  4351  000238                     i2l1638:
  4352                           
  4353                           ;i2c.c: 163: Motors[i].enabled = 0;
  4354  000238  C01D  F025         	movff	_i,i2___wmul@multiplier
  4355  00023C  C01E  F026         	movff	_i+1,i2___wmul@multiplier+1
  4356  000240  0E00               	movlw	0
  4357  000242  6E28               	movwf	i2___wmul@multiplicand+1,c
  4358  000244  0E07               	movlw	7
  4359  000246  6E27               	movwf	i2___wmul@multiplicand,c
  4360  000248  EC5E  F00C         	call	i2___wmul	;wreg free
  4361  00024C  0E01               	movlw	low _Motors
  4362  00024E  2425               	addwf	?i2___wmul,w,c
  4363  000250  6ED9               	movwf	fsr2l,c
  4364  000252  0E00               	movlw	high _Motors
  4365  000254  2026               	addwfc	?i2___wmul+1,w,c
  4366  000256  6EDA               	movwf	fsr2h,c
  4367  000258  92DF               	bcf	indf2,1,c
  4368  00025A                     i2l1640:
  4369  00025A  4A1D               	infsnz	_i,f,c
  4370  00025C  2A1E               	incf	_i+1,f,c
  4371  00025E  BE1E               	btfsc	_i+1,7,c
  4372  000260  D7CB               	goto	i2l1634
  4373  000262  501E               	movf	_i+1,w,c
  4374  000264  E170               	bnz	i2l1666
  4375  000266  D7C2               	goto	L17
  4376  000268                     i2l1644:
  4377                           
  4378                           ;i2c.c: 168: PWMPause = currentByte & 0b00000001;
  4379  000268  5022               	movf	_currentByte,w,c
  4380  00026A  0B01               	andlw	1
  4381  00026C  6E24               	movwf	_PWMPause,c
  4382                           
  4383                           ;i2c.c: 169: for (i = 0; i < 4; i++) {
  4384  00026E  0E00               	movlw	0
  4385  000270  6E1E               	movwf	_i+1,c
  4386  000272  0E00               	movlw	0
  4387  000274  6E1D               	movwf	_i,c
  4388  000276                     i2l1648:
  4389  000276  BE1E               	btfsc	_i+1,7,c
  4390  000278  D006               	goto	i2l1652
  4391  00027A  501E               	movf	_i+1,w,c
  4392  00027C  E164               	bnz	i2l1666
  4393  00027E  0E04               	movlw	4
  4394  000280  5C1D               	subwf	_i,w,c
  4395  000282  B0D8               	btfsc	status,0,c
  4396  000284  D060               	goto	i2l1666
  4397  000286                     i2l1652:
  4398                           
  4399                           ;i2c.c: 170: if ((currentByte>>(i+1)) & 0b00000001) {
  4400  000286  C01D  F02B         	movff	_i,??_I2C_Slave_Read
  4401  00028A  0E01               	movlw	1
  4402  00028C  262B               	addwf	??_I2C_Slave_Read,f,c
  4403  00028E  C022  F02C         	movff	_currentByte,??_I2C_Slave_Read+1
  4404  000292  2A2B               	incf	??_I2C_Slave_Read,f,c
  4405  000294  D002               	goto	i2u205_44
  4406  000296                     i2u205_45:
  4407  000296  90D8               	bcf	status,0,c
  4408  000298  322C               	rrcf	??_I2C_Slave_Read+1,f,c
  4409  00029A                     i2u205_44:
  4410  00029A  2E2B               	decfsz	??_I2C_Slave_Read,f,c
  4411  00029C  D7FC               	goto	i2u205_45
  4412  00029E  A02C               	btfss	??_I2C_Slave_Read+1,0,c
  4413  0002A0  D012               	goto	i2l1656
  4414                           
  4415                           ;i2c.c: 171: Motors[i].paused = 1;
  4416  0002A2  C01D  F025         	movff	_i,i2___wmul@multiplier
  4417  0002A6  C01E  F026         	movff	_i+1,i2___wmul@multiplier+1
  4418  0002AA  0E00               	movlw	0
  4419  0002AC  6E28               	movwf	i2___wmul@multiplicand+1,c
  4420  0002AE  0E07               	movlw	7
  4421  0002B0  6E27               	movwf	i2___wmul@multiplicand,c
  4422  0002B2  EC5E  F00C         	call	i2___wmul	;wreg free
  4423  0002B6  0E01               	movlw	low _Motors
  4424  0002B8  2425               	addwf	?i2___wmul,w,c
  4425  0002BA  6ED9               	movwf	fsr2l,c
  4426  0002BC  0E00               	movlw	high _Motors
  4427  0002BE  2026               	addwfc	?i2___wmul+1,w,c
  4428  0002C0  6EDA               	movwf	fsr2h,c
  4429  0002C2  84DF               	bsf	indf2,2,c
  4430                           
  4431                           ;i2c.c: 172: } else {
  4432  0002C4  D011               	goto	i2l1658
  4433  0002C6                     i2l1656:
  4434                           
  4435                           ;i2c.c: 173: Motors[i].paused = 0;
  4436  0002C6  C01D  F025         	movff	_i,i2___wmul@multiplier
  4437  0002CA  C01E  F026         	movff	_i+1,i2___wmul@multiplier+1
  4438  0002CE  0E00               	movlw	0
  4439  0002D0  6E28               	movwf	i2___wmul@multiplicand+1,c
  4440  0002D2  0E07               	movlw	7
  4441  0002D4  6E27               	movwf	i2___wmul@multiplicand,c
  4442  0002D6  EC5E  F00C         	call	i2___wmul	;wreg free
  4443  0002DA  0E01               	movlw	low _Motors
  4444  0002DC  2425               	addwf	?i2___wmul,w,c
  4445  0002DE  6ED9               	movwf	fsr2l,c
  4446  0002E0  0E00               	movlw	high _Motors
  4447  0002E2  2026               	addwfc	?i2___wmul+1,w,c
  4448  0002E4  6EDA               	movwf	fsr2h,c
  4449  0002E6  94DF               	bcf	indf2,2,c
  4450  0002E8                     i2l1658:
  4451  0002E8  4A1D               	infsnz	_i,f,c
  4452  0002EA  2A1E               	incf	_i+1,f,c
  4453  0002EC  D7C4               	goto	i2l1648
  4454  0002EE                     i2l126:
  4455                           
  4456                           ;i2c.c: 178: AccelType = currentByte;
  4457  0002EE  C022  F047         	movff	_currentByte,_AccelType
  4458                           
  4459                           ;i2c.c: 179: break;
  4460  0002F2  D029               	goto	i2l1666
  4461  0002F4                     i2l127:
  4462                           
  4463                           ;i2c.c: 181: AccelRate = currentByte;
  4464  0002F4  C022  F045         	movff	_currentByte,_AccelRate
  4465  0002F8  6A46               	clrf	_AccelRate+1,c
  4466                           
  4467                           ;i2c.c: 182: break;
  4468  0002FA  D025               	goto	i2l1666
  4469  0002FC                     i2l128:
  4470                           
  4471                           ;i2c.c: 184: MinimumDuty = currentByte;
  4472  0002FC  C022  F023         	movff	_currentByte,_MinimumDuty
  4473                           
  4474                           ;i2c.c: 186: }
  4475                           
  4476                           ;i2c.c: 185: break;
  4477  000300  D022               	goto	i2l1666
  4478  000302                     i2l1664:
  4479  000302  5021               	movf	_state,w,c
  4480                           
  4481                           ; Switch size 1, requested type "space"
  4482                           ; Number of cases is 11, Range of values is 1 to 12
  4483                           ; switch strategies available:
  4484                           ; Name         Instructions Cycles
  4485                           ; simple_byte           34    18 (average)
  4486                           ;	Chosen strategy is simple_byte
  4487  000304  0A01               	xorlw	1	; case 1
  4488  000306  B4D8               	btfsc	status,2,c
  4489  000308  D6B5               	goto	i2l1578
  4490  00030A  0A03               	xorlw	3	; case 2
  4491  00030C  B4D8               	btfsc	status,2,c
  4492  00030E  D6F8               	goto	i2l103
  4493  000310  0A01               	xorlw	1	; case 3
  4494  000312  B4D8               	btfsc	status,2,c
  4495  000314  D6FE               	goto	i2l105
  4496  000316  0A07               	xorlw	7	; case 4
  4497  000318  B4D8               	btfsc	status,2,c
  4498  00031A  D704               	goto	i2l107
  4499  00031C  0A01               	xorlw	1	; case 5
  4500  00031E  B4D8               	btfsc	status,2,c
  4501  000320  D70A               	goto	i2l109
  4502  000322  0A02               	xorlw	2	; case 7
  4503  000324  B4D8               	btfsc	status,2,c
  4504  000326  D710               	goto	i2l1610
  4505  000328  0A0F               	xorlw	15	; case 8
  4506  00032A  B4D8               	btfsc	status,2,c
  4507  00032C  D79D               	goto	i2l1644
  4508  00032E  0A01               	xorlw	1	; case 9
  4509  000330  B4D8               	btfsc	status,2,c
  4510  000332  D751               	goto	i2l1626
  4511  000334  0A03               	xorlw	3	; case 10
  4512  000336  B4D8               	btfsc	status,2,c
  4513  000338  D7DA               	goto	i2l126
  4514  00033A  0A01               	xorlw	1	; case 11
  4515  00033C  B4D8               	btfsc	status,2,c
  4516  00033E  D7DA               	goto	i2l127
  4517  000340  0A07               	xorlw	7	; case 12
  4518  000342  B4D8               	btfsc	status,2,c
  4519  000344  D7DB               	goto	i2l128
  4520  000346                     i2l1666:
  4521                           
  4522                           ;i2c.c: 187: state = 0;
  4523  000346  0E00               	movlw	0
  4524  000348  6E21               	movwf	_state,c
  4525  00034A                     i2l1668:
  4526                           
  4527                           ;i2c.c: 188: }
  4528                           ;i2c.c: 189: SSPCON1bits.CKP = 1;
  4529  00034A  88C6               	bsf	4038,4,c	;volatile
  4530                           
  4531                           ;i2c.c: 190: } else if(!SSPSTATbits.D_nA && SSPSTATbits.R_nW) {
  4532  00034C  D006               	goto	i2l91
  4533  00034E                     i2l94:
  4534  00034E  AAC7               	btfss	4039,5,c	;volatile
  4535  000350  A4C7               	btfss	4039,2,c	;volatile
  4536  000352  D003               	goto	i2l91
  4537                           
  4538                           ;i2c.c: 203: SSPCON1bits.CKP = 1;
  4539  000354  88C6               	bsf	4038,4,c	;volatile
  4540  000356                     i2l131:
  4541  000356  B0C7               	btfsc	4039,0,c	;volatile
  4542  000358  D7FE               	goto	i2l131
  4543  00035A                     i2l91:
  4544                           
  4545                           ;i2c.c: 206: }
  4546                           ;i2c.c: 208: PIR1bits.SSPIF = 0;
  4547  00035A  969E               	bcf	3998,3,c	;volatile
  4548  00035C                     i2l134:
  4549  00035C  C03A  FFF5         	movff	??_I2C_Slave_Read+15,tablat
  4550  000360  C039  FFF8         	movff	??_I2C_Slave_Read+14,tblptru
  4551  000364  C038  FFF7         	movff	??_I2C_Slave_Read+13,tblptrh
  4552  000368  C037  FFF6         	movff	??_I2C_Slave_Read+12,tblptrl
  4553  00036C  C036  FFF4         	movff	??_I2C_Slave_Read+11,prodh
  4554  000370  C035  FFF3         	movff	??_I2C_Slave_Read+10,prodl
  4555  000374  C034  FFDA         	movff	??_I2C_Slave_Read+9,fsr2h
  4556  000378  C033  FFD9         	movff	??_I2C_Slave_Read+8,fsr2l
  4557  00037C  C032  FFE2         	movff	??_I2C_Slave_Read+7,fsr1h
  4558  000380  C031  FFE1         	movff	??_I2C_Slave_Read+6,fsr1l
  4559  000384  C030  FFEA         	movff	??_I2C_Slave_Read+5,fsr0h
  4560  000388  C02F  FFE9         	movff	??_I2C_Slave_Read+4,fsr0l
  4561  00038C  C02E  FFFB         	movff	??_I2C_Slave_Read+3,pclatu
  4562  000390  C02D  FFFA         	movff	??_I2C_Slave_Read+2,pclath
  4563  000394  9249               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4564  000396  0011               	retfie		f
  4565  000398                     __end_of_I2C_Slave_Read:
  4566                           	opt stack 0
  4567                           pclatu	equ	0xFFB
  4568                           pclath	equ	0xFFA
  4569                           tblptru	equ	0xFF8
  4570                           tblptrh	equ	0xFF7
  4571                           tblptrl	equ	0xFF6
  4572                           tablat	equ	0xFF5
  4573                           prodh	equ	0xFF4
  4574                           prodl	equ	0xFF3
  4575                           intcon	equ	0xFF2
  4576                           intcon2	equ	0xFF1
  4577                           postinc0	equ	0xFEE
  4578                           fsr0h	equ	0xFEA
  4579                           fsr0l	equ	0xFE9
  4580                           wreg	equ	0xFE8
  4581                           indf1	equ	0xFE7
  4582                           postinc1	equ	0xFE6
  4583                           postdec1	equ	0xFE5
  4584                           fsr1h	equ	0xFE2
  4585                           fsr1l	equ	0xFE1
  4586                           indf2	equ	0xFDF
  4587                           postinc2	equ	0xFDE
  4588                           fsr2h	equ	0xFDA
  4589                           fsr2l	equ	0xFD9
  4590                           status	equ	0xFD8
  4591                           
  4592 ;; *************** function i2___wmul *****************
  4593 ;; Defined at:
  4594 ;;		line 15 in file "/Applications/microchip/xc8/v1.42/sources/common/Umul16.c"
  4595 ;; Parameters:    Size  Location     Type
  4596 ;;  multiplier      2    0[COMRAM] unsigned int 
  4597 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4598 ;; Auto vars:     Size  Location     Type
  4599 ;;  __wmul          2    4[COMRAM] unsigned int 
  4600 ;; Return value:  Size  Location     Type
  4601 ;;                  2    0[COMRAM] unsigned int 
  4602 ;; Registers used:
  4603 ;;		wreg, status,2, status,0, prodl, prodh
  4604 ;; Tracked objects:
  4605 ;;		On entry : 0/0
  4606 ;;		On exit  : 0/0
  4607 ;;		Unchanged: 0/0
  4608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4609 ;;      Params:         4       0       0       0
  4610 ;;      Locals:         2       0       0       0
  4611 ;;      Temps:          0       0       0       0
  4612 ;;      Totals:         6       0       0       0
  4613 ;;Total ram usage:        6 bytes
  4614 ;; Hardware stack levels used:    1
  4615 ;; This function calls:
  4616 ;;		Nothing
  4617 ;; This function is called by:
  4618 ;;		_I2C_Slave_Read
  4619 ;; This function uses a non-reentrant model
  4620 ;;
  4621                           
  4622                           	psect	text12
  4623  0018BC                     __ptext12:
  4624                           	opt stack 0
  4625  0018BC                     i2___wmul:
  4626                           	opt stack 25
  4627                           
  4628                           ;incstack = 0
  4629  0018BC  5025               	movf	i2___wmul@multiplier,w,c
  4630  0018BE  0227               	mulwf	i2___wmul@multiplicand,c
  4631  0018C0  CFF3 F029          	movff	prodl,i2___wmul@product
  4632  0018C4  CFF4 F02A          	movff	prodh,i2___wmul@product+1
  4633  0018C8  5025               	movf	i2___wmul@multiplier,w,c
  4634  0018CA  0228               	mulwf	i2___wmul@multiplicand+1,c
  4635  0018CC  50F3               	movf	prodl,w,c
  4636  0018CE  262A               	addwf	i2___wmul@product+1,f,c
  4637  0018D0  5026               	movf	i2___wmul@multiplier+1,w,c
  4638  0018D2  0227               	mulwf	i2___wmul@multiplicand,c
  4639  0018D4  50F3               	movf	prodl,w,c
  4640  0018D6  262A               	addwf	i2___wmul@product+1,f,c
  4641  0018D8  C029  F025         	movff	i2___wmul@product,?i2___wmul
  4642  0018DC  C02A  F026         	movff	i2___wmul@product+1,?i2___wmul+1
  4643  0018E0  0012               	return	
  4644  0018E2                     __end_ofi2___wmul:
  4645                           	opt stack 0
  4646  0000                     pclatu	equ	0xFFB
  4647                           pclath	equ	0xFFA
  4648                           tblptru	equ	0xFF8
  4649                           tblptrh	equ	0xFF7
  4650                           tblptrl	equ	0xFF6
  4651                           tablat	equ	0xFF5
  4652                           prodh	equ	0xFF4
  4653                           prodl	equ	0xFF3
  4654                           intcon	equ	0xFF2
  4655                           intcon2	equ	0xFF1
  4656                           postinc0	equ	0xFEE
  4657                           fsr0h	equ	0xFEA
  4658                           fsr0l	equ	0xFE9
  4659                           wreg	equ	0xFE8
  4660                           indf1	equ	0xFE7
  4661                           postinc1	equ	0xFE6
  4662                           postdec1	equ	0xFE5
  4663                           fsr1h	equ	0xFE2
  4664                           fsr1l	equ	0xFE1
  4665                           indf2	equ	0xFDF
  4666                           postinc2	equ	0xFDE
  4667                           fsr2h	equ	0xFDA
  4668                           fsr2l	equ	0xFD9
  4669                           status	equ	0xFD8
  4670                           pclatu	equ	0xFFB
  4671                           pclath	equ	0xFFA
  4672                           tblptru	equ	0xFF8
  4673                           tblptrh	equ	0xFF7
  4674                           tblptrl	equ	0xFF6
  4675                           tablat	equ	0xFF5
  4676                           prodh	equ	0xFF4
  4677                           prodl	equ	0xFF3
  4678                           intcon	equ	0xFF2
  4679                           intcon2	equ	0xFF1
  4680                           postinc0	equ	0xFEE
  4681                           fsr0h	equ	0xFEA
  4682                           fsr0l	equ	0xFE9
  4683                           wreg	equ	0xFE8
  4684                           indf1	equ	0xFE7
  4685                           postinc1	equ	0xFE6
  4686                           postdec1	equ	0xFE5
  4687                           fsr1h	equ	0xFE2
  4688                           fsr1l	equ	0xFE1
  4689                           indf2	equ	0xFDF
  4690                           postinc2	equ	0xFDE
  4691                           fsr2h	equ	0xFDA
  4692                           fsr2l	equ	0xFD9
  4693                           status	equ	0xFD8
  4694                           
  4695                           	psect	rparam
  4696  0000                     pclatu	equ	0xFFB
  4697                           pclath	equ	0xFFA
  4698                           tblptru	equ	0xFF8
  4699                           tblptrh	equ	0xFF7
  4700                           tblptrl	equ	0xFF6
  4701                           tablat	equ	0xFF5
  4702                           prodh	equ	0xFF4
  4703                           prodl	equ	0xFF3
  4704                           intcon	equ	0xFF2
  4705                           intcon2	equ	0xFF1
  4706                           postinc0	equ	0xFEE
  4707                           fsr0h	equ	0xFEA
  4708                           fsr0l	equ	0xFE9
  4709                           wreg	equ	0xFE8
  4710                           indf1	equ	0xFE7
  4711                           postinc1	equ	0xFE6
  4712                           postdec1	equ	0xFE5
  4713                           fsr1h	equ	0xFE2
  4714                           fsr1l	equ	0xFE1
  4715                           indf2	equ	0xFDF
  4716                           postinc2	equ	0xFDE
  4717                           fsr2h	equ	0xFDA
  4718                           fsr2l	equ	0xFD9
  4719                           status	equ	0xFD8
  4720                           
  4721                           	psect	temp
  4722  000049                     btemp:
  4723                           	opt stack 0
  4724  000049                     	ds	1
  4725  0000                     int$flags	set	btemp
  4726                           pclatu	equ	0xFFB
  4727                           pclath	equ	0xFFA
  4728                           tblptru	equ	0xFF8
  4729                           tblptrh	equ	0xFF7
  4730                           tblptrl	equ	0xFF6
  4731                           tablat	equ	0xFF5
  4732                           prodh	equ	0xFF4
  4733                           prodl	equ	0xFF3
  4734                           intcon	equ	0xFF2
  4735                           intcon2	equ	0xFF1
  4736                           postinc0	equ	0xFEE
  4737                           fsr0h	equ	0xFEA
  4738                           fsr0l	equ	0xFE9
  4739                           wreg	equ	0xFE8
  4740                           indf1	equ	0xFE7
  4741                           postinc1	equ	0xFE6
  4742                           postdec1	equ	0xFE5
  4743                           fsr1h	equ	0xFE2
  4744                           fsr1l	equ	0xFE1
  4745                           indf2	equ	0xFDF
  4746                           postinc2	equ	0xFDE
  4747                           fsr2h	equ	0xFDA
  4748                           fsr2l	equ	0xFD9
  4749                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         36
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     32      72
    BANK0           160     19      19
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _InitPWM->___wmul
    _AcceleratePWM->_StopMotor
    _StopMotor->_ExponentialProfile
    _SetPin->___wmul
    _AccelerateMotor->_ExponentialProfile
    _ExponentialProfile->___wmul

Critical Paths under _I2C_Slave_Read in COMRAM

    _I2C_Slave_Read->i2___wmul

Critical Paths under _main in BANK0

    _main->_CheckPWMOutput
    _CheckPWMOutput->_AcceleratePWM
    _AcceleratePWM->_AccelerateMotor
    _StopMotor->_ExponentialProfile
    _AccelerateMotor->_ExponentialProfile

Critical Paths under _I2C_Slave_Read in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _I2C_Slave_Read in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _I2C_Slave_Read in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   91400
                     _CheckPWMOutput
                            _InitI2C
                            _InitPWM
                          _InitPorts
 ---------------------------------------------------------------------------------
 (1) _InitPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitPWM                                              2     2      0   17094
                                             28 COMRAM     2     2      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _InitI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckPWMOutput                                       4     4      0   74306
                                             15 BANK0      4     4      0
                      _AcceleratePWM
                             _SetPin
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _AcceleratePWM                                        4     4      0   55404
                                             11 BANK0      4     4      0
                    _AccelerateMotor
                          _StopMotor
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _StopMotor                                            3     1      2   19608
                                             31 COMRAM     1     1      0
                                              7 BANK0      2     0      2
                 _ExponentialProfile
                             _SetPin
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _SetPin                                               2     1      1    1033
                                             28 COMRAM     2     1      1
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _AccelerateMotor                                      4     2      2   18702
                                              7 BANK0      4     2      2
                 _ExponentialProfile
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4   16778
                                             22 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _ExponentialProfile                                  10     9      1    1090
                                             28 COMRAM     3     2      1
                                              0 BANK0      7     7      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _I2C_Slave_Read                                      16    16      0     573
                                              6 COMRAM    16    16      0
                           i2___wmul
 ---------------------------------------------------------------------------------
 (6) i2___wmul                                             6     2      4     573
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckPWMOutput
     _AcceleratePWM
       _AccelerateMotor
         _ExponentialProfile
           ___wmul (ARG)
         ___wmul
       _StopMotor
         _ExponentialProfile
           ___wmul (ARG)
         _SetPin
           ___wmul (ARG)
         ___wmul
       ___wmul
     _SetPin
       ___wmul (ARG)
     ___wmul
   _InitI2C
   _InitPWM
     ___wmul
   _InitPorts

 _I2C_Slave_Read (ROOT)
   i2___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       6        0.0%
BANK2              100      0       0       7        0.0%
BITBANK1           100      0       0       9        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     13      13       4       11.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     20      48       1       76.6%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5B       8        0.0%
DATA                 0      0      5B      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sun Jun  4 22:09:49 2017

                          _i 001D                  _SSPSTATbits 000FC7          ___wmul@multiplicand 003D  
               __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000                          l170 1798  
                        l171 17A4                          l172 17B0                          l252 177A  
                        l173 17BC                          l174 17C8                          l175 17D4  
                        l167 1780                          l176 17E0                          l177 17EC  
                        l169 178C                          l178 17F8                          l179 1804  
               __CFG_CPB$OFF 000000                 __CFG_CPD$OFF 000000                 __CFG_BORV$19 000000  
                        wreg 000FE8                 __CFG_LVP$OFF 000000                         l1700 0F2E  
                       l1710 0FD0                         l1704 0F72                         l1800 0D14  
                       l1730 1128                         l1722 10A0                         l1714 1018  
                       l1820 1694                         l1726 10E4                         l1718 105C  
                       l1806 0DFA                         l1814 165C                         l1910 0908  
                       l1736 1186                         l1824 1702                         l1904 084E  
                       l1762 13A4                         l1818 1686                         l1914 0980  
                       l1692 0EA6                         l1780 0A42                         l1764 13D2  
                       l1756 131A                         l1772 1492                         l1828 1766  
                       l1924 09AE                         l1860 03C0                         l1852 1606  
                       l1932 1916                         l1678 1810                         l1758 1348  
                       l1918 0994                         l1846 14D4                         l1696 0EEA  
                       l1688 0E62                         l1792 0BAA                         l1768 1464  
                       l1786 0AD0                         l1890 0686                         l1882 05D0  
                       l1874 04EA                         l1796 0C2E                         l1788 0B26  
                       l1898 0798                         u2115 1788                         u2300 1010  
                       u2116 178A                         u2205 17F4                         u2125 1794  
                       u2310 1058                         u2206 17F6                         u2126 1796  
                       u2215 1800                         u2135 17A0                         u2320 109C  
                       u2240 0E5E                         u2216 1802                         u2136 17A2  
                       u2400 1264                         u2225 180C                         u2145 17AC  
                       u2330 10E0                         u2250 0EA2                         u2226 180E  
                       u2146 17AE                         u2410 12E6                         u2155 17B8  
                       u2340 1124                         u2260 0EE6                         u2156 17BA  
                       u2420 12E8                         u2165 17C4                         u2270 0F2A  
                       u2166 17C6                         u2406 1266                         u2175 17D0  
                       u2280 0F6E                         u2176 17D2                         u2185 17DC  
                       u2186 17DE                         u2370 11E0                         u2530 165A  
                       u2610 14D2                         u2195 17E8                         u2196 17EA  
                       u2380 120C                         u2372 11E2                         u2382 120E  
                       u2630 03BE                         u2560 16BC                         u2570 16EA  
                       u2562 16BE                         u2572 16EC                         i2l90 0054  
                       i2l91 035A                         i2l92 0062                         i2l94 034E  
                       i2l88 005A                _AcceleratePWM 1638                         _TMR0 000FD6  
                       _main 1904                         fsr0h 000FEA                         fsr1h 000FE2  
                       fsr2h 000FDA                         fsr0l 000FE9                         indf1 000FE7  
                       indf2 000FDF                         fsr1l 000FE1                         fsr2l 000FD9  
                       btemp 0049                         prodh 000FF4                         prodl 000FF3  
                       start 0398                __CFG_IESO$OFF 000000                __CFG_FOSC$IRC 000000  
               ___param_bank 000000              __end_of_InitI2C 1904           _ExponentialProfile 0E10  
            __end_of_InitPWM 1638                        ?_main 0025          ?_ExponentialProfile 0041  
                      i2l103 0100                        i2l105 0112                        i2l131 0356  
                      i2l107 0124                        i2l109 0136                        i2l126 02EE  
                      i2l134 035C                        i2l127 02F4                        i2l128 02FC  
             __CFG_BBSIZ$OFF 000000                        _TRISA 000F92                        _TRISB 000F93  
                      _TRISC 000F94                __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000  
              __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000  
             __CFG_EBTRB$OFF 000000               ?_AcceleratePWM 0025                        _state 0021  
                      pclath 000FFA                        tablat 000FF5             __end_ofi2___wmul 18E2  
       ??_ExponentialProfile 0060                        status 000FD8               __CFG_HFOFST$ON 000000  
             __CFG_MCLRE$OFF 000000              __initialization 185C                 __end_of_main 191C  
   ExponentialProfile@change 0042               __CFG_PCLKEN$ON 000000     ExponentialProfile@target 0041  
                     ??_main 0045                __activetblptr 000002               __CFG_PLLEN$OFF 000000  
                     i2l1610 0148                       i2l1620 01A4                       i2l1622 01C6  
                     i2l1640 025A                       i2l1616 0164                       i2l1634 01F8  
                     i2l1626 01D6                       i2l1652 0286                       i2l1644 0268  
                     i2l1638 0238                       i2l1590 00F0               __CFG_WDTEN$OFF 000000  
                     i2l1656 02C6                       i2l1648 0276                       i2l1584 0090  
                     i2l1664 0302                       i2l1658 02E8                       i2l1666 0346  
                     i2l1578 0074                       i2l1668 034A                       _SSPADD 000FC8  
                     _SSPBUF 000FC9           __size_of_InitPorts 000E                    ??_InitI2C 003B  
                  ??_InitPWM 0041              _AccelerateMotor 09B4               __CFG_XINST$OFF 000000  
                     _SetPin 177C                       _Motors 0001                       ___wmul 1896  
             __CFG_STVREN$ON 000000                       clear_0 1882                 __pdataCOMRAM 0045  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
            ??_AcceleratePWM 006B           __size_of_StopMotor 031E                   __accesstop 0060  
    __end_of__initialization 1888                ___rparam_used 000001               __pcstackCOMRAM 0025  
                SetPin@value 0041      __size_of_I2C_Slave_Read 0390                    ?i2___wmul 0025  
          __end_of_InitPorts 192A              CheckPWMOutput@i 0071      __end_of_AccelerateMotor 0E10  
                _MinimumDuty 0023                      ?_SetPin 0041                      ?___wmul 003B  
          __end_of_StopMotor 14A8      __size_of_CheckPWMOutput 0618                   ??i2___wmul 0029  
            __CFG_USBDIV$OFF 000000                      _InitI2C 18E2                      _InitPWM 14A8  
            __CFG_PWRTEN$OFF 000000                      __Hparam 0000                      __Lparam 0000  
            __size_of_SetPin 00E0              __size_of___wmul 0026                      __pcinit 185C  
                    __ramtop 0300                      __ptext0 1904                      __ptext1 191C  
                    __ptext2 14A8                      __ptext3 18E2                      __ptext4 039C  
                    __ptext5 1638                      __ptext6 118A                      __ptext7 177C  
                    __ptext8 09B4                      __ptext9 1896                    _T0CONbits 000FD5  
           ?_AccelerateMotor 0067         end_of_initialization 1888                __Lmediumconst 0000  
        i2___wmul@multiplier 0025  __size_of_ExponentialProfile 037A               _I2C_Slave_Read 0008  
                    postdec1 000FE5                      postinc0 000FEE                      postinc1 000FE6  
                    postinc2 000FDE                    _AccelRate 0045                    _PWMEnable 0048  
                  _AccelType 0047       __end_of_I2C_Slave_Read 0398               __end_of_SetPin 185C  
             __end_of___wmul 18BC                __pidataCOMRAM 192A               _CheckPWMOutput 039C  
           i2___wmul@product 0029          start_initialization 185C            __size_ofi2___wmul 0026  
                  SetPin@pin 0042                    _InitPorts 191C        __end_of_AcceleratePWM 177C  
            ?_I2C_Slave_Read 0025                     ??_SetPin 0042                     ??___wmul 003F  
     __end_of_CheckPWMOutput 09B4                    _StopMotor 118A                  __pbssCOMRAM 0001  
              __pcstackBANK0 0060                   ?_InitPorts 0025                     ?_InitI2C 0025  
                   ?_InitPWM 0025                    __pintcode 0008               StopMotor@index 0067  
            ?_CheckPWMOutput 0025                   ?_StopMotor 0067               ___wmul@product 003F  
                   _LATAbits 000F89                     _LATBbits 000F8A                     _LATCbits 000F8B  
             AcceleratePWM@i 006D                     _PIE1bits 000F9D                     i2u200_40 01F6  
                   i2u201_44 020C                     i2u201_45 0208                     i2u205_44 029A  
                   i2u205_45 0296                     i2u191_40 00FE                     _PIR1bits 000F9E  
                   i2u196_40 0162                     i2u189_40 008E                     i2u197_44 0178  
                   i2u197_45 0174                     i2u199_40 01D4             __CFG_WDTPS$32768 000000  
                   _PWMPause 0024            ___wmul@multiplier 003B         AccelerateMotor@index 0067  
                   i2___wmul 18BC                     InitPWM@n 0041                     _WPUBbits 000F78  
                ??_InitPorts 003B                  _INTCON2bits 000FF1                    copy_data0 1870  
 __end_of_ExponentialProfile 118A             __size_of_InitI2C 0022             __size_of_InitPWM 0190  
   __size_of_AccelerateMotor 045C                     __Hrparam 0000                     __Lrparam 0000  
         __CFG_BOREN$SBORDIS 000000        i2___wmul@multiplicand 0027                  _currentByte 0022  
                ??_StopMotor 0044                     __ptext10 0E10                     __ptext12 18BC  
           ??_I2C_Slave_Read 002B                __size_of_main 0018                     int$flags 0049  
  ExponentialProfile@current 0043                   _INTCONbits 000FF2                     intlevel2 0000  
                 _OSCCONbits 000FD3             ??_CheckPWMOutput 006F         __CFG_CPUDIV$NOCLKDIV 000000  
          ??_AccelerateMotor 0069       __size_of_AcceleratePWM 0144                  _SSPCON1bits 000FC6  
                _SSPCON2bits 000FC5                   _AccelCount 001F  
