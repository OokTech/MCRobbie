

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Thu Jun 15 19:19:13 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F14K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    27  0000                     
    28                           ; Version 1.42
    29                           ; Generated 13/04/2017 GMT
    30                           ; 
    31                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F14K50 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     
    63                           	psect	idataCOMRAM
    64  002150                     __pidataCOMRAM:
    65                           	opt stack 0
    66                           
    67                           ;initializer for _AccelRate
    68  002150  0096               	dw	150
    69                           
    70                           ;initializer for _PWMEnable
    71  002152  01                 	db	1
    72  0000                     _TMR0	set	4054
    73  0000                     _T0CONbits	set	4053
    74  0000                     _LATAbits	set	3977
    75  0000                     _LATBbits	set	3978
    76  0000                     _LATCbits	set	3979
    77  0000                     _SSPBUF	set	4041
    78  0000                     _INTCONbits	set	4082
    79  0000                     _PIE1bits	set	3997
    80  0000                     _PIR1bits	set	3998
    81  0000                     _SSPADD	set	4040
    82  0000                     _SSPCON2bits	set	4037
    83  0000                     _SSPCON1bits	set	4038
    84  0000                     _SSPSTATbits	set	4039
    85  0000                     _WPUBbits	set	3960
    86  0000                     _INTCON2bits	set	4081
    87  0000                     _OSCCONbits	set	4051
    88  0000                     _TRISC	set	3988
    89  0000                     _TRISB	set	3987
    90  0000                     _TRISA	set	3986
    91                           
    92                           ; #config settings
    93  0000                     
    94                           	psect	cinit
    95  002078                     __pcinit:
    96                           	opt stack 0
    97  002078                     start_initialization:
    98                           	opt stack 0
    99  002078                     __initialization:
   100                           	opt stack 0
   101                           
   102                           ; Initialize objects allocated to COMRAM (3 bytes)
   103                           ; load TBLPTR registers with __pidataCOMRAM
   104  002078  0E50               	movlw	low __pidataCOMRAM
   105  00207A  6EF6               	movwf	tblptrl,c
   106  00207C  0E21               	movlw	high __pidataCOMRAM
   107  00207E  6EF7               	movwf	tblptrh,c
   108  002080  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   109  002082  6EF8               	movwf	tblptru,c
   110  002084  0009               	tblrd		*+	;fetch initializer
   111  002086  CFF5 F042          	movff	tablat,__pdataCOMRAM
   112  00208A  0009               	tblrd		*+	;fetch initializer
   113  00208C  CFF5 F043          	movff	tablat,__pdataCOMRAM+1
   114  002090  0009               	tblrd		*+	;fetch initializer
   115  002092  CFF5 F044          	movff	tablat,__pdataCOMRAM+2
   116                           
   117                           ; Clear objects allocated to BANK0 (48 bytes)
   118  002096  EE00  F060         	lfsr	0,__pbssBANK0
   119  00209A  0E30               	movlw	48
   120  00209C                     clear_0:
   121  00209C  6AEE               	clrf	postinc0,c
   122  00209E  06E8               	decf	wreg,f,c
   123  0020A0  E1FD               	bnz	clear_0
   124                           
   125                           ; Clear objects allocated to COMRAM (9 bytes)
   126  0020A2  EE00  F039         	lfsr	0,__pbssCOMRAM
   127  0020A6  0E09               	movlw	9
   128  0020A8                     clear_1:
   129  0020A8  6AEE               	clrf	postinc0,c
   130  0020AA  06E8               	decf	wreg,f,c
   131  0020AC  E1FD               	bnz	clear_1
   132  0020AE                     end_of_initialization:
   133                           	opt stack 0
   134  0020AE                     __end_of__initialization:
   135                           	opt stack 0
   136  0020AE  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   137  0020B0  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   138  0020B2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   139  0020B4  6EF8               	movwf	tblptru,c
   140  0020B6  0100               	movlb	0
   141  0020B8  EF95  F010         	goto	_main	;jump to C main() function
   142                           tblptru	equ	0xFF8
   143                           tblptrh	equ	0xFF7
   144                           tblptrl	equ	0xFF6
   145                           tablat	equ	0xFF5
   146                           postinc0	equ	0xFEE
   147                           wreg	equ	0xFE8
   148                           
   149                           	psect	bssCOMRAM
   150  000039                     __pbssCOMRAM:
   151                           	opt stack 0
   152  000039                     _i:
   153                           	opt stack 0
   154  000039                     	ds	2
   155  00003B                     _AccelCount:
   156                           	opt stack 0
   157  00003B                     	ds	2
   158  00003D                     _state:
   159                           	opt stack 0
   160  00003D                     	ds	1
   161  00003E                     _currentByte:
   162                           	opt stack 0
   163  00003E                     	ds	1
   164  00003F                     _MinimumDuty:
   165                           	opt stack 0
   166  00003F                     	ds	1
   167  000040                     _AccelType:
   168                           	opt stack 0
   169  000040                     	ds	1
   170  000041                     _PWMPause:
   171                           	opt stack 0
   172  000041                     	ds	1
   173                           tblptru	equ	0xFF8
   174                           tblptrh	equ	0xFF7
   175                           tblptrl	equ	0xFF6
   176                           tablat	equ	0xFF5
   177                           postinc0	equ	0xFEE
   178                           wreg	equ	0xFE8
   179                           
   180                           	psect	dataCOMRAM
   181  000042                     __pdataCOMRAM:
   182                           	opt stack 0
   183  000042                     _AccelRate:
   184                           	opt stack 0
   185  000042                     	ds	2
   186  000044                     _PWMEnable:
   187                           	opt stack 0
   188  000044                     	ds	1
   189                           tblptru	equ	0xFF8
   190                           tblptrh	equ	0xFF7
   191                           tblptrl	equ	0xFF6
   192                           tablat	equ	0xFF5
   193                           postinc0	equ	0xFEE
   194                           wreg	equ	0xFE8
   195                           
   196                           	psect	bssBANK0
   197  000060                     __pbssBANK0:
   198                           	opt stack 0
   199  000060                     _Motors:
   200                           	opt stack 0
   201  000060                     	ds	48
   202                           tblptru	equ	0xFF8
   203                           tblptrh	equ	0xFF7
   204                           tblptrl	equ	0xFF6
   205                           tablat	equ	0xFF5
   206                           postinc0	equ	0xFEE
   207                           wreg	equ	0xFE8
   208                           
   209                           	psect	cstackCOMRAM
   210  000001                     __pcstackCOMRAM:
   211                           	opt stack 0
   212  000001                     ?i2___wmul:
   213                           	opt stack 0
   214  000001                     i2___wmul@multiplier:
   215                           	opt stack 0
   216                           
   217                           ; 2 bytes @ 0x0
   218  000001                     	ds	2
   219  000003                     i2___wmul@multiplicand:
   220                           	opt stack 0
   221                           
   222                           ; 2 bytes @ 0x2
   223  000003                     	ds	2
   224  000005                     i2___wmul@product:
   225                           	opt stack 0
   226                           
   227                           ; 2 bytes @ 0x4
   228  000005                     	ds	2
   229  000007                     ??_I2C_Slave_Read:
   230                           
   231                           ; 1 bytes @ 0x6
   232  000007                     	ds	18
   233  000019                     ?___wmul:
   234                           	opt stack 0
   235  000019                     ___wmul@multiplier:
   236                           	opt stack 0
   237                           
   238                           ; 2 bytes @ 0x18
   239  000019                     	ds	2
   240  00001B                     ___wmul@multiplicand:
   241                           	opt stack 0
   242                           
   243                           ; 2 bytes @ 0x1A
   244  00001B                     	ds	2
   245  00001D                     ___wmul@product:
   246                           	opt stack 0
   247                           
   248                           ; 2 bytes @ 0x1C
   249  00001D                     	ds	2
   250  00001F                     SetPin@value:
   251                           	opt stack 0
   252  00001F                     ExponentialProfile@target:
   253                           	opt stack 0
   254                           
   255                           ; 1 bytes @ 0x1E
   256  00001F                     	ds	1
   257  000020                     SetPin@pin:
   258                           	opt stack 0
   259  000020                     ExponentialProfile@index:
   260                           	opt stack 0
   261                           
   262                           ; 2 bytes @ 0x1F
   263  000020                     	ds	1
   264  000021                     InitPWM@i:
   265                           	opt stack 0
   266                           
   267                           ; 2 bytes @ 0x20
   268  000021                     	ds	1
   269  000022                     ??_ExponentialProfile:
   270                           
   271                           ; 1 bytes @ 0x21
   272  000022                     	ds	1
   273  000023                     InitPWM@n:
   274                           	opt stack 0
   275                           
   276                           ; 2 bytes @ 0x22
   277  000023                     	ds	6
   278  000029                     ExponentialProfile@change:
   279                           	opt stack 0
   280                           
   281                           ; 1 bytes @ 0x28
   282  000029                     	ds	1
   283  00002A                     ExponentialProfile@current:
   284                           	opt stack 0
   285                           
   286                           ; 1 bytes @ 0x29
   287  00002A                     	ds	1
   288  00002B                     StopMotor@index:
   289                           	opt stack 0
   290  00002B                     AccelerateMotor@index:
   291                           	opt stack 0
   292                           
   293                           ; 2 bytes @ 0x2A
   294  00002B                     	ds	2
   295  00002D                     ??_StopMotor:
   296  00002D                     ??_AccelerateMotor:
   297                           
   298                           ; 1 bytes @ 0x2C
   299  00002D                     	ds	2
   300  00002F                     _StopMotor$1269:
   301                           	opt stack 0
   302  00002F                     _AccelerateMotor$1271:
   303                           	opt stack 0
   304                           
   305                           ; 1 bytes @ 0x2E
   306  00002F                     	ds	1
   307  000030                     _StopMotor$1270:
   308                           	opt stack 0
   309  000030                     _AccelerateMotor$1272:
   310                           	opt stack 0
   311                           
   312                           ; 1 bytes @ 0x2F
   313  000030                     	ds	1
   314  000031                     AcceleratePWM@index:
   315                           	opt stack 0
   316                           
   317                           ; 2 bytes @ 0x30
   318  000031                     	ds	2
   319  000033                     ??_AcceleratePWM:
   320                           
   321                           ; 1 bytes @ 0x32
   322  000033                     	ds	2
   323  000035                     ??_CheckPWMOutput:
   324                           
   325                           ; 1 bytes @ 0x34
   326  000035                     	ds	2
   327  000037                     CheckPWMOutput@i:
   328                           	opt stack 0
   329                           
   330                           ; 2 bytes @ 0x36
   331  000037                     	ds	2
   332  000039                     tblptru	equ	0xFF8
   333                           tblptrh	equ	0xFF7
   334                           tblptrl	equ	0xFF6
   335                           tablat	equ	0xFF5
   336                           postinc0	equ	0xFEE
   337                           wreg	equ	0xFE8
   338                           
   339                           ; 1 bytes @ 0x38
   340 ;;
   341 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   342 ;;
   343 ;; *************** function _main *****************
   344 ;; Defined at:
   345 ;;		line 115 in file "main.c"
   346 ;; Parameters:    Size  Location     Type
   347 ;;		None
   348 ;; Auto vars:     Size  Location     Type
   349 ;;		None
   350 ;; Return value:  Size  Location     Type
   351 ;;                  1    wreg      void 
   352 ;; Registers used:
   353 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   354 ;; Tracked objects:
   355 ;;		On entry : 0/0
   356 ;;		On exit  : 0/0
   357 ;;		Unchanged: 0/0
   358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   359 ;;      Params:         0       0       0       0
   360 ;;      Locals:         0       0       0       0
   361 ;;      Temps:          0       0       0       0
   362 ;;      Totals:         0       0       0       0
   363 ;;Total ram usage:        0 bytes
   364 ;; Hardware stack levels required when called:    7
   365 ;; This function calls:
   366 ;;		_CheckPWMOutput
   367 ;;		_InitI2C
   368 ;;		_InitPWM
   369 ;;		_InitPorts
   370 ;; This function is called by:
   371 ;;		Startup code after reset
   372 ;; This function uses a non-reentrant model
   373 ;;
   374                           
   375                           	psect	text0
   376  00212A                     __ptext0:
   377                           	opt stack 0
   378  00212A                     _main:
   379                           	opt stack 24
   380                           
   381                           ;main.c: 117: OSCCONbits.IRCF = 0b111;
   382                           
   383                           ;incstack = 0
   384  00212A  88D3               	bsf	4051,4,c	;volatile
   385  00212C  8AD3               	bsf	4051,5,c	;volatile
   386  00212E  8CD3               	bsf	4051,6,c	;volatile
   387                           
   388                           ;main.c: 120: InitPorts();
   389  002130  ECA1  F010         	call	_InitPorts	;wreg free
   390                           
   391                           ;main.c: 121: InitI2C();
   392  002134  EC84  F010         	call	_InitI2C	;wreg free
   393                           
   394                           ;main.c: 122: InitPWM();
   395  002138  EC2C  F00E         	call	_InitPWM	;wreg free
   396  00213C                     l1699:
   397                           
   398                           ;main.c: 127: CheckPWMOutput();
   399  00213C  EC32  F004         	call	_CheckPWMOutput	;wreg free
   400  002140  D7FD               	goto	l1699
   401  002142                     __end_of_main:
   402                           	opt stack 0
   403                           tblptru	equ	0xFF8
   404                           tblptrh	equ	0xFF7
   405                           tblptrl	equ	0xFF6
   406                           tablat	equ	0xFF5
   407                           postinc0	equ	0xFEE
   408                           wreg	equ	0xFE8
   409                           
   410 ;; *************** function _InitPorts *****************
   411 ;; Defined at:
   412 ;;		line 106 in file "main.c"
   413 ;; Parameters:    Size  Location     Type
   414 ;;		None
   415 ;; Auto vars:     Size  Location     Type
   416 ;;		None
   417 ;; Return value:  Size  Location     Type
   418 ;;                  1    wreg      void 
   419 ;; Registers used:
   420 ;;		wreg, status,2
   421 ;; Tracked objects:
   422 ;;		On entry : 0/0
   423 ;;		On exit  : 0/0
   424 ;;		Unchanged: 0/0
   425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   426 ;;      Params:         0       0       0       0
   427 ;;      Locals:         0       0       0       0
   428 ;;      Temps:          0       0       0       0
   429 ;;      Totals:         0       0       0       0
   430 ;;Total ram usage:        0 bytes
   431 ;; Hardware stack levels used:    1
   432 ;; Hardware stack levels required when called:    2
   433 ;; This function calls:
   434 ;;		Nothing
   435 ;; This function is called by:
   436 ;;		_main
   437 ;; This function uses a non-reentrant model
   438 ;;
   439                           
   440                           	psect	text1
   441  002142                     __ptext1:
   442                           	opt stack 0
   443  002142                     _InitPorts:
   444                           	opt stack 28
   445                           
   446                           ;main.c: 108: TRISA = 0x00;
   447                           
   448                           ;incstack = 0
   449  002142  0E00               	movlw	0
   450  002144  6E92               	movwf	3986,c	;volatile
   451                           
   452                           ;main.c: 110: TRISB = 0b01010000;
   453  002146  0E50               	movlw	80
   454  002148  6E93               	movwf	3987,c	;volatile
   455                           
   456                           ;main.c: 112: TRISC = 0x00;
   457  00214A  0E00               	movlw	0
   458  00214C  6E94               	movwf	3988,c	;volatile
   459  00214E  0012               	return		;funcret
   460  002150                     __end_of_InitPorts:
   461                           	opt stack 0
   462                           tblptru	equ	0xFF8
   463                           tblptrh	equ	0xFF7
   464                           tblptrl	equ	0xFF6
   465                           tablat	equ	0xFF5
   466                           postinc0	equ	0xFEE
   467                           wreg	equ	0xFE8
   468                           
   469 ;; *************** function _InitPWM *****************
   470 ;; Defined at:
   471 ;;		line 56 in file "pwm.c"
   472 ;; Parameters:    Size  Location     Type
   473 ;;		None
   474 ;; Auto vars:     Size  Location     Type
   475 ;;  n               2   34[COMRAM] unsigned int 
   476 ;;  i               2   32[COMRAM] unsigned int 
   477 ;; Return value:  Size  Location     Type
   478 ;;                  1    wreg      void 
   479 ;; Registers used:
   480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   481 ;; Tracked objects:
   482 ;;		On entry : 0/0
   483 ;;		On exit  : 0/0
   484 ;;		Unchanged: 0/0
   485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   486 ;;      Params:         0       0       0       0
   487 ;;      Locals:         4       0       0       0
   488 ;;      Temps:          0       0       0       0
   489 ;;      Totals:         4       0       0       0
   490 ;;Total ram usage:        4 bytes
   491 ;; Hardware stack levels used:    1
   492 ;; Hardware stack levels required when called:    3
   493 ;; This function calls:
   494 ;;		_SetPin
   495 ;;		___wmul
   496 ;; This function is called by:
   497 ;;		_main
   498 ;; This function uses a non-reentrant model
   499 ;;
   500                           
   501                           	psect	text2
   502  001C58                     __ptext2:
   503                           	opt stack 0
   504  001C58                     _InitPWM:
   505                           	opt stack 27
   506                           
   507                           ;pwm.c: 58: T0CONbits.T0PS = 0b011;
   508                           
   509                           ;incstack = 0
   510  001C58  50D5               	movf	4053,w,c	;volatile
   511  001C5A  0BF8               	andlw	-8
   512  001C5C  0903               	iorlw	3
   513  001C5E  6ED5               	movwf	4053,c	;volatile
   514                           
   515                           ;pwm.c: 60: T0CONbits.PSA = 0;
   516  001C60  96D5               	bcf	4053,3,c	;volatile
   517                           
   518                           ;pwm.c: 62: T0CONbits.T0CS = 0;
   519  001C62  9AD5               	bcf	4053,5,c	;volatile
   520                           
   521                           ;pwm.c: 64: T0CONbits.T08BIT = 1;
   522  001C64  8CD5               	bsf	4053,6,c	;volatile
   523                           
   524                           ;pwm.c: 66: T0CONbits.TMR0ON = 1;
   525  001C66  8ED5               	bsf	4053,7,c	;volatile
   526                           
   527                           ;pwm.c: 69: unsigned int n;
   528                           ;pwm.c: 70: for (n = 0; n < 4; n++) {
   529  001C68  0E00               	movlw	0
   530  001C6A  6E24               	movwf	InitPWM@n+1,c
   531  001C6C  0E00               	movlw	0
   532  001C6E  6E23               	movwf	InitPWM@n,c
   533  001C70  5024               	movf	InitPWM@n+1,w,c
   534  001C72  E105               	bnz	u1770
   535  001C74  0E04               	movlw	4
   536  001C76  5C23               	subwf	InitPWM@n,w,c
   537  001C78  B0D8               	btfsc	status,0,c
   538  001C7A  D0A3               	goto	l1603
   539  001C7C  D001               	goto	l1597
   540  001C7E                     u1770:
   541  001C7E  D0A1               	goto	l1603
   542  001C80                     l1597:
   543                           
   544                           ;pwm.c: 71: Motors[n].state = (unsigned char)0;
   545  001C80  C023  F019         	movff	InitPWM@n,___wmul@multiplier
   546  001C84  C024  F01A         	movff	InitPWM@n+1,___wmul@multiplier+1
   547  001C88  0E00               	movlw	0
   548  001C8A  6E1C               	movwf	___wmul@multiplicand+1,c
   549  001C8C  0E0C               	movlw	12
   550  001C8E  6E1B               	movwf	___wmul@multiplicand,c
   551  001C90  EC5E  F010         	call	___wmul	;wreg free
   552  001C94  0E60               	movlw	low _Motors
   553  001C96  2419               	addwf	?___wmul,w,c
   554  001C98  6ED9               	movwf	fsr2l,c
   555  001C9A  0E00               	movlw	high _Motors
   556  001C9C  201A               	addwfc	?___wmul+1,w,c
   557  001C9E  6EDA               	movwf	fsr2h,c
   558  001CA0  0100               	movlb	0	; () banked
   559  001CA2  90DF               	bcf	indf2,0,c
   560                           
   561                           ;pwm.c: 72: Motors[n].paused = (unsigned char)0;
   562  001CA4  C023  F019         	movff	InitPWM@n,___wmul@multiplier
   563  001CA8  C024  F01A         	movff	InitPWM@n+1,___wmul@multiplier+1
   564  001CAC  0E00               	movlw	0
   565  001CAE  6E1C               	movwf	___wmul@multiplicand+1,c
   566  001CB0  0E0C               	movlw	12
   567  001CB2  6E1B               	movwf	___wmul@multiplicand,c
   568  001CB4  EC5E  F010         	call	___wmul	;wreg free
   569  001CB8  0E60               	movlw	low _Motors
   570  001CBA  2419               	addwf	?___wmul,w,c
   571  001CBC  6ED9               	movwf	fsr2l,c
   572  001CBE  0E00               	movlw	high _Motors
   573  001CC0  201A               	addwfc	?___wmul+1,w,c
   574  001CC2  6EDA               	movwf	fsr2h,c
   575  001CC4  0100               	movlb	0	; () banked
   576  001CC6  94DF               	bcf	indf2,2,c
   577                           
   578                           ;pwm.c: 73: Motors[n].enabled = (unsigned char)1;
   579  001CC8  C023  F019         	movff	InitPWM@n,___wmul@multiplier
   580  001CCC  C024  F01A         	movff	InitPWM@n+1,___wmul@multiplier+1
   581  001CD0  0E00               	movlw	0
   582  001CD2  6E1C               	movwf	___wmul@multiplicand+1,c
   583  001CD4  0E0C               	movlw	12
   584  001CD6  6E1B               	movwf	___wmul@multiplicand,c
   585  001CD8  EC5E  F010         	call	___wmul	;wreg free
   586  001CDC  0E60               	movlw	low _Motors
   587  001CDE  2419               	addwf	?___wmul,w,c
   588  001CE0  6ED9               	movwf	fsr2l,c
   589  001CE2  0E00               	movlw	high _Motors
   590  001CE4  201A               	addwfc	?___wmul+1,w,c
   591  001CE6  6EDA               	movwf	fsr2h,c
   592  001CE8  0100               	movlb	0	; () banked
   593  001CEA  82DF               	bsf	indf2,1,c
   594                           
   595                           ;pwm.c: 74: Motors[n].direction = (unsigned char)1;
   596  001CEC  C023  F019         	movff	InitPWM@n,___wmul@multiplier
   597  001CF0  C024  F01A         	movff	InitPWM@n+1,___wmul@multiplier+1
   598  001CF4  0E00               	movlw	0
   599  001CF6  6E1C               	movwf	___wmul@multiplicand+1,c
   600  001CF8  0E0C               	movlw	12
   601  001CFA  6E1B               	movwf	___wmul@multiplicand,c
   602  001CFC  EC5E  F010         	call	___wmul	;wreg free
   603  001D00  0E60               	movlw	low _Motors
   604  001D02  2419               	addwf	?___wmul,w,c
   605  001D04  6ED9               	movwf	fsr2l,c
   606  001D06  0E00               	movlw	high _Motors
   607  001D08  201A               	addwfc	?___wmul+1,w,c
   608  001D0A  6EDA               	movwf	fsr2h,c
   609  001D0C  0100               	movlb	0	; () banked
   610  001D0E  86DF               	bsf	indf2,3,c
   611                           
   612                           ;pwm.c: 75: Motors[n].targetDirection = (unsigned char)1;
   613  001D10  C023  F019         	movff	InitPWM@n,___wmul@multiplier
   614  001D14  C024  F01A         	movff	InitPWM@n+1,___wmul@multiplier+1
   615  001D18  0E00               	movlw	0
   616  001D1A  6E1C               	movwf	___wmul@multiplicand+1,c
   617  001D1C  0E0C               	movlw	12
   618  001D1E  6E1B               	movwf	___wmul@multiplicand,c
   619  001D20  EC5E  F010         	call	___wmul	;wreg free
   620  001D24  0E60               	movlw	low _Motors
   621  001D26  2419               	addwf	?___wmul,w,c
   622  001D28  6ED9               	movwf	fsr2l,c
   623  001D2A  0E00               	movlw	high _Motors
   624  001D2C  201A               	addwfc	?___wmul+1,w,c
   625  001D2E  6EDA               	movwf	fsr2h,c
   626  001D30  0100               	movlb	0	; () banked
   627  001D32  88DF               	bsf	indf2,4,c
   628                           
   629                           ;pwm.c: 76: Motors[n].duty = (unsigned char)0;
   630  001D34  C023  F019         	movff	InitPWM@n,___wmul@multiplier
   631  001D38  C024  F01A         	movff	InitPWM@n+1,___wmul@multiplier+1
   632  001D3C  0E00               	movlw	0
   633  001D3E  6E1C               	movwf	___wmul@multiplicand+1,c
   634  001D40  0E0C               	movlw	12
   635  001D42  6E1B               	movwf	___wmul@multiplicand,c
   636  001D44  EC5E  F010         	call	___wmul	;wreg free
   637  001D48  0E05               	movlw	5
   638  001D4A  2619               	addwf	?___wmul,f,c
   639  001D4C  0E00               	movlw	0
   640  001D4E  221A               	addwfc	?___wmul+1,f,c
   641  001D50  0E60               	movlw	low _Motors
   642  001D52  2419               	addwf	?___wmul,w,c
   643  001D54  6ED9               	movwf	fsr2l,c
   644  001D56  0E00               	movlw	high _Motors
   645  001D58  201A               	addwfc	?___wmul+1,w,c
   646  001D5A  6EDA               	movwf	fsr2h,c
   647  001D5C  0E00               	movlw	0
   648  001D5E  6EDF               	movwf	indf2,c
   649                           
   650                           ;pwm.c: 77: Motors[n].target = (unsigned char)0;
   651  001D60  C023  F019         	movff	InitPWM@n,___wmul@multiplier
   652  001D64  C024  F01A         	movff	InitPWM@n+1,___wmul@multiplier+1
   653  001D68  0E00               	movlw	0
   654  001D6A  6E1C               	movwf	___wmul@multiplicand+1,c
   655  001D6C  0E0C               	movlw	12
   656  001D6E  6E1B               	movwf	___wmul@multiplicand,c
   657  001D70  EC5E  F010         	call	___wmul	;wreg free
   658  001D74  0E06               	movlw	6
   659  001D76  2619               	addwf	?___wmul,f,c
   660  001D78  0E00               	movlw	0
   661  001D7A  221A               	addwfc	?___wmul+1,f,c
   662  001D7C  0E60               	movlw	low _Motors
   663  001D7E  2419               	addwf	?___wmul,w,c
   664  001D80  6ED9               	movwf	fsr2l,c
   665  001D82  0E00               	movlw	high _Motors
   666  001D84  201A               	addwfc	?___wmul+1,w,c
   667  001D86  6EDA               	movwf	fsr2h,c
   668  001D88  0E00               	movlw	0
   669  001D8A  6EDF               	movwf	indf2,c
   670                           
   671                           ;pwm.c: 78: Motors[n].motorType = (unsigned char)0;
   672  001D8C  C023  F019         	movff	InitPWM@n,___wmul@multiplier
   673  001D90  C024  F01A         	movff	InitPWM@n+1,___wmul@multiplier+1
   674  001D94  0E00               	movlw	0
   675  001D96  6E1C               	movwf	___wmul@multiplicand+1,c
   676  001D98  0E0C               	movlw	12
   677  001D9A  6E1B               	movwf	___wmul@multiplicand,c
   678  001D9C  EC5E  F010         	call	___wmul	;wreg free
   679  001DA0  0E01               	movlw	1
   680  001DA2  2619               	addwf	?___wmul,f,c
   681  001DA4  0E00               	movlw	0
   682  001DA6  221A               	addwfc	?___wmul+1,f,c
   683  001DA8  0E60               	movlw	low _Motors
   684  001DAA  2419               	addwf	?___wmul,w,c
   685  001DAC  6ED9               	movwf	fsr2l,c
   686  001DAE  0E00               	movlw	high _Motors
   687  001DB0  201A               	addwfc	?___wmul+1,w,c
   688  001DB2  6EDA               	movwf	fsr2h,c
   689  001DB4  0E00               	movlw	0
   690  001DB6  6EDF               	movwf	indf2,c
   691  001DB8  4A23               	infsnz	InitPWM@n,f,c
   692  001DBA  2A24               	incf	InitPWM@n+1,f,c
   693  001DBC  5024               	movf	InitPWM@n+1,w,c
   694  001DBE  E101               	bnz	l1603
   695  001DC0  D759               	goto	L1
   696  001DC2                     l1603:
   697                           
   698                           ;pwm.c: 79: }
   699                           ;pwm.c: 84: Motors[0].PWMPin = 0;
   700  001DC2  0E00               	movlw	0
   701  001DC4  0100               	movlb	0	; () banked
   702  001DC6  6F62               	movwf	(_Motors+2)& (0+255),b
   703                           
   704                           ;pwm.c: 85: Motors[0].dirPin = 1;
   705  001DC8  0E01               	movlw	1
   706  001DCA  0100               	movlb	0	; () banked
   707  001DCC  6F63               	movwf	(_Motors+3)& (0+255),b
   708                           
   709                           ;pwm.c: 86: Motors[0].cdirPin = 2;
   710  001DCE  0E02               	movlw	2
   711  001DD0  0100               	movlb	0	; () banked
   712  001DD2  6F64               	movwf	(_Motors+4)& (0+255),b
   713                           
   714                           ;pwm.c: 88: Motors[1].PWMPin = 5;
   715  001DD4  0E05               	movlw	5
   716  001DD6  0100               	movlb	0	; () banked
   717  001DD8  6F6E               	movwf	(_Motors+14)& (0+255),b
   718                           
   719                           ;pwm.c: 89: Motors[1].dirPin = 4;
   720  001DDA  0E04               	movlw	4
   721  001DDC  0100               	movlb	0	; () banked
   722  001DDE  6F6F               	movwf	(_Motors+15)& (0+255),b
   723                           
   724                           ;pwm.c: 90: Motors[1].cdirPin = 3;
   725  001DE0  0E03               	movlw	3
   726  001DE2  0100               	movlb	0	; () banked
   727  001DE4  6F70               	movwf	(_Motors+16)& (0+255),b
   728                           
   729                           ;pwm.c: 92: Motors[2].PWMPin = 6;
   730  001DE6  0E06               	movlw	6
   731  001DE8  0100               	movlb	0	; () banked
   732  001DEA  6F7A               	movwf	(_Motors+26)& (0+255),b
   733                           
   734                           ;pwm.c: 93: Motors[2].dirPin = 7;
   735  001DEC  0E07               	movlw	7
   736  001DEE  0100               	movlb	0	; () banked
   737  001DF0  6F7B               	movwf	(_Motors+27)& (0+255),b
   738                           
   739                           ;pwm.c: 94: Motors[2].cdirPin = 9;
   740  001DF2  0E09               	movlw	9
   741  001DF4  0100               	movlb	0	; () banked
   742  001DF6  6F7C               	movwf	(_Motors+28)& (0+255),b
   743                           
   744                           ;pwm.c: 96: Motors[3].PWMPin = 11;
   745  001DF8  0E0B               	movlw	11
   746  001DFA  0100               	movlb	0	; () banked
   747  001DFC  6F86               	movwf	(_Motors+38)& (0+255),b
   748                           
   749                           ;pwm.c: 97: Motors[3].dirPin = 10;
   750  001DFE  0E0A               	movlw	10
   751  001E00  0100               	movlb	0	; () banked
   752  001E02  6F87               	movwf	(_Motors+39)& (0+255),b
   753                           
   754                           ;pwm.c: 98: Motors[3].cdirPin = 8;
   755  001E04  0E08               	movlw	8
   756  001E06  0100               	movlb	0	; () banked
   757  001E08  6F88               	movwf	(_Motors+40)& (0+255),b
   758                           
   759                           ;pwm.c: 101: unsigned int i;
   760                           ;pwm.c: 102: for (i = 0; i < 4; i++) {
   761  001E0A  0E00               	movlw	0
   762  001E0C  6E22               	movwf	InitPWM@i+1,c
   763  001E0E  0E00               	movlw	0
   764  001E10  6E21               	movwf	InitPWM@i,c
   765  001E12                     l1605:
   766                           
   767                           ; BSR set to: 0
   768  001E12  5022               	movf	InitPWM@i+1,w,c
   769  001E14  E139               	bnz	l260
   770  001E16  0E04               	movlw	4
   771  001E18  5C21               	subwf	InitPWM@i,w,c
   772  001E1A  B0D8               	btfsc	status,0,c
   773  001E1C  0012               	return	
   774                           
   775                           ;pwm.c: 103: SetPin(Motors[i].dirPin,1);
   776                           
   777                           ; BSR set to: 0
   778                           
   779                           ; BSR set to: 0
   780  001E1E  0E01               	movlw	1
   781  001E20  6E1F               	movwf	SetPin@value,c
   782  001E22  C021  F019         	movff	InitPWM@i,___wmul@multiplier
   783  001E26  C022  F01A         	movff	InitPWM@i+1,___wmul@multiplier+1
   784  001E2A  0E00               	movlw	0
   785  001E2C  6E1C               	movwf	___wmul@multiplicand+1,c
   786  001E2E  0E0C               	movlw	12
   787  001E30  6E1B               	movwf	___wmul@multiplicand,c
   788  001E32  EC5E  F010         	call	___wmul	;wreg free
   789  001E36  0E03               	movlw	3
   790  001E38  2619               	addwf	?___wmul,f,c
   791  001E3A  0E00               	movlw	0
   792  001E3C  221A               	addwfc	?___wmul+1,f,c
   793  001E3E  0E60               	movlw	low _Motors
   794  001E40  2419               	addwf	?___wmul,w,c
   795  001E42  6ED9               	movwf	fsr2l,c
   796  001E44  0E00               	movlw	high _Motors
   797  001E46  201A               	addwfc	?___wmul+1,w,c
   798  001E48  6EDA               	movwf	fsr2h,c
   799  001E4A  50DF               	movf	indf2,w,c
   800  001E4C  ECCC  F00F         	call	_SetPin
   801                           
   802                           ;pwm.c: 104: SetPin(Motors[i].cdirPin,0);
   803  001E50  0E00               	movlw	0
   804  001E52  6E1F               	movwf	SetPin@value,c
   805  001E54  C021  F019         	movff	InitPWM@i,___wmul@multiplier
   806  001E58  C022  F01A         	movff	InitPWM@i+1,___wmul@multiplier+1
   807  001E5C  0E00               	movlw	0
   808  001E5E  6E1C               	movwf	___wmul@multiplicand+1,c
   809  001E60  0E0C               	movlw	12
   810  001E62  6E1B               	movwf	___wmul@multiplicand,c
   811  001E64  EC5E  F010         	call	___wmul	;wreg free
   812  001E68  0E04               	movlw	4
   813  001E6A  2619               	addwf	?___wmul,f,c
   814  001E6C  0E00               	movlw	0
   815  001E6E  221A               	addwfc	?___wmul+1,f,c
   816  001E70  0E60               	movlw	low _Motors
   817  001E72  2419               	addwf	?___wmul,w,c
   818  001E74  6ED9               	movwf	fsr2l,c
   819  001E76  0E00               	movlw	high _Motors
   820  001E78  201A               	addwfc	?___wmul+1,w,c
   821  001E7A  6EDA               	movwf	fsr2h,c
   822  001E7C  50DF               	movf	indf2,w,c
   823  001E7E  ECCC  F00F         	call	_SetPin
   824  001E82  4A21               	infsnz	InitPWM@i,f,c
   825  001E84  2A22               	incf	InitPWM@i+1,f,c
   826  001E86  D7C5               	goto	l1605
   827  001E88                     l260:
   828  001E88  0012               	return		;funcret
   829  001E8A                     __end_of_InitPWM:
   830                           	opt stack 0
   831                           tblptru	equ	0xFF8
   832                           tblptrh	equ	0xFF7
   833                           tblptrl	equ	0xFF6
   834                           tablat	equ	0xFF5
   835                           postinc0	equ	0xFEE
   836                           wreg	equ	0xFE8
   837                           indf2	equ	0xFDF
   838                           fsr2h	equ	0xFDA
   839                           fsr2l	equ	0xFD9
   840                           status	equ	0xFD8
   841                           
   842 ;; *************** function _InitI2C *****************
   843 ;; Defined at:
   844 ;;		line 7 in file "i2c.c"
   845 ;; Parameters:    Size  Location     Type
   846 ;;		None
   847 ;; Auto vars:     Size  Location     Type
   848 ;;		None
   849 ;; Return value:  Size  Location     Type
   850 ;;                  1    wreg      void 
   851 ;; Registers used:
   852 ;;		wreg, status,2
   853 ;; Tracked objects:
   854 ;;		On entry : 0/0
   855 ;;		On exit  : 0/0
   856 ;;		Unchanged: 0/0
   857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   858 ;;      Params:         0       0       0       0
   859 ;;      Locals:         0       0       0       0
   860 ;;      Temps:          0       0       0       0
   861 ;;      Totals:         0       0       0       0
   862 ;;Total ram usage:        0 bytes
   863 ;; Hardware stack levels used:    1
   864 ;; Hardware stack levels required when called:    2
   865 ;; This function calls:
   866 ;;		Nothing
   867 ;; This function is called by:
   868 ;;		_main
   869 ;; This function uses a non-reentrant model
   870 ;;
   871                           
   872                           	psect	text3
   873  002108                     __ptext3:
   874                           	opt stack 0
   875  002108                     _InitI2C:
   876                           	opt stack 28
   877                           
   878                           ;i2c.c: 9: INTCON2bits.NOT_RABPU = 0;
   879                           
   880                           ;incstack = 0
   881  002108  9EF1               	bcf	intcon2,7,c	;volatile
   882                           
   883                           ;i2c.c: 11: WPUBbits.WPUB4 = 1;
   884  00210A  8878               	bsf	3960,4,c	;volatile
   885                           
   886                           ;i2c.c: 12: WPUBbits.WPUB6 = 1;
   887  00210C  8C78               	bsf	3960,6,c	;volatile
   888                           
   889                           ;i2c.c: 15: SSPSTATbits.SMP = 1;
   890  00210E  8EC7               	bsf	4039,7,c	;volatile
   891                           
   892                           ;i2c.c: 18: SSPCON1bits.SSPM = 0b0110;
   893  002110  50C6               	movf	4038,w,c	;volatile
   894  002112  0BF0               	andlw	-16
   895  002114  0906               	iorlw	6
   896  002116  6EC6               	movwf	4038,c	;volatile
   897                           
   898                           ;i2c.c: 20: SSPCON2bits.SEN = 1;
   899  002118  80C5               	bsf	4037,0,c	;volatile
   900                           
   901                           ;i2c.c: 29: SSPADD = 0x23<<1;
   902  00211A  0E46               	movlw	70
   903  00211C  6EC8               	movwf	4040,c	;volatile
   904                           
   905                           ;i2c.c: 32: PIR1bits.SSPIF = 0;
   906  00211E  969E               	bcf	3998,3,c	;volatile
   907                           
   908                           ;i2c.c: 34: PIE1bits.SSPIE = 1;
   909  002120  869D               	bsf	3997,3,c	;volatile
   910                           
   911                           ;i2c.c: 37: INTCONbits.GIE = 1;
   912  002122  8EF2               	bsf	intcon,7,c	;volatile
   913                           
   914                           ;i2c.c: 39: INTCONbits.PEIE = 1;
   915  002124  8CF2               	bsf	intcon,6,c	;volatile
   916                           
   917                           ;i2c.c: 42: SSPCON1bits.SSPEN = 1;
   918  002126  8AC6               	bsf	4038,5,c	;volatile
   919  002128  0012               	return		;funcret
   920  00212A                     __end_of_InitI2C:
   921                           	opt stack 0
   922                           tblptru	equ	0xFF8
   923                           tblptrh	equ	0xFF7
   924                           tblptrl	equ	0xFF6
   925                           tablat	equ	0xFF5
   926                           intcon	equ	0xFF2
   927                           intcon2	equ	0xFF1
   928                           postinc0	equ	0xFEE
   929                           wreg	equ	0xFE8
   930                           indf2	equ	0xFDF
   931                           fsr2h	equ	0xFDA
   932                           fsr2l	equ	0xFD9
   933                           status	equ	0xFD8
   934                           
   935 ;; *************** function _CheckPWMOutput *****************
   936 ;; Defined at:
   937 ;;		line 277 in file "pwm.c"
   938 ;; Parameters:    Size  Location     Type
   939 ;;		None
   940 ;; Auto vars:     Size  Location     Type
   941 ;;  i               2   54[COMRAM] unsigned int 
   942 ;; Return value:  Size  Location     Type
   943 ;;                  1    wreg      void 
   944 ;; Registers used:
   945 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   946 ;; Tracked objects:
   947 ;;		On entry : 0/0
   948 ;;		On exit  : 0/0
   949 ;;		Unchanged: 0/0
   950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   951 ;;      Params:         0       0       0       0
   952 ;;      Locals:         2       0       0       0
   953 ;;      Temps:          2       0       0       0
   954 ;;      Totals:         4       0       0       0
   955 ;;Total ram usage:        4 bytes
   956 ;; Hardware stack levels used:    1
   957 ;; Hardware stack levels required when called:    6
   958 ;; This function calls:
   959 ;;		_AcceleratePWM
   960 ;;		_SetPin
   961 ;;		___wmul
   962 ;; This function is called by:
   963 ;;		_main
   964 ;; This function uses a non-reentrant model
   965 ;;
   966                           
   967                           	psect	text4
   968  000864                     __ptext4:
   969                           	opt stack 0
   970  000864                     _CheckPWMOutput:
   971                           	opt stack 24
   972                           
   973                           ;pwm.c: 278: unsigned int i;
   974                           ;pwm.c: 279: for (i = 0; i < 4; i++) {
   975                           
   976                           ;incstack = 0
   977  000864  0E00               	movlw	0
   978  000866  6E38               	movwf	CheckPWMOutput@i+1,c
   979  000868  0E00               	movlw	0
   980  00086A  6E37               	movwf	CheckPWMOutput@i,c
   981  00086C  5038               	movf	CheckPWMOutput@i+1,w,c
   982  00086E  E105               	bnz	u1810
   983  000870  0E04               	movlw	4
   984  000872  5C37               	subwf	CheckPWMOutput@i,w,c
   985  000874  B0D8               	btfsc	status,0,c
   986  000876  0012               	return	
   987  000878  D001               	goto	l1621
   988  00087A                     u1810:
   989  00087A  0012               	return	
   990  00087C                     l1621:
   991                           
   992                           ;pwm.c: 280: if (PWMEnable && Motors[i].enabled) {
   993  00087C  5044               	movf	_PWMEnable,w,c
   994  00087E  B4D8               	btfsc	status,2,c
   995  000880  D2A5               	goto	l1671
   996  000882  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
   997  000886  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
   998  00088A  0E00               	movlw	0
   999  00088C  6E1C               	movwf	___wmul@multiplicand+1,c
  1000  00088E  0E0C               	movlw	12
  1001  000890  6E1B               	movwf	___wmul@multiplicand,c
  1002  000892  EC5E  F010         	call	___wmul	;wreg free
  1003  000896  0E60               	movlw	low _Motors
  1004  000898  2419               	addwf	?___wmul,w,c
  1005  00089A  6ED9               	movwf	fsr2l,c
  1006  00089C  0E00               	movlw	high _Motors
  1007  00089E  201A               	addwfc	?___wmul+1,w,c
  1008  0008A0  6EDA               	movwf	fsr2h,c
  1009  0008A2  0100               	movlb	0	; () banked
  1010  0008A4  A2DF               	btfss	indf2,1,c
  1011  0008A6  D292               	goto	l1671
  1012                           
  1013                           ; BSR set to: 0
  1014                           ;pwm.c: 281: if (Motors[i].motorType) {
  1015  0008A8  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1016  0008AC  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1017  0008B0  0E00               	movlw	0
  1018  0008B2  6E1C               	movwf	___wmul@multiplicand+1,c
  1019  0008B4  0E0C               	movlw	12
  1020  0008B6  6E1B               	movwf	___wmul@multiplicand,c
  1021  0008B8  EC5E  F010         	call	___wmul	;wreg free
  1022  0008BC  0E01               	movlw	1
  1023  0008BE  2619               	addwf	?___wmul,f,c
  1024  0008C0  0E00               	movlw	0
  1025  0008C2  221A               	addwfc	?___wmul+1,f,c
  1026  0008C4  0E60               	movlw	low _Motors
  1027  0008C6  2419               	addwf	?___wmul,w,c
  1028  0008C8  6ED9               	movwf	fsr2l,c
  1029  0008CA  0E00               	movlw	high _Motors
  1030  0008CC  201A               	addwfc	?___wmul+1,w,c
  1031  0008CE  6EDA               	movwf	fsr2h,c
  1032  0008D0  50DF               	movf	indf2,w,c
  1033  0008D2  B4D8               	btfsc	status,2,c
  1034  0008D4  D1C4               	goto	l1659
  1035                           
  1036                           ;pwm.c: 282: if (TMR0 < Motors[i].duty && Motors[i].state == 0 && Motors[i].servoCount <
      +                           19) {
  1037  0008D6  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1038  0008DA  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1039  0008DE  0E00               	movlw	0
  1040  0008E0  6E1C               	movwf	___wmul@multiplicand+1,c
  1041  0008E2  0E0C               	movlw	12
  1042  0008E4  6E1B               	movwf	___wmul@multiplicand,c
  1043  0008E6  EC5E  F010         	call	___wmul	;wreg free
  1044  0008EA  0E05               	movlw	5
  1045  0008EC  2619               	addwf	?___wmul,f,c
  1046  0008EE  0E00               	movlw	0
  1047  0008F0  221A               	addwfc	?___wmul+1,f,c
  1048  0008F2  0E60               	movlw	low _Motors
  1049  0008F4  2419               	addwf	?___wmul,w,c
  1050  0008F6  6ED9               	movwf	fsr2l,c
  1051  0008F8  0E00               	movlw	high _Motors
  1052  0008FA  201A               	addwfc	?___wmul+1,w,c
  1053  0008FC  6EDA               	movwf	fsr2h,c
  1054  0008FE  50DF               	movf	indf2,w,c
  1055  000900  6E35               	movwf	??_CheckPWMOutput& (0+255),c
  1056  000902  5035               	movf	??_CheckPWMOutput,w,c
  1057  000904  5CD6               	subwf	4054,w,c	;volatile
  1058  000906  0E00               	movlw	0
  1059  000908  58D7               	subwfb	4055,w,c	;volatile
  1060  00090A  B0D8               	btfsc	status,0,c
  1061  00090C  D052               	goto	l1635
  1062  00090E  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1063  000912  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1064  000916  0E00               	movlw	0
  1065  000918  6E1C               	movwf	___wmul@multiplicand+1,c
  1066  00091A  0E0C               	movlw	12
  1067  00091C  6E1B               	movwf	___wmul@multiplicand,c
  1068  00091E  EC5E  F010         	call	___wmul	;wreg free
  1069  000922  0E60               	movlw	low _Motors
  1070  000924  2419               	addwf	?___wmul,w,c
  1071  000926  6ED9               	movwf	fsr2l,c
  1072  000928  0E00               	movlw	high _Motors
  1073  00092A  201A               	addwfc	?___wmul+1,w,c
  1074  00092C  6EDA               	movwf	fsr2h,c
  1075  00092E  0100               	movlb	0	; () banked
  1076  000930  B0DF               	btfsc	indf2,0,c
  1077  000932  D03F               	goto	l1635
  1078                           
  1079                           ; BSR set to: 0
  1080  000934  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1081  000938  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1082  00093C  0E00               	movlw	0
  1083  00093E  6E1C               	movwf	___wmul@multiplicand+1,c
  1084  000940  0E0C               	movlw	12
  1085  000942  6E1B               	movwf	___wmul@multiplicand,c
  1086  000944  EC5E  F010         	call	___wmul	;wreg free
  1087  000948  0E07               	movlw	7
  1088  00094A  2619               	addwf	?___wmul,f,c
  1089  00094C  0E00               	movlw	0
  1090  00094E  221A               	addwfc	?___wmul+1,f,c
  1091  000950  0E60               	movlw	low _Motors
  1092  000952  2419               	addwf	?___wmul,w,c
  1093  000954  6ED9               	movwf	fsr2l,c
  1094  000956  0E00               	movlw	high _Motors
  1095  000958  201A               	addwfc	?___wmul+1,w,c
  1096  00095A  6EDA               	movwf	fsr2h,c
  1097  00095C  0E13               	movlw	19
  1098  00095E  60DF               	cpfslt	indf2,c
  1099  000960  D028               	goto	l1635
  1100                           
  1101                           ;pwm.c: 283: Motors[i].servoCount++;
  1102  000962  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1103  000966  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1104  00096A  0E00               	movlw	0
  1105  00096C  6E1C               	movwf	___wmul@multiplicand+1,c
  1106  00096E  0E0C               	movlw	12
  1107  000970  6E1B               	movwf	___wmul@multiplicand,c
  1108  000972  EC5E  F010         	call	___wmul	;wreg free
  1109  000976  0E07               	movlw	7
  1110  000978  2619               	addwf	?___wmul,f,c
  1111  00097A  0E00               	movlw	0
  1112  00097C  221A               	addwfc	?___wmul+1,f,c
  1113  00097E  0E60               	movlw	low _Motors
  1114  000980  2419               	addwf	?___wmul,w,c
  1115  000982  6ED9               	movwf	fsr2l,c
  1116  000984  0E00               	movlw	high _Motors
  1117  000986  201A               	addwfc	?___wmul+1,w,c
  1118  000988  6EDA               	movwf	fsr2h,c
  1119  00098A  2ADF               	incf	indf2,f,c
  1120                           
  1121                           ;pwm.c: 284: Motors[i].state = 1;
  1122  00098C  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1123  000990  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1124  000994  0E00               	movlw	0
  1125  000996  6E1C               	movwf	___wmul@multiplicand+1,c
  1126  000998  0E0C               	movlw	12
  1127  00099A  6E1B               	movwf	___wmul@multiplicand,c
  1128  00099C  EC5E  F010         	call	___wmul	;wreg free
  1129  0009A0  0E60               	movlw	low _Motors
  1130  0009A2  2419               	addwf	?___wmul,w,c
  1131  0009A4  6ED9               	movwf	fsr2l,c
  1132  0009A6  0E00               	movlw	high _Motors
  1133  0009A8  201A               	addwfc	?___wmul+1,w,c
  1134  0009AA  6EDA               	movwf	fsr2h,c
  1135  0009AC  0100               	movlb	0	; () banked
  1136  0009AE  80DF               	bsf	indf2,0,c
  1137                           
  1138                           ;pwm.c: 285: } else if (TMR0 < Motors[i].duty && Motors[i].state == 0 && Motors[i].servo
      +                          Count == 20) {
  1139  0009B0  D24B               	goto	l1675
  1140  0009B2                     l1635:
  1141  0009B2  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1142  0009B6  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1143  0009BA  0E00               	movlw	0
  1144  0009BC  6E1C               	movwf	___wmul@multiplicand+1,c
  1145  0009BE  0E0C               	movlw	12
  1146  0009C0  6E1B               	movwf	___wmul@multiplicand,c
  1147  0009C2  EC5E  F010         	call	___wmul	;wreg free
  1148  0009C6  0E05               	movlw	5
  1149  0009C8  2619               	addwf	?___wmul,f,c
  1150  0009CA  0E00               	movlw	0
  1151  0009CC  221A               	addwfc	?___wmul+1,f,c
  1152  0009CE  0E60               	movlw	low _Motors
  1153  0009D0  2419               	addwf	?___wmul,w,c
  1154  0009D2  6ED9               	movwf	fsr2l,c
  1155  0009D4  0E00               	movlw	high _Motors
  1156  0009D6  201A               	addwfc	?___wmul+1,w,c
  1157  0009D8  6EDA               	movwf	fsr2h,c
  1158  0009DA  50DF               	movf	indf2,w,c
  1159  0009DC  6E35               	movwf	??_CheckPWMOutput& (0+255),c
  1160  0009DE  5035               	movf	??_CheckPWMOutput,w,c
  1161  0009E0  5CD6               	subwf	4054,w,c	;volatile
  1162  0009E2  0E00               	movlw	0
  1163  0009E4  58D7               	subwfb	4055,w,c	;volatile
  1164  0009E6  B0D8               	btfsc	status,0,c
  1165  0009E8  D057               	goto	l1643
  1166  0009EA  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1167  0009EE  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1168  0009F2  0E00               	movlw	0
  1169  0009F4  6E1C               	movwf	___wmul@multiplicand+1,c
  1170  0009F6  0E0C               	movlw	12
  1171  0009F8  6E1B               	movwf	___wmul@multiplicand,c
  1172  0009FA  EC5E  F010         	call	___wmul	;wreg free
  1173  0009FE  0E60               	movlw	low _Motors
  1174  000A00  2419               	addwf	?___wmul,w,c
  1175  000A02  6ED9               	movwf	fsr2l,c
  1176  000A04  0E00               	movlw	high _Motors
  1177  000A06  201A               	addwfc	?___wmul+1,w,c
  1178  000A08  6EDA               	movwf	fsr2h,c
  1179  000A0A  0100               	movlb	0	; () banked
  1180  000A0C  B0DF               	btfsc	indf2,0,c
  1181  000A0E  D044               	goto	l1643
  1182                           
  1183                           ; BSR set to: 0
  1184  000A10  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1185  000A14  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1186  000A18  0E00               	movlw	0
  1187  000A1A  6E1C               	movwf	___wmul@multiplicand+1,c
  1188  000A1C  0E0C               	movlw	12
  1189  000A1E  6E1B               	movwf	___wmul@multiplicand,c
  1190  000A20  EC5E  F010         	call	___wmul	;wreg free
  1191  000A24  0E07               	movlw	7
  1192  000A26  2619               	addwf	?___wmul,f,c
  1193  000A28  0E00               	movlw	0
  1194  000A2A  221A               	addwfc	?___wmul+1,f,c
  1195  000A2C  0E60               	movlw	low _Motors
  1196  000A2E  2419               	addwf	?___wmul,w,c
  1197  000A30  6ED9               	movwf	fsr2l,c
  1198  000A32  0E00               	movlw	high _Motors
  1199  000A34  201A               	addwfc	?___wmul+1,w,c
  1200  000A36  6EDA               	movwf	fsr2h,c
  1201  000A38  0E14               	movlw	20
  1202  000A3A  18DE               	xorwf	postinc2,w,c
  1203  000A3C  A4D8               	btfss	status,2,c
  1204  000A3E  D02C               	goto	l1643
  1205                           
  1206                           ;pwm.c: 286: Motors[i].state = 1;
  1207  000A40  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1208  000A44  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1209  000A48  0E00               	movlw	0
  1210  000A4A  6E1C               	movwf	___wmul@multiplicand+1,c
  1211  000A4C  0E0C               	movlw	12
  1212  000A4E  6E1B               	movwf	___wmul@multiplicand,c
  1213  000A50  EC5E  F010         	call	___wmul	;wreg free
  1214  000A54  0E60               	movlw	low _Motors
  1215  000A56  2419               	addwf	?___wmul,w,c
  1216  000A58  6ED9               	movwf	fsr2l,c
  1217  000A5A  0E00               	movlw	high _Motors
  1218  000A5C  201A               	addwfc	?___wmul+1,w,c
  1219  000A5E  6EDA               	movwf	fsr2h,c
  1220  000A60  0100               	movlb	0	; () banked
  1221  000A62  80DF               	bsf	indf2,0,c
  1222                           
  1223                           ;pwm.c: 287: SetPin(Motors[i].PWMPin,1);
  1224  000A64  0E01               	movlw	1
  1225  000A66  6E1F               	movwf	SetPin@value,c
  1226  000A68  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1227  000A6C  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1228  000A70  0E00               	movlw	0
  1229  000A72  6E1C               	movwf	___wmul@multiplicand+1,c
  1230  000A74  0E0C               	movlw	12
  1231  000A76  6E1B               	movwf	___wmul@multiplicand,c
  1232  000A78  EC5E  F010         	call	___wmul	;wreg free
  1233  000A7C  0E02               	movlw	2
  1234  000A7E  2619               	addwf	?___wmul,f,c
  1235  000A80  0E00               	movlw	0
  1236  000A82  221A               	addwfc	?___wmul+1,f,c
  1237  000A84  0E60               	movlw	low _Motors
  1238  000A86  2419               	addwf	?___wmul,w,c
  1239  000A88  6ED9               	movwf	fsr2l,c
  1240  000A8A  0E00               	movlw	high _Motors
  1241  000A8C  201A               	addwfc	?___wmul+1,w,c
  1242  000A8E  6EDA               	movwf	fsr2h,c
  1243  000A90  50DF               	movf	indf2,w,c
  1244  000A92  ECCC  F00F         	call	_SetPin
  1245                           
  1246                           ;pwm.c: 288: } else if (TMR0 >= Motors[i].duty && Motors[i].state == 1 && Motors[i].serv
      +                          oCount < 19) {
  1247  000A96  D1D8               	goto	l1675
  1248  000A98                     l1643:
  1249  000A98  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1250  000A9C  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1251  000AA0  0E00               	movlw	0
  1252  000AA2  6E1C               	movwf	___wmul@multiplicand+1,c
  1253  000AA4  0E0C               	movlw	12
  1254  000AA6  6E1B               	movwf	___wmul@multiplicand,c
  1255  000AA8  EC5E  F010         	call	___wmul	;wreg free
  1256  000AAC  0E05               	movlw	5
  1257  000AAE  2619               	addwf	?___wmul,f,c
  1258  000AB0  0E00               	movlw	0
  1259  000AB2  221A               	addwfc	?___wmul+1,f,c
  1260  000AB4  0E60               	movlw	low _Motors
  1261  000AB6  2419               	addwf	?___wmul,w,c
  1262  000AB8  6ED9               	movwf	fsr2l,c
  1263  000ABA  0E00               	movlw	high _Motors
  1264  000ABC  201A               	addwfc	?___wmul+1,w,c
  1265  000ABE  6EDA               	movwf	fsr2h,c
  1266  000AC0  50DF               	movf	indf2,w,c
  1267  000AC2  6E35               	movwf	??_CheckPWMOutput& (0+255),c
  1268  000AC4  6A36               	clrf	(??_CheckPWMOutput+1)& (0+255),c
  1269  000AC6  5035               	movf	??_CheckPWMOutput,w,c
  1270  000AC8  5CD6               	subwf	4054,w,c	;volatile
  1271  000ACA  5036               	movf	??_CheckPWMOutput+1,w,c
  1272  000ACC  58D7               	subwfb	4055,w,c	;volatile
  1273  000ACE  A0D8               	btfss	status,0,c
  1274  000AD0  D03D               	goto	l1651
  1275  000AD2  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1276  000AD6  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1277  000ADA  0E00               	movlw	0
  1278  000ADC  6E1C               	movwf	___wmul@multiplicand+1,c
  1279  000ADE  0E0C               	movlw	12
  1280  000AE0  6E1B               	movwf	___wmul@multiplicand,c
  1281  000AE2  EC5E  F010         	call	___wmul	;wreg free
  1282  000AE6  0E60               	movlw	low _Motors
  1283  000AE8  2419               	addwf	?___wmul,w,c
  1284  000AEA  6ED9               	movwf	fsr2l,c
  1285  000AEC  0E00               	movlw	high _Motors
  1286  000AEE  201A               	addwfc	?___wmul+1,w,c
  1287  000AF0  6EDA               	movwf	fsr2h,c
  1288  000AF2  0100               	movlb	0	; () banked
  1289  000AF4  A0DF               	btfss	indf2,0,c
  1290  000AF6  D02A               	goto	l1651
  1291                           
  1292                           ; BSR set to: 0
  1293  000AF8  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1294  000AFC  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1295  000B00  0E00               	movlw	0
  1296  000B02  6E1C               	movwf	___wmul@multiplicand+1,c
  1297  000B04  0E0C               	movlw	12
  1298  000B06  6E1B               	movwf	___wmul@multiplicand,c
  1299  000B08  EC5E  F010         	call	___wmul	;wreg free
  1300  000B0C  0E07               	movlw	7
  1301  000B0E  2619               	addwf	?___wmul,f,c
  1302  000B10  0E00               	movlw	0
  1303  000B12  221A               	addwfc	?___wmul+1,f,c
  1304  000B14  0E60               	movlw	low _Motors
  1305  000B16  2419               	addwf	?___wmul,w,c
  1306  000B18  6ED9               	movwf	fsr2l,c
  1307  000B1A  0E00               	movlw	high _Motors
  1308  000B1C  201A               	addwfc	?___wmul+1,w,c
  1309  000B1E  6EDA               	movwf	fsr2h,c
  1310  000B20  0E13               	movlw	19
  1311  000B22  60DF               	cpfslt	indf2,c
  1312  000B24  D013               	goto	l1651
  1313                           
  1314                           ;pwm.c: 289: Motors[i].state = 0;
  1315  000B26  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1316  000B2A  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1317  000B2E  0E00               	movlw	0
  1318  000B30  6E1C               	movwf	___wmul@multiplicand+1,c
  1319  000B32  0E0C               	movlw	12
  1320  000B34  6E1B               	movwf	___wmul@multiplicand,c
  1321  000B36  EC5E  F010         	call	___wmul	;wreg free
  1322  000B3A  0E60               	movlw	low _Motors
  1323  000B3C  2419               	addwf	?___wmul,w,c
  1324  000B3E  6ED9               	movwf	fsr2l,c
  1325  000B40  0E00               	movlw	high _Motors
  1326  000B42  201A               	addwfc	?___wmul+1,w,c
  1327  000B44  6EDA               	movwf	fsr2h,c
  1328  000B46  0100               	movlb	0	; () banked
  1329  000B48  90DF               	bcf	indf2,0,c
  1330                           
  1331                           ;pwm.c: 290: } else if (TMR0 < Motors[i].duty && Motors[i].state == 0 && Motors[i].servo
      +                          Count == 20) {
  1332  000B4A  D17E               	goto	l1675
  1333  000B4C                     l1651:
  1334  000B4C  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1335  000B50  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1336  000B54  0E00               	movlw	0
  1337  000B56  6E1C               	movwf	___wmul@multiplicand+1,c
  1338  000B58  0E0C               	movlw	12
  1339  000B5A  6E1B               	movwf	___wmul@multiplicand,c
  1340  000B5C  EC5E  F010         	call	___wmul	;wreg free
  1341  000B60  0E05               	movlw	5
  1342  000B62  2619               	addwf	?___wmul,f,c
  1343  000B64  0E00               	movlw	0
  1344  000B66  221A               	addwfc	?___wmul+1,f,c
  1345  000B68  0E60               	movlw	low _Motors
  1346  000B6A  2419               	addwf	?___wmul,w,c
  1347  000B6C  6ED9               	movwf	fsr2l,c
  1348  000B6E  0E00               	movlw	high _Motors
  1349  000B70  201A               	addwfc	?___wmul+1,w,c
  1350  000B72  6EDA               	movwf	fsr2h,c
  1351  000B74  50DF               	movf	indf2,w,c
  1352  000B76  6E35               	movwf	??_CheckPWMOutput& (0+255),c
  1353  000B78  5035               	movf	??_CheckPWMOutput,w,c
  1354  000B7A  5CD6               	subwf	4054,w,c	;volatile
  1355  000B7C  0E00               	movlw	0
  1356  000B7E  58D7               	subwfb	4055,w,c	;volatile
  1357  000B80  B0D8               	btfsc	status,0,c
  1358  000B82  D162               	goto	l1675
  1359  000B84  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1360  000B88  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1361  000B8C  0E00               	movlw	0
  1362  000B8E  6E1C               	movwf	___wmul@multiplicand+1,c
  1363  000B90  0E0C               	movlw	12
  1364  000B92  6E1B               	movwf	___wmul@multiplicand,c
  1365  000B94  EC5E  F010         	call	___wmul	;wreg free
  1366  000B98  0E60               	movlw	low _Motors
  1367  000B9A  2419               	addwf	?___wmul,w,c
  1368  000B9C  6ED9               	movwf	fsr2l,c
  1369  000B9E  0E00               	movlw	high _Motors
  1370  000BA0  201A               	addwfc	?___wmul+1,w,c
  1371  000BA2  6EDA               	movwf	fsr2h,c
  1372  000BA4  0100               	movlb	0	; () banked
  1373  000BA6  B0DF               	btfsc	indf2,0,c
  1374  000BA8  D14F               	goto	l1675
  1375                           
  1376                           ; BSR set to: 0
  1377  000BAA  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1378  000BAE  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1379  000BB2  0E00               	movlw	0
  1380  000BB4  6E1C               	movwf	___wmul@multiplicand+1,c
  1381  000BB6  0E0C               	movlw	12
  1382  000BB8  6E1B               	movwf	___wmul@multiplicand,c
  1383  000BBA  EC5E  F010         	call	___wmul	;wreg free
  1384  000BBE  0E07               	movlw	7
  1385  000BC0  2619               	addwf	?___wmul,f,c
  1386  000BC2  0E00               	movlw	0
  1387  000BC4  221A               	addwfc	?___wmul+1,f,c
  1388  000BC6  0E60               	movlw	low _Motors
  1389  000BC8  2419               	addwf	?___wmul,w,c
  1390  000BCA  6ED9               	movwf	fsr2l,c
  1391  000BCC  0E00               	movlw	high _Motors
  1392  000BCE  201A               	addwfc	?___wmul+1,w,c
  1393  000BD0  6EDA               	movwf	fsr2h,c
  1394  000BD2  0E14               	movlw	20
  1395  000BD4  18DE               	xorwf	postinc2,w,c
  1396  000BD6  A4D8               	btfss	status,2,c
  1397  000BD8  D137               	goto	l1675
  1398                           
  1399                           ;pwm.c: 291: Motors[i].state = 0;
  1400  000BDA  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1401  000BDE  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1402  000BE2  0E00               	movlw	0
  1403  000BE4  6E1C               	movwf	___wmul@multiplicand+1,c
  1404  000BE6  0E0C               	movlw	12
  1405  000BE8  6E1B               	movwf	___wmul@multiplicand,c
  1406  000BEA  EC5E  F010         	call	___wmul	;wreg free
  1407  000BEE  0E60               	movlw	low _Motors
  1408  000BF0  2419               	addwf	?___wmul,w,c
  1409  000BF2  6ED9               	movwf	fsr2l,c
  1410  000BF4  0E00               	movlw	high _Motors
  1411  000BF6  201A               	addwfc	?___wmul+1,w,c
  1412  000BF8  6EDA               	movwf	fsr2h,c
  1413  000BFA  0100               	movlb	0	; () banked
  1414  000BFC  90DF               	bcf	indf2,0,c
  1415                           
  1416                           ;pwm.c: 292: Motors[i].servoCount = 0;
  1417  000BFE  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1418  000C02  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1419  000C06  0E00               	movlw	0
  1420  000C08  6E1C               	movwf	___wmul@multiplicand+1,c
  1421  000C0A  0E0C               	movlw	12
  1422  000C0C  6E1B               	movwf	___wmul@multiplicand,c
  1423  000C0E  EC5E  F010         	call	___wmul	;wreg free
  1424  000C12  0E07               	movlw	7
  1425  000C14  2619               	addwf	?___wmul,f,c
  1426  000C16  0E00               	movlw	0
  1427  000C18  221A               	addwfc	?___wmul+1,f,c
  1428  000C1A  0E60               	movlw	low _Motors
  1429  000C1C  2419               	addwf	?___wmul,w,c
  1430  000C1E  6ED9               	movwf	fsr2l,c
  1431  000C20  0E00               	movlw	high _Motors
  1432  000C22  201A               	addwfc	?___wmul+1,w,c
  1433  000C24  6EDA               	movwf	fsr2h,c
  1434  000C26  0E00               	movlw	0
  1435  000C28  6EDF               	movwf	indf2,c
  1436                           
  1437                           ;pwm.c: 293: SetPin(Motors[i].PWMPin,0);
  1438  000C2A  0E00               	movlw	0
  1439  000C2C  6E1F               	movwf	SetPin@value,c
  1440  000C2E  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1441  000C32  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1442  000C36  0E00               	movlw	0
  1443  000C38  6E1C               	movwf	___wmul@multiplicand+1,c
  1444  000C3A  0E0C               	movlw	12
  1445  000C3C  6E1B               	movwf	___wmul@multiplicand,c
  1446  000C3E  EC5E  F010         	call	___wmul	;wreg free
  1447  000C42  0E02               	movlw	2
  1448  000C44  2619               	addwf	?___wmul,f,c
  1449  000C46  0E00               	movlw	0
  1450  000C48  221A               	addwfc	?___wmul+1,f,c
  1451  000C4A  0E60               	movlw	low _Motors
  1452  000C4C  2419               	addwf	?___wmul,w,c
  1453  000C4E  6ED9               	movwf	fsr2l,c
  1454  000C50  0E00               	movlw	high _Motors
  1455  000C52  201A               	addwfc	?___wmul+1,w,c
  1456  000C54  6EDA               	movwf	fsr2h,c
  1457  000C56  50DF               	movf	indf2,w,c
  1458  000C58  ECCC  F00F         	call	_SetPin
  1459                           
  1460                           ;pwm.c: 294: }
  1461                           ;pwm.c: 295: } else {
  1462  000C5C  D0F5               	goto	l1675
  1463  000C5E                     l1659:
  1464                           
  1465                           ;pwm.c: 297: if (TMR0 < Motors[i].duty && Motors[i].state == 0) {
  1466  000C5E  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1467  000C62  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1468  000C66  0E00               	movlw	0
  1469  000C68  6E1C               	movwf	___wmul@multiplicand+1,c
  1470  000C6A  0E0C               	movlw	12
  1471  000C6C  6E1B               	movwf	___wmul@multiplicand,c
  1472  000C6E  EC5E  F010         	call	___wmul	;wreg free
  1473  000C72  0E05               	movlw	5
  1474  000C74  2619               	addwf	?___wmul,f,c
  1475  000C76  0E00               	movlw	0
  1476  000C78  221A               	addwfc	?___wmul+1,f,c
  1477  000C7A  0E60               	movlw	low _Motors
  1478  000C7C  2419               	addwf	?___wmul,w,c
  1479  000C7E  6ED9               	movwf	fsr2l,c
  1480  000C80  0E00               	movlw	high _Motors
  1481  000C82  201A               	addwfc	?___wmul+1,w,c
  1482  000C84  6EDA               	movwf	fsr2h,c
  1483  000C86  50DF               	movf	indf2,w,c
  1484  000C88  6E35               	movwf	??_CheckPWMOutput& (0+255),c
  1485  000C8A  5035               	movf	??_CheckPWMOutput,w,c
  1486  000C8C  5CD6               	subwf	4054,w,c	;volatile
  1487  000C8E  0E00               	movlw	0
  1488  000C90  58D7               	subwfb	4055,w,c	;volatile
  1489  000C92  B0D8               	btfsc	status,0,c
  1490  000C94  D03F               	goto	l1665
  1491  000C96  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1492  000C9A  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1493  000C9E  0E00               	movlw	0
  1494  000CA0  6E1C               	movwf	___wmul@multiplicand+1,c
  1495  000CA2  0E0C               	movlw	12
  1496  000CA4  6E1B               	movwf	___wmul@multiplicand,c
  1497  000CA6  EC5E  F010         	call	___wmul	;wreg free
  1498  000CAA  0E60               	movlw	low _Motors
  1499  000CAC  2419               	addwf	?___wmul,w,c
  1500  000CAE  6ED9               	movwf	fsr2l,c
  1501  000CB0  0E00               	movlw	high _Motors
  1502  000CB2  201A               	addwfc	?___wmul+1,w,c
  1503  000CB4  6EDA               	movwf	fsr2h,c
  1504  000CB6  0100               	movlb	0	; () banked
  1505  000CB8  B0DF               	btfsc	indf2,0,c
  1506  000CBA  D02C               	goto	l1665
  1507                           
  1508                           ; BSR set to: 0
  1509                           ;pwm.c: 299: Motors[i].state = 1;
  1510  000CBC  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1511  000CC0  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1512  000CC4  0E00               	movlw	0
  1513  000CC6  6E1C               	movwf	___wmul@multiplicand+1,c
  1514  000CC8  0E0C               	movlw	12
  1515  000CCA  6E1B               	movwf	___wmul@multiplicand,c
  1516  000CCC  EC5E  F010         	call	___wmul	;wreg free
  1517  000CD0  0E60               	movlw	low _Motors
  1518  000CD2  2419               	addwf	?___wmul,w,c
  1519  000CD4  6ED9               	movwf	fsr2l,c
  1520  000CD6  0E00               	movlw	high _Motors
  1521  000CD8  201A               	addwfc	?___wmul+1,w,c
  1522  000CDA  6EDA               	movwf	fsr2h,c
  1523  000CDC  0100               	movlb	0	; () banked
  1524  000CDE  80DF               	bsf	indf2,0,c
  1525                           
  1526                           ;pwm.c: 301: SetPin(Motors[i].PWMPin,1);
  1527  000CE0  0E01               	movlw	1
  1528  000CE2  6E1F               	movwf	SetPin@value,c
  1529  000CE4  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1530  000CE8  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1531  000CEC  0E00               	movlw	0
  1532  000CEE  6E1C               	movwf	___wmul@multiplicand+1,c
  1533  000CF0  0E0C               	movlw	12
  1534  000CF2  6E1B               	movwf	___wmul@multiplicand,c
  1535  000CF4  EC5E  F010         	call	___wmul	;wreg free
  1536  000CF8  0E02               	movlw	2
  1537  000CFA  2619               	addwf	?___wmul,f,c
  1538  000CFC  0E00               	movlw	0
  1539  000CFE  221A               	addwfc	?___wmul+1,f,c
  1540  000D00  0E60               	movlw	low _Motors
  1541  000D02  2419               	addwf	?___wmul,w,c
  1542  000D04  6ED9               	movwf	fsr2l,c
  1543  000D06  0E00               	movlw	high _Motors
  1544  000D08  201A               	addwfc	?___wmul+1,w,c
  1545  000D0A  6EDA               	movwf	fsr2h,c
  1546  000D0C  50DF               	movf	indf2,w,c
  1547  000D0E  ECCC  F00F         	call	_SetPin
  1548                           
  1549                           ;pwm.c: 302: } else if (TMR0 >= Motors[i].duty && Motors[i].state == 1) {
  1550  000D12  D09A               	goto	l1675
  1551  000D14                     l1665:
  1552  000D14  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1553  000D18  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1554  000D1C  0E00               	movlw	0
  1555  000D1E  6E1C               	movwf	___wmul@multiplicand+1,c
  1556  000D20  0E0C               	movlw	12
  1557  000D22  6E1B               	movwf	___wmul@multiplicand,c
  1558  000D24  EC5E  F010         	call	___wmul	;wreg free
  1559  000D28  0E05               	movlw	5
  1560  000D2A  2619               	addwf	?___wmul,f,c
  1561  000D2C  0E00               	movlw	0
  1562  000D2E  221A               	addwfc	?___wmul+1,f,c
  1563  000D30  0E60               	movlw	low _Motors
  1564  000D32  2419               	addwf	?___wmul,w,c
  1565  000D34  6ED9               	movwf	fsr2l,c
  1566  000D36  0E00               	movlw	high _Motors
  1567  000D38  201A               	addwfc	?___wmul+1,w,c
  1568  000D3A  6EDA               	movwf	fsr2h,c
  1569  000D3C  50DF               	movf	indf2,w,c
  1570  000D3E  6E35               	movwf	??_CheckPWMOutput& (0+255),c
  1571  000D40  6A36               	clrf	(??_CheckPWMOutput+1)& (0+255),c
  1572  000D42  5035               	movf	??_CheckPWMOutput,w,c
  1573  000D44  5CD6               	subwf	4054,w,c	;volatile
  1574  000D46  5036               	movf	??_CheckPWMOutput+1,w,c
  1575  000D48  58D7               	subwfb	4055,w,c	;volatile
  1576  000D4A  A0D8               	btfss	status,0,c
  1577  000D4C  D07D               	goto	l1675
  1578  000D4E  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1579  000D52  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1580  000D56  0E00               	movlw	0
  1581  000D58  6E1C               	movwf	___wmul@multiplicand+1,c
  1582  000D5A  0E0C               	movlw	12
  1583  000D5C  6E1B               	movwf	___wmul@multiplicand,c
  1584  000D5E  EC5E  F010         	call	___wmul	;wreg free
  1585  000D62  0E60               	movlw	low _Motors
  1586  000D64  2419               	addwf	?___wmul,w,c
  1587  000D66  6ED9               	movwf	fsr2l,c
  1588  000D68  0E00               	movlw	high _Motors
  1589  000D6A  201A               	addwfc	?___wmul+1,w,c
  1590  000D6C  6EDA               	movwf	fsr2h,c
  1591  000D6E  0100               	movlb	0	; () banked
  1592  000D70  A0DF               	btfss	indf2,0,c
  1593  000D72  D06A               	goto	l1675
  1594                           
  1595                           ; BSR set to: 0
  1596                           ;pwm.c: 304: Motors[i].state = 0;
  1597  000D74  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1598  000D78  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1599  000D7C  0E00               	movlw	0
  1600  000D7E  6E1C               	movwf	___wmul@multiplicand+1,c
  1601  000D80  0E0C               	movlw	12
  1602  000D82  6E1B               	movwf	___wmul@multiplicand,c
  1603  000D84  EC5E  F010         	call	___wmul	;wreg free
  1604  000D88  0E60               	movlw	low _Motors
  1605  000D8A  2419               	addwf	?___wmul,w,c
  1606  000D8C  6ED9               	movwf	fsr2l,c
  1607  000D8E  0E00               	movlw	high _Motors
  1608  000D90  201A               	addwfc	?___wmul+1,w,c
  1609  000D92  6EDA               	movwf	fsr2h,c
  1610  000D94  0100               	movlb	0	; () banked
  1611  000D96  90DF               	bcf	indf2,0,c
  1612                           
  1613                           ;pwm.c: 306: SetPin(Motors[i].PWMPin,0);
  1614  000D98  0E00               	movlw	0
  1615  000D9A  6E1F               	movwf	SetPin@value,c
  1616  000D9C  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1617  000DA0  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1618  000DA4  0E00               	movlw	0
  1619  000DA6  6E1C               	movwf	___wmul@multiplicand+1,c
  1620  000DA8  0E0C               	movlw	12
  1621  000DAA  6E1B               	movwf	___wmul@multiplicand,c
  1622  000DAC  EC5E  F010         	call	___wmul	;wreg free
  1623  000DB0  0E02               	movlw	2
  1624  000DB2  2619               	addwf	?___wmul,f,c
  1625  000DB4  0E00               	movlw	0
  1626  000DB6  221A               	addwfc	?___wmul+1,f,c
  1627  000DB8  0E60               	movlw	low _Motors
  1628  000DBA  2419               	addwf	?___wmul,w,c
  1629  000DBC  6ED9               	movwf	fsr2l,c
  1630  000DBE  0E00               	movlw	high _Motors
  1631  000DC0  201A               	addwfc	?___wmul+1,w,c
  1632  000DC2  6EDA               	movwf	fsr2h,c
  1633  000DC4  50DF               	movf	indf2,w,c
  1634  000DC6  ECCC  F00F         	call	_SetPin
  1635                           
  1636                           ;pwm.c: 307: }
  1637                           ;pwm.c: 308: }
  1638                           ;pwm.c: 309: } else if (Motors[i].state) {
  1639  000DCA  D03E               	goto	l1675
  1640  000DCC                     l1671:
  1641  000DCC  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1642  000DD0  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1643  000DD4  0E00               	movlw	0
  1644  000DD6  6E1C               	movwf	___wmul@multiplicand+1,c
  1645  000DD8  0E0C               	movlw	12
  1646  000DDA  6E1B               	movwf	___wmul@multiplicand,c
  1647  000DDC  EC5E  F010         	call	___wmul	;wreg free
  1648  000DE0  0E60               	movlw	low _Motors
  1649  000DE2  2419               	addwf	?___wmul,w,c
  1650  000DE4  6ED9               	movwf	fsr2l,c
  1651  000DE6  0E00               	movlw	high _Motors
  1652  000DE8  201A               	addwfc	?___wmul+1,w,c
  1653  000DEA  6EDA               	movwf	fsr2h,c
  1654  000DEC  0100               	movlb	0	; () banked
  1655  000DEE  A0DF               	btfss	indf2,0,c
  1656  000DF0  D02B               	goto	l1675
  1657                           
  1658                           ; BSR set to: 0
  1659                           ;pwm.c: 312: Motors[i].state = 0;
  1660  000DF2  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1661  000DF6  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1662  000DFA  0E00               	movlw	0
  1663  000DFC  6E1C               	movwf	___wmul@multiplicand+1,c
  1664  000DFE  0E0C               	movlw	12
  1665  000E00  6E1B               	movwf	___wmul@multiplicand,c
  1666  000E02  EC5E  F010         	call	___wmul	;wreg free
  1667  000E06  0E60               	movlw	low _Motors
  1668  000E08  2419               	addwf	?___wmul,w,c
  1669  000E0A  6ED9               	movwf	fsr2l,c
  1670  000E0C  0E00               	movlw	high _Motors
  1671  000E0E  201A               	addwfc	?___wmul+1,w,c
  1672  000E10  6EDA               	movwf	fsr2h,c
  1673  000E12  0100               	movlb	0	; () banked
  1674  000E14  90DF               	bcf	indf2,0,c
  1675                           
  1676                           ;pwm.c: 313: SetPin(Motors[i].PWMPin,0);
  1677  000E16  0E00               	movlw	0
  1678  000E18  6E1F               	movwf	SetPin@value,c
  1679  000E1A  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1680  000E1E  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1681  000E22  0E00               	movlw	0
  1682  000E24  6E1C               	movwf	___wmul@multiplicand+1,c
  1683  000E26  0E0C               	movlw	12
  1684  000E28  6E1B               	movwf	___wmul@multiplicand,c
  1685  000E2A  EC5E  F010         	call	___wmul	;wreg free
  1686  000E2E  0E02               	movlw	2
  1687  000E30  2619               	addwf	?___wmul,f,c
  1688  000E32  0E00               	movlw	0
  1689  000E34  221A               	addwfc	?___wmul+1,f,c
  1690  000E36  0E60               	movlw	low _Motors
  1691  000E38  2419               	addwf	?___wmul,w,c
  1692  000E3A  6ED9               	movwf	fsr2l,c
  1693  000E3C  0E00               	movlw	high _Motors
  1694  000E3E  201A               	addwfc	?___wmul+1,w,c
  1695  000E40  6EDA               	movwf	fsr2h,c
  1696  000E42  50DF               	movf	indf2,w,c
  1697  000E44  ECCC  F00F         	call	_SetPin
  1698  000E48                     l1675:
  1699                           
  1700                           ;pwm.c: 314: }
  1701                           ;pwm.c: 316: if (Motors[i].accelCount >= Motors[i].accelRate) {
  1702  000E48  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1703  000E4C  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1704  000E50  0E00               	movlw	0
  1705  000E52  6E1C               	movwf	___wmul@multiplicand+1,c
  1706  000E54  0E0C               	movlw	12
  1707  000E56  6E1B               	movwf	___wmul@multiplicand,c
  1708  000E58  EC5E  F010         	call	___wmul	;wreg free
  1709  000E5C  0E09               	movlw	9
  1710  000E5E  2619               	addwf	?___wmul,f,c
  1711  000E60  0E00               	movlw	0
  1712  000E62  221A               	addwfc	?___wmul+1,f,c
  1713  000E64  0E60               	movlw	low _Motors
  1714  000E66  2419               	addwf	?___wmul,w,c
  1715  000E68  6ED9               	movwf	fsr2l,c
  1716  000E6A  0E00               	movlw	high _Motors
  1717  000E6C  201A               	addwfc	?___wmul+1,w,c
  1718  000E6E  6EDA               	movwf	fsr2h,c
  1719  000E70  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1720  000E74  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1721  000E78  0E00               	movlw	0
  1722  000E7A  6E1C               	movwf	___wmul@multiplicand+1,c
  1723  000E7C  0E0C               	movlw	12
  1724  000E7E  6E1B               	movwf	___wmul@multiplicand,c
  1725  000E80  EC5E  F010         	call	___wmul	;wreg free
  1726  000E84  0E0B               	movlw	11
  1727  000E86  2619               	addwf	?___wmul,f,c
  1728  000E88  0E00               	movlw	0
  1729  000E8A  221A               	addwfc	?___wmul+1,f,c
  1730  000E8C  0E60               	movlw	low _Motors
  1731  000E8E  2419               	addwf	?___wmul,w,c
  1732  000E90  6EE1               	movwf	fsr1l,c
  1733  000E92  0E00               	movlw	high _Motors
  1734  000E94  201A               	addwfc	?___wmul+1,w,c
  1735  000E96  6EE2               	movwf	fsr1h,c
  1736  000E98  50DE               	movf	postinc2,w,c
  1737  000E9A  5CE6               	subwf	postinc1,w,c
  1738  000E9C  A0D8               	btfss	status,0,c
  1739  000E9E  D01D               	goto	l1681
  1740                           
  1741                           ;pwm.c: 317: AcceleratePWM(i);
  1742  000EA0  C037  F031         	movff	CheckPWMOutput@i,AcceleratePWM@index
  1743  000EA4  C038  F032         	movff	CheckPWMOutput@i+1,AcceleratePWM@index+1
  1744  000EA8  EC45  F00F         	call	_AcceleratePWM	;wreg free
  1745                           
  1746                           ;pwm.c: 318: Motors[i].accelCount = 0;
  1747  000EAC  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1748  000EB0  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1749  000EB4  0E00               	movlw	0
  1750  000EB6  6E1C               	movwf	___wmul@multiplicand+1,c
  1751  000EB8  0E0C               	movlw	12
  1752  000EBA  6E1B               	movwf	___wmul@multiplicand,c
  1753  000EBC  EC5E  F010         	call	___wmul	;wreg free
  1754  000EC0  0E0B               	movlw	11
  1755  000EC2  2619               	addwf	?___wmul,f,c
  1756  000EC4  0E00               	movlw	0
  1757  000EC6  221A               	addwfc	?___wmul+1,f,c
  1758  000EC8  0E60               	movlw	low _Motors
  1759  000ECA  2419               	addwf	?___wmul,w,c
  1760  000ECC  6ED9               	movwf	fsr2l,c
  1761  000ECE  0E00               	movlw	high _Motors
  1762  000ED0  201A               	addwfc	?___wmul+1,w,c
  1763  000ED2  6EDA               	movwf	fsr2h,c
  1764  000ED4  0E00               	movlw	0
  1765  000ED6  6EDF               	movwf	indf2,c
  1766                           
  1767                           ;pwm.c: 319: } else {
  1768  000ED8  D015               	goto	l1683
  1769  000EDA                     l1681:
  1770                           
  1771                           ;pwm.c: 320: Motors[i].accelCount++;
  1772  000EDA  C037  F019         	movff	CheckPWMOutput@i,___wmul@multiplier
  1773  000EDE  C038  F01A         	movff	CheckPWMOutput@i+1,___wmul@multiplier+1
  1774  000EE2  0E00               	movlw	0
  1775  000EE4  6E1C               	movwf	___wmul@multiplicand+1,c
  1776  000EE6  0E0C               	movlw	12
  1777  000EE8  6E1B               	movwf	___wmul@multiplicand,c
  1778  000EEA  EC5E  F010         	call	___wmul	;wreg free
  1779  000EEE  0E0B               	movlw	11
  1780  000EF0  2619               	addwf	?___wmul,f,c
  1781  000EF2  0E00               	movlw	0
  1782  000EF4  221A               	addwfc	?___wmul+1,f,c
  1783  000EF6  0E60               	movlw	low _Motors
  1784  000EF8  2419               	addwf	?___wmul,w,c
  1785  000EFA  6ED9               	movwf	fsr2l,c
  1786  000EFC  0E00               	movlw	high _Motors
  1787  000EFE  201A               	addwfc	?___wmul+1,w,c
  1788  000F00  6EDA               	movwf	fsr2h,c
  1789  000F02  2ADF               	incf	indf2,f,c
  1790  000F04                     l1683:
  1791  000F04  4A37               	infsnz	CheckPWMOutput@i,f,c
  1792  000F06  2A38               	incf	CheckPWMOutput@i+1,f,c
  1793  000F08  5038               	movf	CheckPWMOutput@i+1,w,c
  1794  000F0A  E101               	bnz	l353
  1795  000F0C  D4B1               	goto	L2
  1796  000F0E                     l353:
  1797  000F0E  0012               	return		;funcret
  1798  000F10                     __end_of_CheckPWMOutput:
  1799                           	opt stack 0
  1800                           tblptru	equ	0xFF8
  1801                           tblptrh	equ	0xFF7
  1802                           tblptrl	equ	0xFF6
  1803                           tablat	equ	0xFF5
  1804                           intcon	equ	0xFF2
  1805                           intcon2	equ	0xFF1
  1806                           postinc0	equ	0xFEE
  1807                           wreg	equ	0xFE8
  1808                           postinc1	equ	0xFE6
  1809                           fsr1h	equ	0xFE2
  1810                           fsr1l	equ	0xFE1
  1811                           indf2	equ	0xFDF
  1812                           postinc2	equ	0xFDE
  1813                           fsr2h	equ	0xFDA
  1814                           fsr2l	equ	0xFD9
  1815                           status	equ	0xFD8
  1816                           
  1817 ;; *************** function _AcceleratePWM *****************
  1818 ;; Defined at:
  1819 ;;		line 244 in file "pwm.c"
  1820 ;; Parameters:    Size  Location     Type
  1821 ;;  index           2   48[COMRAM] unsigned int 
  1822 ;; Auto vars:     Size  Location     Type
  1823 ;;		None
  1824 ;; Return value:  Size  Location     Type
  1825 ;;                  1    wreg      void 
  1826 ;; Registers used:
  1827 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1828 ;; Tracked objects:
  1829 ;;		On entry : 0/0
  1830 ;;		On exit  : 0/0
  1831 ;;		Unchanged: 0/0
  1832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1833 ;;      Params:         2       0       0       0
  1834 ;;      Locals:         0       0       0       0
  1835 ;;      Temps:          2       0       0       0
  1836 ;;      Totals:         4       0       0       0
  1837 ;;Total ram usage:        4 bytes
  1838 ;; Hardware stack levels used:    1
  1839 ;; Hardware stack levels required when called:    5
  1840 ;; This function calls:
  1841 ;;		_AccelerateMotor
  1842 ;;		_StopMotor
  1843 ;;		___wmul
  1844 ;; This function is called by:
  1845 ;;		_CheckPWMOutput
  1846 ;; This function uses a non-reentrant model
  1847 ;;
  1848                           
  1849                           	psect	text5
  1850  001E8A                     __ptext5:
  1851                           	opt stack 0
  1852  001E8A                     _AcceleratePWM:
  1853                           	opt stack 24
  1854                           
  1855                           ;pwm.c: 245: if (PWMPause || Motors[index].paused) {
  1856                           
  1857                           ;incstack = 0
  1858  001E8A  5041               	movf	_PWMPause,w,c
  1859  001E8C  A4D8               	btfss	status,2,c
  1860  001E8E  D013               	goto	l1573
  1861  001E90  C031  F019         	movff	AcceleratePWM@index,___wmul@multiplier
  1862  001E94  C032  F01A         	movff	AcceleratePWM@index+1,___wmul@multiplier+1
  1863  001E98  0E00               	movlw	0
  1864  001E9A  6E1C               	movwf	___wmul@multiplicand+1,c
  1865  001E9C  0E0C               	movlw	12
  1866  001E9E  6E1B               	movwf	___wmul@multiplicand,c
  1867  001EA0  EC5E  F010         	call	___wmul	;wreg free
  1868  001EA4  0E60               	movlw	low _Motors
  1869  001EA6  2419               	addwf	?___wmul,w,c
  1870  001EA8  6ED9               	movwf	fsr2l,c
  1871  001EAA  0E00               	movlw	high _Motors
  1872  001EAC  201A               	addwfc	?___wmul+1,w,c
  1873  001EAE  6EDA               	movwf	fsr2h,c
  1874  001EB0  0100               	movlb	0	; () banked
  1875  001EB2  A4DF               	btfss	indf2,2,c
  1876  001EB4  D007               	goto	l1575
  1877  001EB6                     l1573:
  1878                           
  1879                           ;pwm.c: 246: StopMotor(index);
  1880  001EB6  C031  F02B         	movff	AcceleratePWM@index,StopMotor@index
  1881  001EBA  C032  F02C         	movff	AcceleratePWM@index+1,StopMotor@index+1
  1882  001EBE  EC3F  F00C         	call	_StopMotor	;wreg free
  1883                           
  1884                           ;pwm.c: 247: } else {
  1885  001EC2  0012               	return	
  1886  001EC4                     l1575:
  1887                           
  1888                           ;pwm.c: 251: if (Motors[index].direction != Motors[index].targetDirection) {
  1889  001EC4  C031  F019         	movff	AcceleratePWM@index,___wmul@multiplier
  1890  001EC8  C032  F01A         	movff	AcceleratePWM@index+1,___wmul@multiplier+1
  1891  001ECC  0E00               	movlw	0
  1892  001ECE  6E1C               	movwf	___wmul@multiplicand+1,c
  1893  001ED0  0E0C               	movlw	12
  1894  001ED2  6E1B               	movwf	___wmul@multiplicand,c
  1895  001ED4  EC5E  F010         	call	___wmul	;wreg free
  1896  001ED8  0E60               	movlw	low _Motors
  1897  001EDA  2419               	addwf	?___wmul,w,c
  1898  001EDC  6ED9               	movwf	fsr2l,c
  1899  001EDE  0E00               	movlw	high _Motors
  1900  001EE0  201A               	addwfc	?___wmul+1,w,c
  1901  001EE2  6EDA               	movwf	fsr2h,c
  1902  001EE4  0100               	movlb	0	; () banked
  1903  001EE6  A8DF               	btfss	indf2,4,c
  1904  001EE8  D002               	goto	u1730
  1905  001EEA  0E01               	movlw	1
  1906  001EEC  D001               	goto	u1732
  1907  001EEE                     u1730:
  1908  001EEE  0E00               	movlw	0
  1909  001EF0                     u1732:
  1910  001EF0  6E33               	movwf	??_AcceleratePWM& (0+255),c
  1911  001EF2  C031  F019         	movff	AcceleratePWM@index,___wmul@multiplier
  1912  001EF6  C032  F01A         	movff	AcceleratePWM@index+1,___wmul@multiplier+1
  1913  001EFA  0E00               	movlw	0
  1914  001EFC  6E1C               	movwf	___wmul@multiplicand+1,c
  1915  001EFE  0E0C               	movlw	12
  1916  001F00  6E1B               	movwf	___wmul@multiplicand,c
  1917  001F02  EC5E  F010         	call	___wmul	;wreg free
  1918  001F06  0E60               	movlw	low _Motors
  1919  001F08  2419               	addwf	?___wmul,w,c
  1920  001F0A  6ED9               	movwf	fsr2l,c
  1921  001F0C  0E00               	movlw	high _Motors
  1922  001F0E  201A               	addwfc	?___wmul+1,w,c
  1923  001F10  6EDA               	movwf	fsr2h,c
  1924  001F12  0100               	movlb	0	; () banked
  1925  001F14  A6DF               	btfss	indf2,3,c
  1926  001F16  D002               	goto	u1740
  1927  001F18  0E01               	movlw	1
  1928  001F1A  D001               	goto	u1742
  1929  001F1C                     u1740:
  1930  001F1C  0E00               	movlw	0
  1931  001F1E                     u1742:
  1932  001F1E  1A33               	xorwf	??_AcceleratePWM,f,c
  1933  001F20  B4D8               	btfsc	status,2,c
  1934  001F22  D007               	goto	l1579
  1935                           
  1936                           ; BSR set to: 0
  1937                           ;pwm.c: 252: StopMotor(index);
  1938  001F24  C031  F02B         	movff	AcceleratePWM@index,StopMotor@index
  1939  001F28  C032  F02C         	movff	AcceleratePWM@index+1,StopMotor@index+1
  1940  001F2C  EC3F  F00C         	call	_StopMotor	;wreg free
  1941                           
  1942                           ;pwm.c: 253: } else if (Motors[index].duty != Motors[index].target) {
  1943  001F30  0012               	return	
  1944  001F32                     l1579:
  1945  001F32  C031  F019         	movff	AcceleratePWM@index,___wmul@multiplier
  1946  001F36  C032  F01A         	movff	AcceleratePWM@index+1,___wmul@multiplier+1
  1947  001F3A  0E00               	movlw	0
  1948  001F3C  6E1C               	movwf	___wmul@multiplicand+1,c
  1949  001F3E  0E0C               	movlw	12
  1950  001F40  6E1B               	movwf	___wmul@multiplicand,c
  1951  001F42  EC5E  F010         	call	___wmul	;wreg free
  1952  001F46  0E06               	movlw	6
  1953  001F48  2619               	addwf	?___wmul,f,c
  1954  001F4A  0E00               	movlw	0
  1955  001F4C  221A               	addwfc	?___wmul+1,f,c
  1956  001F4E  0E60               	movlw	low _Motors
  1957  001F50  2419               	addwf	?___wmul,w,c
  1958  001F52  6ED9               	movwf	fsr2l,c
  1959  001F54  0E00               	movlw	high _Motors
  1960  001F56  201A               	addwfc	?___wmul+1,w,c
  1961  001F58  6EDA               	movwf	fsr2h,c
  1962  001F5A  C031  F019         	movff	AcceleratePWM@index,___wmul@multiplier
  1963  001F5E  C032  F01A         	movff	AcceleratePWM@index+1,___wmul@multiplier+1
  1964  001F62  0E00               	movlw	0
  1965  001F64  6E1C               	movwf	___wmul@multiplicand+1,c
  1966  001F66  0E0C               	movlw	12
  1967  001F68  6E1B               	movwf	___wmul@multiplicand,c
  1968  001F6A  EC5E  F010         	call	___wmul	;wreg free
  1969  001F6E  0E05               	movlw	5
  1970  001F70  2619               	addwf	?___wmul,f,c
  1971  001F72  0E00               	movlw	0
  1972  001F74  221A               	addwfc	?___wmul+1,f,c
  1973  001F76  0E60               	movlw	low _Motors
  1974  001F78  2419               	addwf	?___wmul,w,c
  1975  001F7A  6EE1               	movwf	fsr1l,c
  1976  001F7C  0E00               	movlw	high _Motors
  1977  001F7E  201A               	addwfc	?___wmul+1,w,c
  1978  001F80  6EE2               	movwf	fsr1h,c
  1979  001F82  50DE               	movf	postinc2,w,c
  1980  001F84  18E6               	xorwf	postinc1,w,c
  1981  001F86  B4D8               	btfsc	status,2,c
  1982  001F88  0012               	return	
  1983                           
  1984                           ;pwm.c: 254: AccelerateMotor(index);
  1985  001F8A  C031  F02B         	movff	AcceleratePWM@index,AccelerateMotor@index
  1986  001F8E  C032  F02C         	movff	AcceleratePWM@index+1,AccelerateMotor@index+1
  1987  001F92  EC88  F007         	call	_AccelerateMotor	;wreg free
  1988  001F96  0012               	return	
  1989  001F98                     __end_of_AcceleratePWM:
  1990                           	opt stack 0
  1991                           tblptru	equ	0xFF8
  1992                           tblptrh	equ	0xFF7
  1993                           tblptrl	equ	0xFF6
  1994                           tablat	equ	0xFF5
  1995                           intcon	equ	0xFF2
  1996                           intcon2	equ	0xFF1
  1997                           postinc0	equ	0xFEE
  1998                           wreg	equ	0xFE8
  1999                           postinc1	equ	0xFE6
  2000                           fsr1h	equ	0xFE2
  2001                           fsr1l	equ	0xFE1
  2002                           indf2	equ	0xFDF
  2003                           postinc2	equ	0xFDE
  2004                           fsr2h	equ	0xFDA
  2005                           fsr2l	equ	0xFD9
  2006                           status	equ	0xFD8
  2007                           
  2008 ;; *************** function _StopMotor *****************
  2009 ;; Defined at:
  2010 ;;		line 168 in file "pwm.c"
  2011 ;; Parameters:    Size  Location     Type
  2012 ;;  index           2   42[COMRAM] unsigned int 
  2013 ;; Auto vars:     Size  Location     Type
  2014 ;;		None
  2015 ;; Return value:  Size  Location     Type
  2016 ;;                  1    wreg      void 
  2017 ;; Registers used:
  2018 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2019 ;; Tracked objects:
  2020 ;;		On entry : 0/0
  2021 ;;		On exit  : 0/0
  2022 ;;		Unchanged: 0/0
  2023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2024 ;;      Params:         2       0       0       0
  2025 ;;      Locals:         2       0       0       0
  2026 ;;      Temps:          2       0       0       0
  2027 ;;      Totals:         6       0       0       0
  2028 ;;Total ram usage:        6 bytes
  2029 ;; Hardware stack levels used:    1
  2030 ;; Hardware stack levels required when called:    4
  2031 ;; This function calls:
  2032 ;;		_ExponentialProfile
  2033 ;;		_SetPin
  2034 ;;		___wmul
  2035 ;; This function is called by:
  2036 ;;		_AcceleratePWM
  2037 ;; This function uses a non-reentrant model
  2038 ;;
  2039                           
  2040                           	psect	text6
  2041  00187E                     __ptext6:
  2042                           	opt stack 0
  2043  00187E                     _StopMotor:
  2044                           	opt stack 24
  2045                           
  2046                           ;pwm.c: 171: if (Motors[index].duty == 0 && Motors[index].direction != Motors[index].tar
      +                          getDirection) {
  2047                           
  2048                           ;incstack = 0
  2049  00187E  C02B  F019         	movff	StopMotor@index,___wmul@multiplier
  2050  001882  C02C  F01A         	movff	StopMotor@index+1,___wmul@multiplier+1
  2051  001886  0E00               	movlw	0
  2052  001888  6E1C               	movwf	___wmul@multiplicand+1,c
  2053  00188A  0E0C               	movlw	12
  2054  00188C  6E1B               	movwf	___wmul@multiplicand,c
  2055  00188E  EC5E  F010         	call	___wmul	;wreg free
  2056  001892  0E05               	movlw	5
  2057  001894  2619               	addwf	?___wmul,f,c
  2058  001896  0E00               	movlw	0
  2059  001898  221A               	addwfc	?___wmul+1,f,c
  2060  00189A  0E60               	movlw	low _Motors
  2061  00189C  2419               	addwf	?___wmul,w,c
  2062  00189E  6ED9               	movwf	fsr2l,c
  2063  0018A0  0E00               	movlw	high _Motors
  2064  0018A2  201A               	addwfc	?___wmul+1,w,c
  2065  0018A4  6EDA               	movwf	fsr2h,c
  2066  0018A6  50DF               	movf	indf2,w,c
  2067  0018A8  A4D8               	btfss	status,2,c
  2068  0018AA  D0B3               	goto	l1513
  2069  0018AC  C02B  F019         	movff	StopMotor@index,___wmul@multiplier
  2070  0018B0  C02C  F01A         	movff	StopMotor@index+1,___wmul@multiplier+1
  2071  0018B4  0E00               	movlw	0
  2072  0018B6  6E1C               	movwf	___wmul@multiplicand+1,c
  2073  0018B8  0E0C               	movlw	12
  2074  0018BA  6E1B               	movwf	___wmul@multiplicand,c
  2075  0018BC  EC5E  F010         	call	___wmul	;wreg free
  2076  0018C0  0E60               	movlw	low _Motors
  2077  0018C2  2419               	addwf	?___wmul,w,c
  2078  0018C4  6ED9               	movwf	fsr2l,c
  2079  0018C6  0E00               	movlw	high _Motors
  2080  0018C8  201A               	addwfc	?___wmul+1,w,c
  2081  0018CA  6EDA               	movwf	fsr2h,c
  2082  0018CC  0100               	movlb	0	; () banked
  2083  0018CE  A8DF               	btfss	indf2,4,c
  2084  0018D0  D002               	goto	u1540
  2085  0018D2  0E01               	movlw	1
  2086  0018D4  D001               	goto	u1542
  2087  0018D6                     u1540:
  2088  0018D6  0E00               	movlw	0
  2089  0018D8                     u1542:
  2090  0018D8  6E2D               	movwf	??_StopMotor& (0+255),c
  2091  0018DA  C02B  F019         	movff	StopMotor@index,___wmul@multiplier
  2092  0018DE  C02C  F01A         	movff	StopMotor@index+1,___wmul@multiplier+1
  2093  0018E2  0E00               	movlw	0
  2094  0018E4  6E1C               	movwf	___wmul@multiplicand+1,c
  2095  0018E6  0E0C               	movlw	12
  2096  0018E8  6E1B               	movwf	___wmul@multiplicand,c
  2097  0018EA  EC5E  F010         	call	___wmul	;wreg free
  2098  0018EE  0E60               	movlw	low _Motors
  2099  0018F0  2419               	addwf	?___wmul,w,c
  2100  0018F2  6ED9               	movwf	fsr2l,c
  2101  0018F4  0E00               	movlw	high _Motors
  2102  0018F6  201A               	addwfc	?___wmul+1,w,c
  2103  0018F8  6EDA               	movwf	fsr2h,c
  2104  0018FA  0100               	movlb	0	; () banked
  2105  0018FC  A6DF               	btfss	indf2,3,c
  2106  0018FE  D002               	goto	u1550
  2107  001900  0E01               	movlw	1
  2108  001902  D001               	goto	u1552
  2109  001904                     u1550:
  2110  001904  0E00               	movlw	0
  2111  001906                     u1552:
  2112  001906  1A2D               	xorwf	??_StopMotor,f,c
  2113  001908  B4D8               	btfsc	status,2,c
  2114  00190A  D083               	goto	l1513
  2115                           
  2116                           ; BSR set to: 0
  2117                           ;pwm.c: 173: Motors[index].direction = Motors[index].targetDirection;
  2118  00190C  C02B  F019         	movff	StopMotor@index,___wmul@multiplier
  2119  001910  C02C  F01A         	movff	StopMotor@index+1,___wmul@multiplier+1
  2120  001914  0E00               	movlw	0
  2121  001916  6E1C               	movwf	___wmul@multiplicand+1,c
  2122  001918  0E0C               	movlw	12
  2123  00191A  6E1B               	movwf	___wmul@multiplicand,c
  2124  00191C  EC5E  F010         	call	___wmul	;wreg free
  2125  001920  0E60               	movlw	low _Motors
  2126  001922  2419               	addwf	?___wmul,w,c
  2127  001924  6ED9               	movwf	fsr2l,c
  2128  001926  0E00               	movlw	high _Motors
  2129  001928  201A               	addwfc	?___wmul+1,w,c
  2130  00192A  6EDA               	movwf	fsr2h,c
  2131  00192C  C02B  F019         	movff	StopMotor@index,___wmul@multiplier
  2132  001930  C02C  F01A         	movff	StopMotor@index+1,___wmul@multiplier+1
  2133  001934  0E00               	movlw	0
  2134  001936  6E1C               	movwf	___wmul@multiplicand+1,c
  2135  001938  0E0C               	movlw	12
  2136  00193A  6E1B               	movwf	___wmul@multiplicand,c
  2137  00193C  EC5E  F010         	call	___wmul	;wreg free
  2138  001940  0E60               	movlw	low _Motors
  2139  001942  2419               	addwf	?___wmul,w,c
  2140  001944  6EE1               	movwf	fsr1l,c
  2141  001946  0E00               	movlw	high _Motors
  2142  001948  201A               	addwfc	?___wmul+1,w,c
  2143  00194A  6EE2               	movwf	fsr1h,c
  2144  00194C  0100               	movlb	0	; () banked
  2145  00194E  B8DF               	btfsc	indf2,4,c
  2146  001950  D003               	bra	u1575
  2147  001952  0100               	movlb	0	; () banked
  2148  001954  96E7               	bcf	indf1,3,c
  2149  001956  D002               	bra	u1576
  2150  001958                     u1575:
  2151  001958  0100               	movlb	0	; () banked
  2152  00195A  86E7               	bsf	indf1,3,c
  2153  00195C                     u1576:
  2154                           
  2155                           ; BSR set to: 0
  2156                           ;pwm.c: 175: SetPin(Motors[index].dirPin, Motors[index].direction);
  2157  00195C  C02B  F019         	movff	StopMotor@index,___wmul@multiplier
  2158  001960  C02C  F01A         	movff	StopMotor@index+1,___wmul@multiplier+1
  2159  001964  0E00               	movlw	0
  2160  001966  6E1C               	movwf	___wmul@multiplicand+1,c
  2161  001968  0E0C               	movlw	12
  2162  00196A  6E1B               	movwf	___wmul@multiplicand,c
  2163  00196C  EC5E  F010         	call	___wmul	;wreg free
  2164  001970  0E60               	movlw	low _Motors
  2165  001972  2419               	addwf	?___wmul,w,c
  2166  001974  6ED9               	movwf	fsr2l,c
  2167  001976  0E00               	movlw	high _Motors
  2168  001978  201A               	addwfc	?___wmul+1,w,c
  2169  00197A  6EDA               	movwf	fsr2h,c
  2170  00197C  0100               	movlb	0	; () banked
  2171  00197E  0E00               	movlw	0
  2172  001980  B6DF               	btfsc	indf2,3,c
  2173  001982  0E01               	movlw	1
  2174  001984  6E1F               	movwf	SetPin@value,c
  2175  001986  C02B  F019         	movff	StopMotor@index,___wmul@multiplier
  2176  00198A  C02C  F01A         	movff	StopMotor@index+1,___wmul@multiplier+1
  2177  00198E  0E00               	movlw	0
  2178  001990  6E1C               	movwf	___wmul@multiplicand+1,c
  2179  001992  0E0C               	movlw	12
  2180  001994  6E1B               	movwf	___wmul@multiplicand,c
  2181  001996  EC5E  F010         	call	___wmul	;wreg free
  2182  00199A  0E03               	movlw	3
  2183  00199C  2619               	addwf	?___wmul,f,c
  2184  00199E  0E00               	movlw	0
  2185  0019A0  221A               	addwfc	?___wmul+1,f,c
  2186  0019A2  0E60               	movlw	low _Motors
  2187  0019A4  2419               	addwf	?___wmul,w,c
  2188  0019A6  6ED9               	movwf	fsr2l,c
  2189  0019A8  0E00               	movlw	high _Motors
  2190  0019AA  201A               	addwfc	?___wmul+1,w,c
  2191  0019AC  6EDA               	movwf	fsr2h,c
  2192  0019AE  50DF               	movf	indf2,w,c
  2193  0019B0  ECCC  F00F         	call	_SetPin
  2194                           
  2195                           ;pwm.c: 176: SetPin(Motors[index].cdirPin, (unsigned) !Motors[index].direction);
  2196  0019B4  C02B  F019         	movff	StopMotor@index,___wmul@multiplier
  2197  0019B8  C02C  F01A         	movff	StopMotor@index+1,___wmul@multiplier+1
  2198  0019BC  0E00               	movlw	0
  2199  0019BE  6E1C               	movwf	___wmul@multiplicand+1,c
  2200  0019C0  0E0C               	movlw	12
  2201  0019C2  6E1B               	movwf	___wmul@multiplicand,c
  2202  0019C4  EC5E  F010         	call	___wmul	;wreg free
  2203  0019C8  0E60               	movlw	low _Motors
  2204  0019CA  2419               	addwf	?___wmul,w,c
  2205  0019CC  6ED9               	movwf	fsr2l,c
  2206  0019CE  0E00               	movlw	high _Motors
  2207  0019D0  201A               	addwfc	?___wmul+1,w,c
  2208  0019D2  6EDA               	movwf	fsr2h,c
  2209  0019D4  0100               	movlb	0	; () banked
  2210  0019D6  B6DF               	btfsc	indf2,3,c
  2211  0019D8  D002               	goto	u1580
  2212  0019DA  0E01               	movlw	1
  2213  0019DC  D001               	goto	u1590
  2214  0019DE                     u1580:
  2215  0019DE  0E00               	movlw	0
  2216  0019E0                     u1590:
  2217  0019E0  6E1F               	movwf	SetPin@value,c
  2218  0019E2  C02B  F019         	movff	StopMotor@index,___wmul@multiplier
  2219  0019E6  C02C  F01A         	movff	StopMotor@index+1,___wmul@multiplier+1
  2220  0019EA  0E00               	movlw	0
  2221  0019EC  6E1C               	movwf	___wmul@multiplicand+1,c
  2222  0019EE  0E0C               	movlw	12
  2223  0019F0  6E1B               	movwf	___wmul@multiplicand,c
  2224  0019F2  EC5E  F010         	call	___wmul	;wreg free
  2225  0019F6  0E04               	movlw	4
  2226  0019F8  2619               	addwf	?___wmul,f,c
  2227  0019FA  0E00               	movlw	0
  2228  0019FC  221A               	addwfc	?___wmul+1,f,c
  2229  0019FE  0E60               	movlw	low _Motors
  2230  001A00  2419               	addwf	?___wmul,w,c
  2231  001A02  6ED9               	movwf	fsr2l,c
  2232  001A04  0E00               	movlw	high _Motors
  2233  001A06  201A               	addwfc	?___wmul+1,w,c
  2234  001A08  6EDA               	movwf	fsr2h,c
  2235  001A0A  50DF               	movf	indf2,w,c
  2236  001A0C  ECCC  F00F         	call	_SetPin
  2237                           
  2238                           ;pwm.c: 177: } else if (Motors[index].duty > 0) {
  2239  001A10  0012               	return	
  2240  001A12                     l1513:
  2241  001A12  C02B  F019         	movff	StopMotor@index,___wmul@multiplier
  2242  001A16  C02C  F01A         	movff	StopMotor@index+1,___wmul@multiplier+1
  2243  001A1A  0E00               	movlw	0
  2244  001A1C  6E1C               	movwf	___wmul@multiplicand+1,c
  2245  001A1E  0E0C               	movlw	12
  2246  001A20  6E1B               	movwf	___wmul@multiplicand,c
  2247  001A22  EC5E  F010         	call	___wmul	;wreg free
  2248  001A26  0E05               	movlw	5
  2249  001A28  2619               	addwf	?___wmul,f,c
  2250  001A2A  0E00               	movlw	0
  2251  001A2C  221A               	addwfc	?___wmul+1,f,c
  2252  001A2E  0E60               	movlw	low _Motors
  2253  001A30  2419               	addwf	?___wmul,w,c
  2254  001A32  6ED9               	movwf	fsr2l,c
  2255  001A34  0E00               	movlw	high _Motors
  2256  001A36  201A               	addwfc	?___wmul+1,w,c
  2257  001A38  6EDA               	movwf	fsr2h,c
  2258  001A3A  50DF               	movf	indf2,w,c
  2259  001A3C  B4D8               	btfsc	status,2,c
  2260  001A3E  0012               	return	
  2261  001A40  D100               	goto	l1533
  2262  001A42                     l1517:
  2263                           
  2264                           ;pwm.c: 183: Motors[index].duty = 0;
  2265  001A42  C02B  F019         	movff	StopMotor@index,___wmul@multiplier
  2266  001A46  C02C  F01A         	movff	StopMotor@index+1,___wmul@multiplier+1
  2267  001A4A  0E00               	movlw	0
  2268  001A4C  6E1C               	movwf	___wmul@multiplicand+1,c
  2269  001A4E  0E0C               	movlw	12
  2270  001A50  6E1B               	movwf	___wmul@multiplicand,c
  2271  001A52  EC5E  F010         	call	___wmul	;wreg free
  2272  001A56  0E05               	movlw	5
  2273  001A58  2619               	addwf	?___wmul,f,c
  2274  001A5A  0E00               	movlw	0
  2275  001A5C  221A               	addwfc	?___wmul+1,f,c
  2276  001A5E  0E60               	movlw	low _Motors
  2277  001A60  2419               	addwf	?___wmul,w,c
  2278  001A62  6ED9               	movwf	fsr2l,c
  2279  001A64  0E00               	movlw	high _Motors
  2280  001A66  201A               	addwfc	?___wmul+1,w,c
  2281  001A68  6EDA               	movwf	fsr2h,c
  2282  001A6A  0E00               	movlw	0
  2283  001A6C  6EDF               	movwf	indf2,c
  2284                           
  2285                           ;pwm.c: 184: break;
  2286  001A6E  0012               	return	
  2287  001A70                     l1519:
  2288                           
  2289                           ;pwm.c: 186: if (Motors[index].duty > Motors[index].minimumDuty) {
  2290  001A70  C02B  F019         	movff	StopMotor@index,___wmul@multiplier
  2291  001A74  C02C  F01A         	movff	StopMotor@index+1,___wmul@multiplier+1
  2292  001A78  0E00               	movlw	0
  2293  001A7A  6E1C               	movwf	___wmul@multiplicand+1,c
  2294  001A7C  0E0C               	movlw	12
  2295  001A7E  6E1B               	movwf	___wmul@multiplicand,c
  2296  001A80  EC5E  F010         	call	___wmul	;wreg free
  2297  001A84  0E05               	movlw	5
  2298  001A86  2619               	addwf	?___wmul,f,c
  2299  001A88  0E00               	movlw	0
  2300  001A8A  221A               	addwfc	?___wmul+1,f,c
  2301  001A8C  0E60               	movlw	low _Motors
  2302  001A8E  2419               	addwf	?___wmul,w,c
  2303  001A90  6ED9               	movwf	fsr2l,c
  2304  001A92  0E00               	movlw	high _Motors
  2305  001A94  201A               	addwfc	?___wmul+1,w,c
  2306  001A96  6EDA               	movwf	fsr2h,c
  2307  001A98  C02B  F019         	movff	StopMotor@index,___wmul@multiplier
  2308  001A9C  C02C  F01A         	movff	StopMotor@index+1,___wmul@multiplier+1
  2309  001AA0  0E00               	movlw	0
  2310  001AA2  6E1C               	movwf	___wmul@multiplicand+1,c
  2311  001AA4  0E0C               	movlw	12
  2312  001AA6  6E1B               	movwf	___wmul@multiplicand,c
  2313  001AA8  EC5E  F010         	call	___wmul	;wreg free
  2314  001AAC  0E0A               	movlw	10
  2315  001AAE  2619               	addwf	?___wmul,f,c
  2316  001AB0  0E00               	movlw	0
  2317  001AB2  221A               	addwfc	?___wmul+1,f,c
  2318  001AB4  0E60               	movlw	low _Motors
  2319  001AB6  2419               	addwf	?___wmul,w,c
  2320  001AB8  6EE1               	movwf	fsr1l,c
  2321  001ABA  0E00               	movlw	high _Motors
  2322  001ABC  201A               	addwfc	?___wmul+1,w,c
  2323  001ABE  6EE2               	movwf	fsr1h,c
  2324  001AC0  50DE               	movf	postinc2,w,c
  2325  001AC2  5CE6               	subwf	postinc1,w,c
  2326  001AC4  B0D8               	btfsc	status,0,c
  2327  001AC6  D016               	goto	l1523
  2328                           
  2329                           ;pwm.c: 187: Motors[index].duty -= 1;
  2330  001AC8  C02B  F019         	movff	StopMotor@index,___wmul@multiplier
  2331  001ACC  C02C  F01A         	movff	StopMotor@index+1,___wmul@multiplier+1
  2332  001AD0  0E00               	movlw	0
  2333  001AD2  6E1C               	movwf	___wmul@multiplicand+1,c
  2334  001AD4  0E0C               	movlw	12
  2335  001AD6  6E1B               	movwf	___wmul@multiplicand,c
  2336  001AD8  EC5E  F010         	call	___wmul	;wreg free
  2337  001ADC  0E05               	movlw	5
  2338  001ADE  2619               	addwf	?___wmul,f,c
  2339  001AE0  0E00               	movlw	0
  2340  001AE2  221A               	addwfc	?___wmul+1,f,c
  2341  001AE4  0E60               	movlw	low _Motors
  2342  001AE6  2419               	addwf	?___wmul,w,c
  2343  001AE8  6ED9               	movwf	fsr2l,c
  2344  001AEA  0E00               	movlw	high _Motors
  2345  001AEC  201A               	addwfc	?___wmul+1,w,c
  2346  001AEE  6EDA               	movwf	fsr2h,c
  2347  001AF0  06DF               	decf	indf2,f,c
  2348                           
  2349                           ;pwm.c: 188: } else {
  2350  001AF2  0012               	return	
  2351  001AF4                     l1523:
  2352                           
  2353                           ;pwm.c: 189: Motors[index].duty = 0;
  2354  001AF4  C02B  F019         	movff	StopMotor@index,___wmul@multiplier
  2355  001AF8  C02C  F01A         	movff	StopMotor@index+1,___wmul@multiplier+1
  2356  001AFC  0E00               	movlw	0
  2357  001AFE  6E1C               	movwf	___wmul@multiplicand+1,c
  2358  001B00  0E0C               	movlw	12
  2359  001B02  6E1B               	movwf	___wmul@multiplicand,c
  2360  001B04  EC5E  F010         	call	___wmul	;wreg free
  2361  001B08  0E05               	movlw	5
  2362  001B0A  2619               	addwf	?___wmul,f,c
  2363  001B0C  0E00               	movlw	0
  2364  001B0E  221A               	addwfc	?___wmul+1,f,c
  2365  001B10  0E60               	movlw	low _Motors
  2366  001B12  2419               	addwf	?___wmul,w,c
  2367  001B14  6ED9               	movwf	fsr2l,c
  2368  001B16  0E00               	movlw	high _Motors
  2369  001B18  201A               	addwfc	?___wmul+1,w,c
  2370  001B1A  6EDA               	movwf	fsr2h,c
  2371  001B1C  0E00               	movlw	0
  2372  001B1E  6EDF               	movwf	indf2,c
  2373                           
  2374                           ;pwm.c: 190: }
  2375                           ;pwm.c: 191: break;
  2376  001B20  0012               	return	
  2377  001B22                     l1525:
  2378                           
  2379                           ;pwm.c: 193: if (Motors[index].duty > Motors[index].minimumDuty) {
  2380  001B22  C02B  F019         	movff	StopMotor@index,___wmul@multiplier
  2381  001B26  C02C  F01A         	movff	StopMotor@index+1,___wmul@multiplier+1
  2382  001B2A  0E00               	movlw	0
  2383  001B2C  6E1C               	movwf	___wmul@multiplicand+1,c
  2384  001B2E  0E0C               	movlw	12
  2385  001B30  6E1B               	movwf	___wmul@multiplicand,c
  2386  001B32  EC5E  F010         	call	___wmul	;wreg free
  2387  001B36  0E05               	movlw	5
  2388  001B38  2619               	addwf	?___wmul,f,c
  2389  001B3A  0E00               	movlw	0
  2390  001B3C  221A               	addwfc	?___wmul+1,f,c
  2391  001B3E  0E60               	movlw	low _Motors
  2392  001B40  2419               	addwf	?___wmul,w,c
  2393  001B42  6ED9               	movwf	fsr2l,c
  2394  001B44  0E00               	movlw	high _Motors
  2395  001B46  201A               	addwfc	?___wmul+1,w,c
  2396  001B48  6EDA               	movwf	fsr2h,c
  2397  001B4A  C02B  F019         	movff	StopMotor@index,___wmul@multiplier
  2398  001B4E  C02C  F01A         	movff	StopMotor@index+1,___wmul@multiplier+1
  2399  001B52  0E00               	movlw	0
  2400  001B54  6E1C               	movwf	___wmul@multiplicand+1,c
  2401  001B56  0E0C               	movlw	12
  2402  001B58  6E1B               	movwf	___wmul@multiplicand,c
  2403  001B5A  EC5E  F010         	call	___wmul	;wreg free
  2404  001B5E  0E0A               	movlw	10
  2405  001B60  2619               	addwf	?___wmul,f,c
  2406  001B62  0E00               	movlw	0
  2407  001B64  221A               	addwfc	?___wmul+1,f,c
  2408  001B66  0E60               	movlw	low _Motors
  2409  001B68  2419               	addwf	?___wmul,w,c
  2410  001B6A  6EE1               	movwf	fsr1l,c
  2411  001B6C  0E00               	movlw	high _Motors
  2412  001B6E  201A               	addwfc	?___wmul+1,w,c
  2413  001B70  6EE2               	movwf	fsr1h,c
  2414  001B72  50DE               	movf	postinc2,w,c
  2415  001B74  5CE6               	subwf	postinc1,w,c
  2416  001B76  B0D8               	btfsc	status,0,c
  2417  001B78  D04D               	goto	l1529
  2418                           
  2419                           ;pwm.c: 194: Motors[index].duty -= ExponentialProfile(Motors[index].duty, Motors[index].
      +                          minimumDuty, index);
  2420  001B7A  C02B  F019         	movff	StopMotor@index,___wmul@multiplier
  2421  001B7E  C02C  F01A         	movff	StopMotor@index+1,___wmul@multiplier+1
  2422  001B82  0E00               	movlw	0
  2423  001B84  6E1C               	movwf	___wmul@multiplicand+1,c
  2424  001B86  0E0C               	movlw	12
  2425  001B88  6E1B               	movwf	___wmul@multiplicand,c
  2426  001B8A  EC5E  F010         	call	___wmul	;wreg free
  2427  001B8E  0E0A               	movlw	10
  2428  001B90  2619               	addwf	?___wmul,f,c
  2429  001B92  0E00               	movlw	0
  2430  001B94  221A               	addwfc	?___wmul+1,f,c
  2431  001B96  0E60               	movlw	low _Motors
  2432  001B98  2419               	addwf	?___wmul,w,c
  2433  001B9A  6ED9               	movwf	fsr2l,c
  2434  001B9C  0E00               	movlw	high _Motors
  2435  001B9E  201A               	addwfc	?___wmul+1,w,c
  2436  001BA0  6EDA               	movwf	fsr2h,c
  2437  001BA2  50DF               	movf	indf2,w,c
  2438  001BA4  6E2F               	movwf	_StopMotor$1269,c
  2439                           
  2440                           ;pwm.c: 194: Motors[index].duty -= ExponentialProfile(Motors[index].duty, Motors[index].
      +                          minimumDuty, index);
  2441  001BA6  C02B  F019         	movff	StopMotor@index,___wmul@multiplier
  2442  001BAA  C02C  F01A         	movff	StopMotor@index+1,___wmul@multiplier+1
  2443  001BAE  0E00               	movlw	0
  2444  001BB0  6E1C               	movwf	___wmul@multiplicand+1,c
  2445  001BB2  0E0C               	movlw	12
  2446  001BB4  6E1B               	movwf	___wmul@multiplicand,c
  2447  001BB6  EC5E  F010         	call	___wmul	;wreg free
  2448  001BBA  0E05               	movlw	5
  2449  001BBC  2619               	addwf	?___wmul,f,c
  2450  001BBE  0E00               	movlw	0
  2451  001BC0  221A               	addwfc	?___wmul+1,f,c
  2452  001BC2  0E60               	movlw	low _Motors
  2453  001BC4  2419               	addwf	?___wmul,w,c
  2454  001BC6  6ED9               	movwf	fsr2l,c
  2455  001BC8  0E00               	movlw	high _Motors
  2456  001BCA  201A               	addwfc	?___wmul+1,w,c
  2457  001BCC  6EDA               	movwf	fsr2h,c
  2458  001BCE  50DF               	movf	indf2,w,c
  2459  001BD0  6E30               	movwf	_StopMotor$1270,c
  2460                           
  2461                           ;pwm.c: 194: Motors[index].duty -= ExponentialProfile(Motors[index].duty, Motors[index].
      +                          minimumDuty, index);
  2462  001BD2  C02F  F01F         	movff	_StopMotor$1269,ExponentialProfile@target
  2463  001BD6  C02B  F020         	movff	StopMotor@index,ExponentialProfile@index
  2464  001BDA  C02C  F021         	movff	StopMotor@index+1,ExponentialProfile@index+1
  2465  001BDE  5030               	movf	_StopMotor$1270,w,c
  2466  001BE0  EC3A  F00A         	call	_ExponentialProfile
  2467  001BE4  6E2D               	movwf	??_StopMotor& (0+255),c
  2468  001BE6  C02B  F019         	movff	StopMotor@index,___wmul@multiplier
  2469  001BEA  C02C  F01A         	movff	StopMotor@index+1,___wmul@multiplier+1
  2470  001BEE  0E00               	movlw	0
  2471  001BF0  6E1C               	movwf	___wmul@multiplicand+1,c
  2472  001BF2  0E0C               	movlw	12
  2473  001BF4  6E1B               	movwf	___wmul@multiplicand,c
  2474  001BF6  EC5E  F010         	call	___wmul	;wreg free
  2475  001BFA  0E05               	movlw	5
  2476  001BFC  2619               	addwf	?___wmul,f,c
  2477  001BFE  0E00               	movlw	0
  2478  001C00  221A               	addwfc	?___wmul+1,f,c
  2479  001C02  0E60               	movlw	low _Motors
  2480  001C04  2419               	addwf	?___wmul,w,c
  2481  001C06  6ED9               	movwf	fsr2l,c
  2482  001C08  0E00               	movlw	high _Motors
  2483  001C0A  201A               	addwfc	?___wmul+1,w,c
  2484  001C0C  6EDA               	movwf	fsr2h,c
  2485  001C0E  502D               	movf	??_StopMotor,w,c
  2486  001C10  5EDF               	subwf	indf2,f,c
  2487                           
  2488                           ;pwm.c: 195: } else {
  2489  001C12  0012               	return	
  2490  001C14                     l1529:
  2491                           
  2492                           ;pwm.c: 196: Motors[index].duty = 0;
  2493  001C14  C02B  F019         	movff	StopMotor@index,___wmul@multiplier
  2494  001C18  C02C  F01A         	movff	StopMotor@index+1,___wmul@multiplier+1
  2495  001C1C  0E00               	movlw	0
  2496  001C1E  6E1C               	movwf	___wmul@multiplicand+1,c
  2497  001C20  0E0C               	movlw	12
  2498  001C22  6E1B               	movwf	___wmul@multiplicand,c
  2499  001C24  EC5E  F010         	call	___wmul	;wreg free
  2500  001C28  0E05               	movlw	5
  2501  001C2A  2619               	addwf	?___wmul,f,c
  2502  001C2C  0E00               	movlw	0
  2503  001C2E  221A               	addwfc	?___wmul+1,f,c
  2504  001C30  0E60               	movlw	low _Motors
  2505  001C32  2419               	addwf	?___wmul,w,c
  2506  001C34  6ED9               	movwf	fsr2l,c
  2507  001C36  0E00               	movlw	high _Motors
  2508  001C38  201A               	addwfc	?___wmul+1,w,c
  2509  001C3A  6EDA               	movwf	fsr2h,c
  2510  001C3C  0E00               	movlw	0
  2511  001C3E  6EDF               	movwf	indf2,c
  2512                           
  2513                           ;pwm.c: 201: }
  2514                           
  2515                           ;pwm.c: 200: break;
  2516                           
  2517                           ;pwm.c: 199: default:
  2518                           
  2519                           ;pwm.c: 197: }
  2520                           ;pwm.c: 198: break;
  2521  001C40  0012               	return	
  2522  001C42                     l1533:
  2523  001C42  5040               	movf	_AccelType,w,c
  2524                           
  2525                           ; Switch size 1, requested type "space"
  2526                           ; Number of cases is 3, Range of values is 0 to 2
  2527                           ; switch strategies available:
  2528                           ; Name         Instructions Cycles
  2529                           ; simple_byte           10     6 (average)
  2530                           ;	Chosen strategy is simple_byte
  2531  001C44  0A00               	xorlw	0	; case 0
  2532  001C46  B4D8               	btfsc	status,2,c
  2533  001C48  D6FC               	goto	l1517
  2534  001C4A  0A01               	xorlw	1	; case 1
  2535  001C4C  B4D8               	btfsc	status,2,c
  2536  001C4E  D710               	goto	l1519
  2537  001C50  0A03               	xorlw	3	; case 2
  2538  001C52  A4D8               	btfss	status,2,c
  2539  001C54  0012               	return	
  2540  001C56  D765               	goto	l1525
  2541  001C58                     __end_of_StopMotor:
  2542                           	opt stack 0
  2543                           tblptru	equ	0xFF8
  2544                           tblptrh	equ	0xFF7
  2545                           tblptrl	equ	0xFF6
  2546                           tablat	equ	0xFF5
  2547                           intcon	equ	0xFF2
  2548                           intcon2	equ	0xFF1
  2549                           postinc0	equ	0xFEE
  2550                           wreg	equ	0xFE8
  2551                           indf1	equ	0xFE7
  2552                           postinc1	equ	0xFE6
  2553                           fsr1h	equ	0xFE2
  2554                           fsr1l	equ	0xFE1
  2555                           indf2	equ	0xFDF
  2556                           postinc2	equ	0xFDE
  2557                           fsr2h	equ	0xFDA
  2558                           fsr2l	equ	0xFD9
  2559                           status	equ	0xFD8
  2560                           
  2561 ;; *************** function _SetPin *****************
  2562 ;; Defined at:
  2563 ;;		line 10 in file "pwm.c"
  2564 ;; Parameters:    Size  Location     Type
  2565 ;;  pin             1    wreg     unsigned char 
  2566 ;;  value           1   30[COMRAM] unsigned char 
  2567 ;; Auto vars:     Size  Location     Type
  2568 ;;  pin             1   31[COMRAM] unsigned char 
  2569 ;; Return value:  Size  Location     Type
  2570 ;;                  1    wreg      void 
  2571 ;; Registers used:
  2572 ;;		wreg, status,2, status,0
  2573 ;; Tracked objects:
  2574 ;;		On entry : 0/0
  2575 ;;		On exit  : 0/0
  2576 ;;		Unchanged: 0/0
  2577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2578 ;;      Params:         1       0       0       0
  2579 ;;      Locals:         1       0       0       0
  2580 ;;      Temps:          0       0       0       0
  2581 ;;      Totals:         2       0       0       0
  2582 ;;Total ram usage:        2 bytes
  2583 ;; Hardware stack levels used:    1
  2584 ;; Hardware stack levels required when called:    2
  2585 ;; This function calls:
  2586 ;;		Nothing
  2587 ;; This function is called by:
  2588 ;;		_InitPWM
  2589 ;;		_StopMotor
  2590 ;;		_CheckPWMOutput
  2591 ;; This function uses a non-reentrant model
  2592 ;;
  2593                           
  2594                           	psect	text7
  2595  001F98                     __ptext7:
  2596                           	opt stack 0
  2597  001F98                     _SetPin:
  2598                           	opt stack 27
  2599                           
  2600                           ;incstack = 0
  2601                           ;SetPin@pin stored from wreg
  2602  001F98  6E20               	movwf	SetPin@pin,c
  2603                           
  2604                           ;pwm.c: 11: switch (pin) {
  2605  001F9A  D048               	goto	l1441
  2606  001F9C                     l240:
  2607                           
  2608                           ;pwm.c: 13: LATCbits.LC0 = value;
  2609  001F9C  B01F               	btfsc	SetPin@value,0,c
  2610  001F9E  D002               	bra	u1285
  2611  001FA0  908B               	bcf	3979,0,c	;volatile
  2612  001FA2  D001               	bra	u1286
  2613  001FA4                     u1285:
  2614  001FA4  808B               	bsf	3979,0,c	;volatile
  2615  001FA6                     u1286:
  2616                           
  2617                           ;pwm.c: 14: break;
  2618  001FA6  0012               	return	
  2619  001FA8                     l242:
  2620                           
  2621                           ;pwm.c: 16: LATCbits.LC1 = value;
  2622  001FA8  B01F               	btfsc	SetPin@value,0,c
  2623  001FAA  D002               	bra	u1295
  2624  001FAC  928B               	bcf	3979,1,c	;volatile
  2625  001FAE  D001               	bra	u1296
  2626  001FB0                     u1295:
  2627  001FB0  828B               	bsf	3979,1,c	;volatile
  2628  001FB2                     u1296:
  2629                           
  2630                           ;pwm.c: 17: break;
  2631  001FB2  0012               	return	
  2632  001FB4                     l243:
  2633                           
  2634                           ;pwm.c: 19: LATCbits.LC2 = value;
  2635  001FB4  B01F               	btfsc	SetPin@value,0,c
  2636  001FB6  D002               	bra	u1305
  2637  001FB8  948B               	bcf	3979,2,c	;volatile
  2638  001FBA  D001               	bra	u1306
  2639  001FBC                     u1305:
  2640  001FBC  848B               	bsf	3979,2,c	;volatile
  2641  001FBE                     u1306:
  2642                           
  2643                           ;pwm.c: 20: break;
  2644  001FBE  0012               	return	
  2645  001FC0                     l244:
  2646                           
  2647                           ;pwm.c: 22: LATCbits.LC3 = value;
  2648  001FC0  B01F               	btfsc	SetPin@value,0,c
  2649  001FC2  D002               	bra	u1315
  2650  001FC4  968B               	bcf	3979,3,c	;volatile
  2651  001FC6  D001               	bra	u1316
  2652  001FC8                     u1315:
  2653  001FC8  868B               	bsf	3979,3,c	;volatile
  2654  001FCA                     u1316:
  2655                           
  2656                           ;pwm.c: 23: break;
  2657  001FCA  0012               	return	
  2658  001FCC                     l245:
  2659                           
  2660                           ;pwm.c: 25: LATCbits.LC4 = value;
  2661  001FCC  B01F               	btfsc	SetPin@value,0,c
  2662  001FCE  D002               	bra	u1325
  2663  001FD0  988B               	bcf	3979,4,c	;volatile
  2664  001FD2  D001               	bra	u1326
  2665  001FD4                     u1325:
  2666  001FD4  888B               	bsf	3979,4,c	;volatile
  2667  001FD6                     u1326:
  2668                           
  2669                           ;pwm.c: 26: break;
  2670  001FD6  0012               	return	
  2671  001FD8                     l246:
  2672                           
  2673                           ;pwm.c: 28: LATCbits.LC5 = value;
  2674  001FD8  B01F               	btfsc	SetPin@value,0,c
  2675  001FDA  D002               	bra	u1335
  2676  001FDC  9A8B               	bcf	3979,5,c	;volatile
  2677  001FDE  D001               	bra	u1336
  2678  001FE0                     u1335:
  2679  001FE0  8A8B               	bsf	3979,5,c	;volatile
  2680  001FE2                     u1336:
  2681                           
  2682                           ;pwm.c: 29: break;
  2683  001FE2  0012               	return	
  2684  001FE4                     l247:
  2685                           
  2686                           ;pwm.c: 31: LATCbits.LC6 = value;
  2687  001FE4  B01F               	btfsc	SetPin@value,0,c
  2688  001FE6  D002               	bra	u1345
  2689  001FE8  9C8B               	bcf	3979,6,c	;volatile
  2690  001FEA  D001               	bra	u1346
  2691  001FEC                     u1345:
  2692  001FEC  8C8B               	bsf	3979,6,c	;volatile
  2693  001FEE                     u1346:
  2694                           
  2695                           ;pwm.c: 32: break;
  2696  001FEE  0012               	return	
  2697  001FF0                     l248:
  2698                           
  2699                           ;pwm.c: 34: LATCbits.LC7 = value;
  2700  001FF0  B01F               	btfsc	SetPin@value,0,c
  2701  001FF2  D002               	bra	u1355
  2702  001FF4  9E8B               	bcf	3979,7,c	;volatile
  2703  001FF6  D001               	bra	u1356
  2704  001FF8                     u1355:
  2705  001FF8  8E8B               	bsf	3979,7,c	;volatile
  2706  001FFA                     u1356:
  2707                           
  2708                           ;pwm.c: 35: break;
  2709  001FFA  0012               	return	
  2710  001FFC                     l249:
  2711                           
  2712                           ;pwm.c: 37: LATBbits.LB5 = value;
  2713  001FFC  B01F               	btfsc	SetPin@value,0,c
  2714  001FFE  D002               	bra	u1365
  2715  002000  9A8A               	bcf	3978,5,c	;volatile
  2716  002002  D001               	bra	u1366
  2717  002004                     u1365:
  2718  002004  8A8A               	bsf	3978,5,c	;volatile
  2719  002006                     u1366:
  2720                           
  2721                           ;pwm.c: 38: break;
  2722  002006  0012               	return	
  2723  002008                     l250:
  2724                           
  2725                           ;pwm.c: 40: LATBbits.LB7 = value;
  2726  002008  B01F               	btfsc	SetPin@value,0,c
  2727  00200A  D002               	bra	u1375
  2728  00200C  9E8A               	bcf	3978,7,c	;volatile
  2729  00200E  D001               	bra	u1376
  2730  002010                     u1375:
  2731  002010  8E8A               	bsf	3978,7,c	;volatile
  2732  002012                     u1376:
  2733                           
  2734                           ;pwm.c: 41: break;
  2735  002012  0012               	return	
  2736  002014                     l251:
  2737                           
  2738                           ;pwm.c: 43: LATAbits.LA4 = value;
  2739  002014  B01F               	btfsc	SetPin@value,0,c
  2740  002016  D002               	bra	u1385
  2741  002018  9889               	bcf	3977,4,c	;volatile
  2742  00201A  D001               	bra	u1386
  2743  00201C                     u1385:
  2744  00201C  8889               	bsf	3977,4,c	;volatile
  2745  00201E                     u1386:
  2746                           
  2747                           ;pwm.c: 44: break;
  2748  00201E  0012               	return	
  2749  002020                     l252:
  2750                           
  2751                           ;pwm.c: 46: LATAbits.LA5 = value;
  2752  002020  B01F               	btfsc	SetPin@value,0,c
  2753  002022  D002               	bra	u1395
  2754  002024  9A89               	bcf	3977,5,c	;volatile
  2755  002026  D001               	bra	u1396
  2756  002028                     u1395:
  2757  002028  8A89               	bsf	3977,5,c	;volatile
  2758  00202A                     u1396:
  2759                           
  2760                           ;pwm.c: 48: }
  2761                           
  2762                           ;pwm.c: 47: break;
  2763  00202A  0012               	return	
  2764  00202C                     l1441:
  2765  00202C  5020               	movf	SetPin@pin,w,c
  2766                           
  2767                           ; Switch size 1, requested type "space"
  2768                           ; Number of cases is 12, Range of values is 0 to 11
  2769                           ; switch strategies available:
  2770                           ; Name         Instructions Cycles
  2771                           ; simple_byte           37    19 (average)
  2772                           ;	Chosen strategy is simple_byte
  2773  00202E  0A00               	xorlw	0	; case 0
  2774  002030  B4D8               	btfsc	status,2,c
  2775  002032  D7B4               	goto	l240
  2776  002034  0A01               	xorlw	1	; case 1
  2777  002036  B4D8               	btfsc	status,2,c
  2778  002038  D7B7               	goto	l242
  2779  00203A  0A03               	xorlw	3	; case 2
  2780  00203C  B4D8               	btfsc	status,2,c
  2781  00203E  D7BA               	goto	l243
  2782  002040  0A01               	xorlw	1	; case 3
  2783  002042  B4D8               	btfsc	status,2,c
  2784  002044  D7BD               	goto	l244
  2785  002046  0A07               	xorlw	7	; case 4
  2786  002048  B4D8               	btfsc	status,2,c
  2787  00204A  D7C0               	goto	l245
  2788  00204C  0A01               	xorlw	1	; case 5
  2789  00204E  B4D8               	btfsc	status,2,c
  2790  002050  D7C3               	goto	l246
  2791  002052  0A03               	xorlw	3	; case 6
  2792  002054  B4D8               	btfsc	status,2,c
  2793  002056  D7C6               	goto	l247
  2794  002058  0A01               	xorlw	1	; case 7
  2795  00205A  B4D8               	btfsc	status,2,c
  2796  00205C  D7C9               	goto	l248
  2797  00205E  0A0F               	xorlw	15	; case 8
  2798  002060  B4D8               	btfsc	status,2,c
  2799  002062  D7CC               	goto	l249
  2800  002064  0A01               	xorlw	1	; case 9
  2801  002066  B4D8               	btfsc	status,2,c
  2802  002068  D7CF               	goto	l250
  2803  00206A  0A03               	xorlw	3	; case 10
  2804  00206C  B4D8               	btfsc	status,2,c
  2805  00206E  D7D2               	goto	l251
  2806  002070  0A01               	xorlw	1	; case 11
  2807  002072  A4D8               	btfss	status,2,c
  2808  002074  0012               	return	
  2809  002076  D7D4               	goto	l252
  2810  002078                     __end_of_SetPin:
  2811                           	opt stack 0
  2812                           tblptru	equ	0xFF8
  2813                           tblptrh	equ	0xFF7
  2814                           tblptrl	equ	0xFF6
  2815                           tablat	equ	0xFF5
  2816                           intcon	equ	0xFF2
  2817                           intcon2	equ	0xFF1
  2818                           postinc0	equ	0xFEE
  2819                           wreg	equ	0xFE8
  2820                           indf1	equ	0xFE7
  2821                           postinc1	equ	0xFE6
  2822                           fsr1h	equ	0xFE2
  2823                           fsr1l	equ	0xFE1
  2824                           indf2	equ	0xFDF
  2825                           postinc2	equ	0xFDE
  2826                           fsr2h	equ	0xFDA
  2827                           fsr2l	equ	0xFD9
  2828                           status	equ	0xFD8
  2829                           
  2830 ;; *************** function _AccelerateMotor *****************
  2831 ;; Defined at:
  2832 ;;		line 208 in file "pwm.c"
  2833 ;; Parameters:    Size  Location     Type
  2834 ;;  index           2   42[COMRAM] unsigned int 
  2835 ;; Auto vars:     Size  Location     Type
  2836 ;;		None
  2837 ;; Return value:  Size  Location     Type
  2838 ;;                  1    wreg      void 
  2839 ;; Registers used:
  2840 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2841 ;; Tracked objects:
  2842 ;;		On entry : 0/0
  2843 ;;		On exit  : 0/0
  2844 ;;		Unchanged: 0/0
  2845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2846 ;;      Params:         2       0       0       0
  2847 ;;      Locals:         2       0       0       0
  2848 ;;      Temps:          2       0       0       0
  2849 ;;      Totals:         6       0       0       0
  2850 ;;Total ram usage:        6 bytes
  2851 ;; Hardware stack levels used:    1
  2852 ;; Hardware stack levels required when called:    4
  2853 ;; This function calls:
  2854 ;;		_ExponentialProfile
  2855 ;;		___wmul
  2856 ;; This function is called by:
  2857 ;;		_AcceleratePWM
  2858 ;; This function uses a non-reentrant model
  2859 ;;
  2860                           
  2861                           	psect	text8
  2862  000F10                     __ptext8:
  2863                           	opt stack 0
  2864  000F10                     _AccelerateMotor:
  2865                           	opt stack 24
  2866                           
  2867                           ;pwm.c: 209: if (Motors[index].duty < Motors[index].minimumDuty && Motors[index].target 
      +                          >= Motors[index].minimumDuty) {
  2868                           
  2869                           ;incstack = 0
  2870  000F10  C02B  F019         	movff	AccelerateMotor@index,___wmul@multiplier
  2871  000F14  C02C  F01A         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  2872  000F18  0E00               	movlw	0
  2873  000F1A  6E1C               	movwf	___wmul@multiplicand+1,c
  2874  000F1C  0E0C               	movlw	12
  2875  000F1E  6E1B               	movwf	___wmul@multiplicand,c
  2876  000F20  EC5E  F010         	call	___wmul	;wreg free
  2877  000F24  0E0A               	movlw	10
  2878  000F26  2619               	addwf	?___wmul,f,c
  2879  000F28  0E00               	movlw	0
  2880  000F2A  221A               	addwfc	?___wmul+1,f,c
  2881  000F2C  0E60               	movlw	low _Motors
  2882  000F2E  2419               	addwf	?___wmul,w,c
  2883  000F30  6ED9               	movwf	fsr2l,c
  2884  000F32  0E00               	movlw	high _Motors
  2885  000F34  201A               	addwfc	?___wmul+1,w,c
  2886  000F36  6EDA               	movwf	fsr2h,c
  2887  000F38  C02B  F019         	movff	AccelerateMotor@index,___wmul@multiplier
  2888  000F3C  C02C  F01A         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  2889  000F40  0E00               	movlw	0
  2890  000F42  6E1C               	movwf	___wmul@multiplicand+1,c
  2891  000F44  0E0C               	movlw	12
  2892  000F46  6E1B               	movwf	___wmul@multiplicand,c
  2893  000F48  EC5E  F010         	call	___wmul	;wreg free
  2894  000F4C  0E05               	movlw	5
  2895  000F4E  2619               	addwf	?___wmul,f,c
  2896  000F50  0E00               	movlw	0
  2897  000F52  221A               	addwfc	?___wmul+1,f,c
  2898  000F54  0E60               	movlw	low _Motors
  2899  000F56  2419               	addwf	?___wmul,w,c
  2900  000F58  6EE1               	movwf	fsr1l,c
  2901  000F5A  0E00               	movlw	high _Motors
  2902  000F5C  201A               	addwfc	?___wmul+1,w,c
  2903  000F5E  6EE2               	movwf	fsr1h,c
  2904  000F60  50DE               	movf	postinc2,w,c
  2905  000F62  5CE6               	subwf	postinc1,w,c
  2906  000F64  B0D8               	btfsc	status,0,c
  2907  000F66  D057               	goto	l1541
  2908  000F68  C02B  F019         	movff	AccelerateMotor@index,___wmul@multiplier
  2909  000F6C  C02C  F01A         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  2910  000F70  0E00               	movlw	0
  2911  000F72  6E1C               	movwf	___wmul@multiplicand+1,c
  2912  000F74  0E0C               	movlw	12
  2913  000F76  6E1B               	movwf	___wmul@multiplicand,c
  2914  000F78  EC5E  F010         	call	___wmul	;wreg free
  2915  000F7C  0E0A               	movlw	10
  2916  000F7E  2619               	addwf	?___wmul,f,c
  2917  000F80  0E00               	movlw	0
  2918  000F82  221A               	addwfc	?___wmul+1,f,c
  2919  000F84  0E60               	movlw	low _Motors
  2920  000F86  2419               	addwf	?___wmul,w,c
  2921  000F88  6ED9               	movwf	fsr2l,c
  2922  000F8A  0E00               	movlw	high _Motors
  2923  000F8C  201A               	addwfc	?___wmul+1,w,c
  2924  000F8E  6EDA               	movwf	fsr2h,c
  2925  000F90  C02B  F019         	movff	AccelerateMotor@index,___wmul@multiplier
  2926  000F94  C02C  F01A         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  2927  000F98  0E00               	movlw	0
  2928  000F9A  6E1C               	movwf	___wmul@multiplicand+1,c
  2929  000F9C  0E0C               	movlw	12
  2930  000F9E  6E1B               	movwf	___wmul@multiplicand,c
  2931  000FA0  EC5E  F010         	call	___wmul	;wreg free
  2932  000FA4  0E06               	movlw	6
  2933  000FA6  2619               	addwf	?___wmul,f,c
  2934  000FA8  0E00               	movlw	0
  2935  000FAA  221A               	addwfc	?___wmul+1,f,c
  2936  000FAC  0E60               	movlw	low _Motors
  2937  000FAE  2419               	addwf	?___wmul,w,c
  2938  000FB0  6EE1               	movwf	fsr1l,c
  2939  000FB2  0E00               	movlw	high _Motors
  2940  000FB4  201A               	addwfc	?___wmul+1,w,c
  2941  000FB6  6EE2               	movwf	fsr1h,c
  2942  000FB8  50DE               	movf	postinc2,w,c
  2943  000FBA  5CE6               	subwf	postinc1,w,c
  2944  000FBC  A0D8               	btfss	status,0,c
  2945  000FBE  D02B               	goto	l1541
  2946                           
  2947                           ;pwm.c: 210: Motors[index].duty = Motors[index].minimumDuty;
  2948  000FC0  C02B  F019         	movff	AccelerateMotor@index,___wmul@multiplier
  2949  000FC4  C02C  F01A         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  2950  000FC8  0E00               	movlw	0
  2951  000FCA  6E1C               	movwf	___wmul@multiplicand+1,c
  2952  000FCC  0E0C               	movlw	12
  2953  000FCE  6E1B               	movwf	___wmul@multiplicand,c
  2954  000FD0  EC5E  F010         	call	___wmul	;wreg free
  2955  000FD4  0E0A               	movlw	10
  2956  000FD6  2619               	addwf	?___wmul,f,c
  2957  000FD8  0E00               	movlw	0
  2958  000FDA  221A               	addwfc	?___wmul+1,f,c
  2959  000FDC  0E60               	movlw	low _Motors
  2960  000FDE  2419               	addwf	?___wmul,w,c
  2961  000FE0  6ED9               	movwf	fsr2l,c
  2962  000FE2  0E00               	movlw	high _Motors
  2963  000FE4  201A               	addwfc	?___wmul+1,w,c
  2964  000FE6  6EDA               	movwf	fsr2h,c
  2965  000FE8  C02B  F019         	movff	AccelerateMotor@index,___wmul@multiplier
  2966  000FEC  C02C  F01A         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  2967  000FF0  0E00               	movlw	0
  2968  000FF2  6E1C               	movwf	___wmul@multiplicand+1,c
  2969  000FF4  0E0C               	movlw	12
  2970  000FF6  6E1B               	movwf	___wmul@multiplicand,c
  2971  000FF8  EC5E  F010         	call	___wmul	;wreg free
  2972  000FFC  0E05               	movlw	5
  2973  000FFE  2619               	addwf	?___wmul,f,c
  2974  001000  0E00               	movlw	0
  2975  001002  221A               	addwfc	?___wmul+1,f,c
  2976  001004  0E60               	movlw	low _Motors
  2977  001006  2419               	addwf	?___wmul,w,c
  2978  001008  6EE1               	movwf	fsr1l,c
  2979  00100A  0E00               	movlw	high _Motors
  2980  00100C  201A               	addwfc	?___wmul+1,w,c
  2981  00100E  6EE2               	movwf	fsr1h,c
  2982  001010  CFDF FFE7          	movff	indf2,indf1
  2983                           
  2984                           ;pwm.c: 211: } else if (Motors[index].duty <= Motors[index].minimumDuty && Motors[index]
      +                          .target < Motors[index].minimumDuty) {
  2985  001014  D210               	goto	l1567
  2986  001016                     l1541:
  2987  001016  C02B  F019         	movff	AccelerateMotor@index,___wmul@multiplier
  2988  00101A  C02C  F01A         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  2989  00101E  0E00               	movlw	0
  2990  001020  6E1C               	movwf	___wmul@multiplicand+1,c
  2991  001022  0E0C               	movlw	12
  2992  001024  6E1B               	movwf	___wmul@multiplicand,c
  2993  001026  EC5E  F010         	call	___wmul	;wreg free
  2994  00102A  0E05               	movlw	5
  2995  00102C  2619               	addwf	?___wmul,f,c
  2996  00102E  0E00               	movlw	0
  2997  001030  221A               	addwfc	?___wmul+1,f,c
  2998  001032  0E60               	movlw	low _Motors
  2999  001034  2419               	addwf	?___wmul,w,c
  3000  001036  6ED9               	movwf	fsr2l,c
  3001  001038  0E00               	movlw	high _Motors
  3002  00103A  201A               	addwfc	?___wmul+1,w,c
  3003  00103C  6EDA               	movwf	fsr2h,c
  3004  00103E  C02B  F019         	movff	AccelerateMotor@index,___wmul@multiplier
  3005  001042  C02C  F01A         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3006  001046  0E00               	movlw	0
  3007  001048  6E1C               	movwf	___wmul@multiplicand+1,c
  3008  00104A  0E0C               	movlw	12
  3009  00104C  6E1B               	movwf	___wmul@multiplicand,c
  3010  00104E  EC5E  F010         	call	___wmul	;wreg free
  3011  001052  0E0A               	movlw	10
  3012  001054  2619               	addwf	?___wmul,f,c
  3013  001056  0E00               	movlw	0
  3014  001058  221A               	addwfc	?___wmul+1,f,c
  3015  00105A  0E60               	movlw	low _Motors
  3016  00105C  2419               	addwf	?___wmul,w,c
  3017  00105E  6EE1               	movwf	fsr1l,c
  3018  001060  0E00               	movlw	high _Motors
  3019  001062  201A               	addwfc	?___wmul+1,w,c
  3020  001064  6EE2               	movwf	fsr1h,c
  3021  001066  50DE               	movf	postinc2,w,c
  3022  001068  5CE6               	subwf	postinc1,w,c
  3023  00106A  A0D8               	btfss	status,0,c
  3024  00106C  D1E4               	goto	l1567
  3025  00106E  C02B  F019         	movff	AccelerateMotor@index,___wmul@multiplier
  3026  001072  C02C  F01A         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3027  001076  0E00               	movlw	0
  3028  001078  6E1C               	movwf	___wmul@multiplicand+1,c
  3029  00107A  0E0C               	movlw	12
  3030  00107C  6E1B               	movwf	___wmul@multiplicand,c
  3031  00107E  EC5E  F010         	call	___wmul	;wreg free
  3032  001082  0E0A               	movlw	10
  3033  001084  2619               	addwf	?___wmul,f,c
  3034  001086  0E00               	movlw	0
  3035  001088  221A               	addwfc	?___wmul+1,f,c
  3036  00108A  0E60               	movlw	low _Motors
  3037  00108C  2419               	addwf	?___wmul,w,c
  3038  00108E  6ED9               	movwf	fsr2l,c
  3039  001090  0E00               	movlw	high _Motors
  3040  001092  201A               	addwfc	?___wmul+1,w,c
  3041  001094  6EDA               	movwf	fsr2h,c
  3042  001096  C02B  F019         	movff	AccelerateMotor@index,___wmul@multiplier
  3043  00109A  C02C  F01A         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3044  00109E  0E00               	movlw	0
  3045  0010A0  6E1C               	movwf	___wmul@multiplicand+1,c
  3046  0010A2  0E0C               	movlw	12
  3047  0010A4  6E1B               	movwf	___wmul@multiplicand,c
  3048  0010A6  EC5E  F010         	call	___wmul	;wreg free
  3049  0010AA  0E06               	movlw	6
  3050  0010AC  2619               	addwf	?___wmul,f,c
  3051  0010AE  0E00               	movlw	0
  3052  0010B0  221A               	addwfc	?___wmul+1,f,c
  3053  0010B2  0E60               	movlw	low _Motors
  3054  0010B4  2419               	addwf	?___wmul,w,c
  3055  0010B6  6EE1               	movwf	fsr1l,c
  3056  0010B8  0E00               	movlw	high _Motors
  3057  0010BA  201A               	addwfc	?___wmul+1,w,c
  3058  0010BC  6EE2               	movwf	fsr1h,c
  3059  0010BE  50DE               	movf	postinc2,w,c
  3060  0010C0  5CE6               	subwf	postinc1,w,c
  3061  0010C2  B0D8               	btfsc	status,0,c
  3062  0010C4  D1B8               	goto	l1567
  3063                           
  3064                           ;pwm.c: 212: Motors[index].duty = 0;
  3065  0010C6  C02B  F019         	movff	AccelerateMotor@index,___wmul@multiplier
  3066  0010CA  C02C  F01A         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3067  0010CE  0E00               	movlw	0
  3068  0010D0  6E1C               	movwf	___wmul@multiplicand+1,c
  3069  0010D2  0E0C               	movlw	12
  3070  0010D4  6E1B               	movwf	___wmul@multiplicand,c
  3071  0010D6  EC5E  F010         	call	___wmul	;wreg free
  3072  0010DA  0E05               	movlw	5
  3073  0010DC  2619               	addwf	?___wmul,f,c
  3074  0010DE  0E00               	movlw	0
  3075  0010E0  221A               	addwfc	?___wmul+1,f,c
  3076  0010E2  0E60               	movlw	low _Motors
  3077  0010E4  2419               	addwf	?___wmul,w,c
  3078  0010E6  6ED9               	movwf	fsr2l,c
  3079  0010E8  0E00               	movlw	high _Motors
  3080  0010EA  201A               	addwfc	?___wmul+1,w,c
  3081  0010EC  6EDA               	movwf	fsr2h,c
  3082  0010EE  0E00               	movlw	0
  3083  0010F0  6EDF               	movwf	indf2,c
  3084                           
  3085                           ;pwm.c: 213: }
  3086                           ;pwm.c: 214: switch (Motors[index].accelType) {
  3087  0010F2  D1A1               	goto	l1567
  3088  0010F4                     l1547:
  3089                           
  3090                           ;pwm.c: 216: Motors[index].duty = Motors[index].target;
  3091  0010F4  C02B  F019         	movff	AccelerateMotor@index,___wmul@multiplier
  3092  0010F8  C02C  F01A         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3093  0010FC  0E00               	movlw	0
  3094  0010FE  6E1C               	movwf	___wmul@multiplicand+1,c
  3095  001100  0E0C               	movlw	12
  3096  001102  6E1B               	movwf	___wmul@multiplicand,c
  3097  001104  EC5E  F010         	call	___wmul	;wreg free
  3098  001108  0E06               	movlw	6
  3099  00110A  2619               	addwf	?___wmul,f,c
  3100  00110C  0E00               	movlw	0
  3101  00110E  221A               	addwfc	?___wmul+1,f,c
  3102  001110  0E60               	movlw	low _Motors
  3103  001112  2419               	addwf	?___wmul,w,c
  3104  001114  6ED9               	movwf	fsr2l,c
  3105  001116  0E00               	movlw	high _Motors
  3106  001118  201A               	addwfc	?___wmul+1,w,c
  3107  00111A  6EDA               	movwf	fsr2h,c
  3108  00111C  C02B  F019         	movff	AccelerateMotor@index,___wmul@multiplier
  3109  001120  C02C  F01A         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3110  001124  0E00               	movlw	0
  3111  001126  6E1C               	movwf	___wmul@multiplicand+1,c
  3112  001128  0E0C               	movlw	12
  3113  00112A  6E1B               	movwf	___wmul@multiplicand,c
  3114  00112C  EC5E  F010         	call	___wmul	;wreg free
  3115  001130  0E05               	movlw	5
  3116  001132  2619               	addwf	?___wmul,f,c
  3117  001134  0E00               	movlw	0
  3118  001136  221A               	addwfc	?___wmul+1,f,c
  3119  001138  0E60               	movlw	low _Motors
  3120  00113A  2419               	addwf	?___wmul,w,c
  3121  00113C  6EE1               	movwf	fsr1l,c
  3122  00113E  0E00               	movlw	high _Motors
  3123  001140  201A               	addwfc	?___wmul+1,w,c
  3124  001142  6EE2               	movwf	fsr1h,c
  3125  001144  CFDF FFE7          	movff	indf2,indf1
  3126                           
  3127                           ;pwm.c: 217: break;
  3128  001148  0012               	return	
  3129  00114A                     l1549:
  3130                           
  3131                           ;pwm.c: 219: if (Motors[index].duty > Motors[index].target) {
  3132  00114A  C02B  F019         	movff	AccelerateMotor@index,___wmul@multiplier
  3133  00114E  C02C  F01A         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3134  001152  0E00               	movlw	0
  3135  001154  6E1C               	movwf	___wmul@multiplicand+1,c
  3136  001156  0E0C               	movlw	12
  3137  001158  6E1B               	movwf	___wmul@multiplicand,c
  3138  00115A  EC5E  F010         	call	___wmul	;wreg free
  3139  00115E  0E05               	movlw	5
  3140  001160  2619               	addwf	?___wmul,f,c
  3141  001162  0E00               	movlw	0
  3142  001164  221A               	addwfc	?___wmul+1,f,c
  3143  001166  0E60               	movlw	low _Motors
  3144  001168  2419               	addwf	?___wmul,w,c
  3145  00116A  6ED9               	movwf	fsr2l,c
  3146  00116C  0E00               	movlw	high _Motors
  3147  00116E  201A               	addwfc	?___wmul+1,w,c
  3148  001170  6EDA               	movwf	fsr2h,c
  3149  001172  C02B  F019         	movff	AccelerateMotor@index,___wmul@multiplier
  3150  001176  C02C  F01A         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3151  00117A  0E00               	movlw	0
  3152  00117C  6E1C               	movwf	___wmul@multiplicand+1,c
  3153  00117E  0E0C               	movlw	12
  3154  001180  6E1B               	movwf	___wmul@multiplicand,c
  3155  001182  EC5E  F010         	call	___wmul	;wreg free
  3156  001186  0E06               	movlw	6
  3157  001188  2619               	addwf	?___wmul,f,c
  3158  00118A  0E00               	movlw	0
  3159  00118C  221A               	addwfc	?___wmul+1,f,c
  3160  00118E  0E60               	movlw	low _Motors
  3161  001190  2419               	addwf	?___wmul,w,c
  3162  001192  6EE1               	movwf	fsr1l,c
  3163  001194  0E00               	movlw	high _Motors
  3164  001196  201A               	addwfc	?___wmul+1,w,c
  3165  001198  6EE2               	movwf	fsr1h,c
  3166  00119A  50DE               	movf	postinc2,w,c
  3167  00119C  5CE6               	subwf	postinc1,w,c
  3168  00119E  B0D8               	btfsc	status,0,c
  3169  0011A0  D016               	goto	l1553
  3170                           
  3171                           ;pwm.c: 220: Motors[index].duty -= 1;
  3172  0011A2  C02B  F019         	movff	AccelerateMotor@index,___wmul@multiplier
  3173  0011A6  C02C  F01A         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3174  0011AA  0E00               	movlw	0
  3175  0011AC  6E1C               	movwf	___wmul@multiplicand+1,c
  3176  0011AE  0E0C               	movlw	12
  3177  0011B0  6E1B               	movwf	___wmul@multiplicand,c
  3178  0011B2  EC5E  F010         	call	___wmul	;wreg free
  3179  0011B6  0E05               	movlw	5
  3180  0011B8  2619               	addwf	?___wmul,f,c
  3181  0011BA  0E00               	movlw	0
  3182  0011BC  221A               	addwfc	?___wmul+1,f,c
  3183  0011BE  0E60               	movlw	low _Motors
  3184  0011C0  2419               	addwf	?___wmul,w,c
  3185  0011C2  6ED9               	movwf	fsr2l,c
  3186  0011C4  0E00               	movlw	high _Motors
  3187  0011C6  201A               	addwfc	?___wmul+1,w,c
  3188  0011C8  6EDA               	movwf	fsr2h,c
  3189  0011CA  06DF               	decf	indf2,f,c
  3190                           
  3191                           ;pwm.c: 221: } else if (Motors[index].duty < Motors[index].target) {
  3192  0011CC  0012               	return	
  3193  0011CE                     l1553:
  3194  0011CE  C02B  F019         	movff	AccelerateMotor@index,___wmul@multiplier
  3195  0011D2  C02C  F01A         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3196  0011D6  0E00               	movlw	0
  3197  0011D8  6E1C               	movwf	___wmul@multiplicand+1,c
  3198  0011DA  0E0C               	movlw	12
  3199  0011DC  6E1B               	movwf	___wmul@multiplicand,c
  3200  0011DE  EC5E  F010         	call	___wmul	;wreg free
  3201  0011E2  0E06               	movlw	6
  3202  0011E4  2619               	addwf	?___wmul,f,c
  3203  0011E6  0E00               	movlw	0
  3204  0011E8  221A               	addwfc	?___wmul+1,f,c
  3205  0011EA  0E60               	movlw	low _Motors
  3206  0011EC  2419               	addwf	?___wmul,w,c
  3207  0011EE  6ED9               	movwf	fsr2l,c
  3208  0011F0  0E00               	movlw	high _Motors
  3209  0011F2  201A               	addwfc	?___wmul+1,w,c
  3210  0011F4  6EDA               	movwf	fsr2h,c
  3211  0011F6  C02B  F019         	movff	AccelerateMotor@index,___wmul@multiplier
  3212  0011FA  C02C  F01A         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3213  0011FE  0E00               	movlw	0
  3214  001200  6E1C               	movwf	___wmul@multiplicand+1,c
  3215  001202  0E0C               	movlw	12
  3216  001204  6E1B               	movwf	___wmul@multiplicand,c
  3217  001206  EC5E  F010         	call	___wmul	;wreg free
  3218  00120A  0E05               	movlw	5
  3219  00120C  2619               	addwf	?___wmul,f,c
  3220  00120E  0E00               	movlw	0
  3221  001210  221A               	addwfc	?___wmul+1,f,c
  3222  001212  0E60               	movlw	low _Motors
  3223  001214  2419               	addwf	?___wmul,w,c
  3224  001216  6EE1               	movwf	fsr1l,c
  3225  001218  0E00               	movlw	high _Motors
  3226  00121A  201A               	addwfc	?___wmul+1,w,c
  3227  00121C  6EE2               	movwf	fsr1h,c
  3228  00121E  50DE               	movf	postinc2,w,c
  3229  001220  5CE6               	subwf	postinc1,w,c
  3230  001222  B0D8               	btfsc	status,0,c
  3231  001224  0012               	return	
  3232                           
  3233                           ;pwm.c: 222: Motors[index].duty += 1;
  3234  001226  C02B  F019         	movff	AccelerateMotor@index,___wmul@multiplier
  3235  00122A  C02C  F01A         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3236  00122E  0E00               	movlw	0
  3237  001230  6E1C               	movwf	___wmul@multiplicand+1,c
  3238  001232  0E0C               	movlw	12
  3239  001234  6E1B               	movwf	___wmul@multiplicand,c
  3240  001236  EC5E  F010         	call	___wmul	;wreg free
  3241  00123A  0E05               	movlw	5
  3242  00123C  2619               	addwf	?___wmul,f,c
  3243  00123E  0E00               	movlw	0
  3244  001240  221A               	addwfc	?___wmul+1,f,c
  3245  001242  0E60               	movlw	low _Motors
  3246  001244  2419               	addwf	?___wmul,w,c
  3247  001246  6ED9               	movwf	fsr2l,c
  3248  001248  0E00               	movlw	high _Motors
  3249  00124A  201A               	addwfc	?___wmul+1,w,c
  3250  00124C  6EDA               	movwf	fsr2h,c
  3251  00124E  2ADF               	incf	indf2,f,c
  3252                           
  3253                           ;pwm.c: 223: }
  3254                           ;pwm.c: 224: break;
  3255  001250  0012               	return	
  3256  001252                     l1557:
  3257                           
  3258                           ;pwm.c: 226: if (Motors[index].duty > Motors[index].target) {
  3259  001252  C02B  F019         	movff	AccelerateMotor@index,___wmul@multiplier
  3260  001256  C02C  F01A         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3261  00125A  0E00               	movlw	0
  3262  00125C  6E1C               	movwf	___wmul@multiplicand+1,c
  3263  00125E  0E0C               	movlw	12
  3264  001260  6E1B               	movwf	___wmul@multiplicand,c
  3265  001262  EC5E  F010         	call	___wmul	;wreg free
  3266  001266  0E05               	movlw	5
  3267  001268  2619               	addwf	?___wmul,f,c
  3268  00126A  0E00               	movlw	0
  3269  00126C  221A               	addwfc	?___wmul+1,f,c
  3270  00126E  0E60               	movlw	low _Motors
  3271  001270  2419               	addwf	?___wmul,w,c
  3272  001272  6ED9               	movwf	fsr2l,c
  3273  001274  0E00               	movlw	high _Motors
  3274  001276  201A               	addwfc	?___wmul+1,w,c
  3275  001278  6EDA               	movwf	fsr2h,c
  3276  00127A  C02B  F019         	movff	AccelerateMotor@index,___wmul@multiplier
  3277  00127E  C02C  F01A         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3278  001282  0E00               	movlw	0
  3279  001284  6E1C               	movwf	___wmul@multiplicand+1,c
  3280  001286  0E0C               	movlw	12
  3281  001288  6E1B               	movwf	___wmul@multiplicand,c
  3282  00128A  EC5E  F010         	call	___wmul	;wreg free
  3283  00128E  0E06               	movlw	6
  3284  001290  2619               	addwf	?___wmul,f,c
  3285  001292  0E00               	movlw	0
  3286  001294  221A               	addwfc	?___wmul+1,f,c
  3287  001296  0E60               	movlw	low _Motors
  3288  001298  2419               	addwf	?___wmul,w,c
  3289  00129A  6EE1               	movwf	fsr1l,c
  3290  00129C  0E00               	movlw	high _Motors
  3291  00129E  201A               	addwfc	?___wmul+1,w,c
  3292  0012A0  6EE2               	movwf	fsr1h,c
  3293  0012A2  50DE               	movf	postinc2,w,c
  3294  0012A4  5CE6               	subwf	postinc1,w,c
  3295  0012A6  B0D8               	btfsc	status,0,c
  3296  0012A8  D04D               	goto	l1561
  3297                           
  3298                           ;pwm.c: 227: Motors[index].duty -= ExponentialProfile(Motors[index].duty, Motors[index].
      +                          target, index);
  3299  0012AA  C02B  F019         	movff	AccelerateMotor@index,___wmul@multiplier
  3300  0012AE  C02C  F01A         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3301  0012B2  0E00               	movlw	0
  3302  0012B4  6E1C               	movwf	___wmul@multiplicand+1,c
  3303  0012B6  0E0C               	movlw	12
  3304  0012B8  6E1B               	movwf	___wmul@multiplicand,c
  3305  0012BA  EC5E  F010         	call	___wmul	;wreg free
  3306  0012BE  0E06               	movlw	6
  3307  0012C0  2619               	addwf	?___wmul,f,c
  3308  0012C2  0E00               	movlw	0
  3309  0012C4  221A               	addwfc	?___wmul+1,f,c
  3310  0012C6  0E60               	movlw	low _Motors
  3311  0012C8  2419               	addwf	?___wmul,w,c
  3312  0012CA  6ED9               	movwf	fsr2l,c
  3313  0012CC  0E00               	movlw	high _Motors
  3314  0012CE  201A               	addwfc	?___wmul+1,w,c
  3315  0012D0  6EDA               	movwf	fsr2h,c
  3316  0012D2  50DF               	movf	indf2,w,c
  3317  0012D4  6E2F               	movwf	_AccelerateMotor$1271,c
  3318                           
  3319                           ;pwm.c: 227: Motors[index].duty -= ExponentialProfile(Motors[index].duty, Motors[index].
      +                          target, index);
  3320  0012D6  C02B  F019         	movff	AccelerateMotor@index,___wmul@multiplier
  3321  0012DA  C02C  F01A         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3322  0012DE  0E00               	movlw	0
  3323  0012E0  6E1C               	movwf	___wmul@multiplicand+1,c
  3324  0012E2  0E0C               	movlw	12
  3325  0012E4  6E1B               	movwf	___wmul@multiplicand,c
  3326  0012E6  EC5E  F010         	call	___wmul	;wreg free
  3327  0012EA  0E05               	movlw	5
  3328  0012EC  2619               	addwf	?___wmul,f,c
  3329  0012EE  0E00               	movlw	0
  3330  0012F0  221A               	addwfc	?___wmul+1,f,c
  3331  0012F2  0E60               	movlw	low _Motors
  3332  0012F4  2419               	addwf	?___wmul,w,c
  3333  0012F6  6ED9               	movwf	fsr2l,c
  3334  0012F8  0E00               	movlw	high _Motors
  3335  0012FA  201A               	addwfc	?___wmul+1,w,c
  3336  0012FC  6EDA               	movwf	fsr2h,c
  3337  0012FE  50DF               	movf	indf2,w,c
  3338  001300  6E30               	movwf	_AccelerateMotor$1272,c
  3339                           
  3340                           ;pwm.c: 227: Motors[index].duty -= ExponentialProfile(Motors[index].duty, Motors[index].
      +                          target, index);
  3341  001302  C02F  F01F         	movff	_AccelerateMotor$1271,ExponentialProfile@target
  3342  001306  C02B  F020         	movff	AccelerateMotor@index,ExponentialProfile@index
  3343  00130A  C02C  F021         	movff	AccelerateMotor@index+1,ExponentialProfile@index+1
  3344  00130E  5030               	movf	_AccelerateMotor$1272,w,c
  3345  001310  EC3A  F00A         	call	_ExponentialProfile
  3346  001314  6E2D               	movwf	??_AccelerateMotor& (0+255),c
  3347  001316  C02B  F019         	movff	AccelerateMotor@index,___wmul@multiplier
  3348  00131A  C02C  F01A         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3349  00131E  0E00               	movlw	0
  3350  001320  6E1C               	movwf	___wmul@multiplicand+1,c
  3351  001322  0E0C               	movlw	12
  3352  001324  6E1B               	movwf	___wmul@multiplicand,c
  3353  001326  EC5E  F010         	call	___wmul	;wreg free
  3354  00132A  0E05               	movlw	5
  3355  00132C  2619               	addwf	?___wmul,f,c
  3356  00132E  0E00               	movlw	0
  3357  001330  221A               	addwfc	?___wmul+1,f,c
  3358  001332  0E60               	movlw	low _Motors
  3359  001334  2419               	addwf	?___wmul,w,c
  3360  001336  6ED9               	movwf	fsr2l,c
  3361  001338  0E00               	movlw	high _Motors
  3362  00133A  201A               	addwfc	?___wmul+1,w,c
  3363  00133C  6EDA               	movwf	fsr2h,c
  3364  00133E  502D               	movf	??_AccelerateMotor,w,c
  3365  001340  5EDF               	subwf	indf2,f,c
  3366                           
  3367                           ;pwm.c: 228: } else if (Motors[index].duty < Motors[index].target) {
  3368  001342  0012               	return	
  3369  001344                     l1561:
  3370  001344  C02B  F019         	movff	AccelerateMotor@index,___wmul@multiplier
  3371  001348  C02C  F01A         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3372  00134C  0E00               	movlw	0
  3373  00134E  6E1C               	movwf	___wmul@multiplicand+1,c
  3374  001350  0E0C               	movlw	12
  3375  001352  6E1B               	movwf	___wmul@multiplicand,c
  3376  001354  EC5E  F010         	call	___wmul	;wreg free
  3377  001358  0E06               	movlw	6
  3378  00135A  2619               	addwf	?___wmul,f,c
  3379  00135C  0E00               	movlw	0
  3380  00135E  221A               	addwfc	?___wmul+1,f,c
  3381  001360  0E60               	movlw	low _Motors
  3382  001362  2419               	addwf	?___wmul,w,c
  3383  001364  6ED9               	movwf	fsr2l,c
  3384  001366  0E00               	movlw	high _Motors
  3385  001368  201A               	addwfc	?___wmul+1,w,c
  3386  00136A  6EDA               	movwf	fsr2h,c
  3387  00136C  C02B  F019         	movff	AccelerateMotor@index,___wmul@multiplier
  3388  001370  C02C  F01A         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3389  001374  0E00               	movlw	0
  3390  001376  6E1C               	movwf	___wmul@multiplicand+1,c
  3391  001378  0E0C               	movlw	12
  3392  00137A  6E1B               	movwf	___wmul@multiplicand,c
  3393  00137C  EC5E  F010         	call	___wmul	;wreg free
  3394  001380  0E05               	movlw	5
  3395  001382  2619               	addwf	?___wmul,f,c
  3396  001384  0E00               	movlw	0
  3397  001386  221A               	addwfc	?___wmul+1,f,c
  3398  001388  0E60               	movlw	low _Motors
  3399  00138A  2419               	addwf	?___wmul,w,c
  3400  00138C  6EE1               	movwf	fsr1l,c
  3401  00138E  0E00               	movlw	high _Motors
  3402  001390  201A               	addwfc	?___wmul+1,w,c
  3403  001392  6EE2               	movwf	fsr1h,c
  3404  001394  50DE               	movf	postinc2,w,c
  3405  001396  5CE6               	subwf	postinc1,w,c
  3406  001398  B0D8               	btfsc	status,0,c
  3407  00139A  0012               	return	
  3408                           
  3409                           ;pwm.c: 229: Motors[index].duty += ExponentialProfile(Motors[index].duty, Motors[index].
      +                          target, index);
  3410  00139C  C02B  F019         	movff	AccelerateMotor@index,___wmul@multiplier
  3411  0013A0  C02C  F01A         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3412  0013A4  0E00               	movlw	0
  3413  0013A6  6E1C               	movwf	___wmul@multiplicand+1,c
  3414  0013A8  0E0C               	movlw	12
  3415  0013AA  6E1B               	movwf	___wmul@multiplicand,c
  3416  0013AC  EC5E  F010         	call	___wmul	;wreg free
  3417  0013B0  0E06               	movlw	6
  3418  0013B2  2619               	addwf	?___wmul,f,c
  3419  0013B4  0E00               	movlw	0
  3420  0013B6  221A               	addwfc	?___wmul+1,f,c
  3421  0013B8  0E60               	movlw	low _Motors
  3422  0013BA  2419               	addwf	?___wmul,w,c
  3423  0013BC  6ED9               	movwf	fsr2l,c
  3424  0013BE  0E00               	movlw	high _Motors
  3425  0013C0  201A               	addwfc	?___wmul+1,w,c
  3426  0013C2  6EDA               	movwf	fsr2h,c
  3427  0013C4  50DF               	movf	indf2,w,c
  3428  0013C6  6E2F               	movwf	_AccelerateMotor$1271,c
  3429                           
  3430                           ;pwm.c: 229: Motors[index].duty += ExponentialProfile(Motors[index].duty, Motors[index].
      +                          target, index);
  3431  0013C8  C02B  F019         	movff	AccelerateMotor@index,___wmul@multiplier
  3432  0013CC  C02C  F01A         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3433  0013D0  0E00               	movlw	0
  3434  0013D2  6E1C               	movwf	___wmul@multiplicand+1,c
  3435  0013D4  0E0C               	movlw	12
  3436  0013D6  6E1B               	movwf	___wmul@multiplicand,c
  3437  0013D8  EC5E  F010         	call	___wmul	;wreg free
  3438  0013DC  0E05               	movlw	5
  3439  0013DE  2619               	addwf	?___wmul,f,c
  3440  0013E0  0E00               	movlw	0
  3441  0013E2  221A               	addwfc	?___wmul+1,f,c
  3442  0013E4  0E60               	movlw	low _Motors
  3443  0013E6  2419               	addwf	?___wmul,w,c
  3444  0013E8  6ED9               	movwf	fsr2l,c
  3445  0013EA  0E00               	movlw	high _Motors
  3446  0013EC  201A               	addwfc	?___wmul+1,w,c
  3447  0013EE  6EDA               	movwf	fsr2h,c
  3448  0013F0  50DF               	movf	indf2,w,c
  3449  0013F2  6E30               	movwf	_AccelerateMotor$1272,c
  3450                           
  3451                           ;pwm.c: 229: Motors[index].duty += ExponentialProfile(Motors[index].duty, Motors[index].
      +                          target, index);
  3452  0013F4  C02F  F01F         	movff	_AccelerateMotor$1271,ExponentialProfile@target
  3453  0013F8  C02B  F020         	movff	AccelerateMotor@index,ExponentialProfile@index
  3454  0013FC  C02C  F021         	movff	AccelerateMotor@index+1,ExponentialProfile@index+1
  3455  001400  5030               	movf	_AccelerateMotor$1272,w,c
  3456  001402  EC3A  F00A         	call	_ExponentialProfile
  3457  001406  6E2D               	movwf	??_AccelerateMotor& (0+255),c
  3458  001408  C02B  F019         	movff	AccelerateMotor@index,___wmul@multiplier
  3459  00140C  C02C  F01A         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3460  001410  0E00               	movlw	0
  3461  001412  6E1C               	movwf	___wmul@multiplicand+1,c
  3462  001414  0E0C               	movlw	12
  3463  001416  6E1B               	movwf	___wmul@multiplicand,c
  3464  001418  EC5E  F010         	call	___wmul	;wreg free
  3465  00141C  0E05               	movlw	5
  3466  00141E  2619               	addwf	?___wmul,f,c
  3467  001420  0E00               	movlw	0
  3468  001422  221A               	addwfc	?___wmul+1,f,c
  3469  001424  0E60               	movlw	low _Motors
  3470  001426  2419               	addwf	?___wmul,w,c
  3471  001428  6ED9               	movwf	fsr2l,c
  3472  00142A  0E00               	movlw	high _Motors
  3473  00142C  201A               	addwfc	?___wmul+1,w,c
  3474  00142E  6EDA               	movwf	fsr2h,c
  3475  001430  502D               	movf	??_AccelerateMotor,w,c
  3476  001432  26DF               	addwf	indf2,f,c
  3477                           
  3478                           ;pwm.c: 234: }
  3479                           
  3480                           ;pwm.c: 233: break;
  3481                           
  3482                           ;pwm.c: 232: default:
  3483                           
  3484                           ;pwm.c: 230: }
  3485                           ;pwm.c: 231: break;
  3486  001434  0012               	return	
  3487  001436                     l1567:
  3488  001436  C02B  F019         	movff	AccelerateMotor@index,___wmul@multiplier
  3489  00143A  C02C  F01A         	movff	AccelerateMotor@index+1,___wmul@multiplier+1
  3490  00143E  0E00               	movlw	0
  3491  001440  6E1C               	movwf	___wmul@multiplicand+1,c
  3492  001442  0E0C               	movlw	12
  3493  001444  6E1B               	movwf	___wmul@multiplicand,c
  3494  001446  EC5E  F010         	call	___wmul	;wreg free
  3495  00144A  0E08               	movlw	8
  3496  00144C  2619               	addwf	?___wmul,f,c
  3497  00144E  0E00               	movlw	0
  3498  001450  221A               	addwfc	?___wmul+1,f,c
  3499  001452  0E60               	movlw	low _Motors
  3500  001454  2419               	addwf	?___wmul,w,c
  3501  001456  6ED9               	movwf	fsr2l,c
  3502  001458  0E00               	movlw	high _Motors
  3503  00145A  201A               	addwfc	?___wmul+1,w,c
  3504  00145C  6EDA               	movwf	fsr2h,c
  3505  00145E  50DF               	movf	indf2,w,c
  3506                           
  3507                           ; Switch size 1, requested type "space"
  3508                           ; Number of cases is 3, Range of values is 0 to 2
  3509                           ; switch strategies available:
  3510                           ; Name         Instructions Cycles
  3511                           ; simple_byte           10     6 (average)
  3512                           ;	Chosen strategy is simple_byte
  3513  001460  0A00               	xorlw	0	; case 0
  3514  001462  B4D8               	btfsc	status,2,c
  3515  001464  D647               	goto	l1547
  3516  001466  0A01               	xorlw	1	; case 1
  3517  001468  B4D8               	btfsc	status,2,c
  3518  00146A  D66F               	goto	l1549
  3519  00146C  0A03               	xorlw	3	; case 2
  3520  00146E  A4D8               	btfss	status,2,c
  3521  001470  0012               	return	
  3522  001472  D6EF               	goto	l1557
  3523  001474                     __end_of_AccelerateMotor:
  3524                           	opt stack 0
  3525                           tblptru	equ	0xFF8
  3526                           tblptrh	equ	0xFF7
  3527                           tblptrl	equ	0xFF6
  3528                           tablat	equ	0xFF5
  3529                           intcon	equ	0xFF2
  3530                           intcon2	equ	0xFF1
  3531                           postinc0	equ	0xFEE
  3532                           wreg	equ	0xFE8
  3533                           indf1	equ	0xFE7
  3534                           postinc1	equ	0xFE6
  3535                           fsr1h	equ	0xFE2
  3536                           fsr1l	equ	0xFE1
  3537                           indf2	equ	0xFDF
  3538                           postinc2	equ	0xFDE
  3539                           fsr2h	equ	0xFDA
  3540                           fsr2l	equ	0xFD9
  3541                           status	equ	0xFD8
  3542                           
  3543 ;; *************** function _ExponentialProfile *****************
  3544 ;; Defined at:
  3545 ;;		line 117 in file "pwm.c"
  3546 ;; Parameters:    Size  Location     Type
  3547 ;;  current         1    wreg     unsigned char 
  3548 ;;  target          1   30[COMRAM] unsigned char 
  3549 ;;  index           2   31[COMRAM] unsigned int 
  3550 ;; Auto vars:     Size  Location     Type
  3551 ;;  current         1   41[COMRAM] unsigned char 
  3552 ;;  change          1   40[COMRAM] unsigned char 
  3553 ;; Return value:  Size  Location     Type
  3554 ;;                  1    wreg      unsigned char 
  3555 ;; Registers used:
  3556 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3557 ;; Tracked objects:
  3558 ;;		On entry : 0/0
  3559 ;;		On exit  : 0/0
  3560 ;;		Unchanged: 0/0
  3561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3562 ;;      Params:         3       0       0       0
  3563 ;;      Locals:         2       0       0       0
  3564 ;;      Temps:          7       0       0       0
  3565 ;;      Totals:        12       0       0       0
  3566 ;;Total ram usage:       12 bytes
  3567 ;; Hardware stack levels used:    1
  3568 ;; Hardware stack levels required when called:    3
  3569 ;; This function calls:
  3570 ;;		___wmul
  3571 ;; This function is called by:
  3572 ;;		_StopMotor
  3573 ;;		_AccelerateMotor
  3574 ;; This function uses a non-reentrant model
  3575 ;;
  3576                           
  3577                           	psect	text9
  3578  001474                     __ptext9:
  3579                           	opt stack 0
  3580  001474                     _ExponentialProfile:
  3581                           	opt stack 24
  3582                           
  3583                           ;incstack = 0
  3584                           ;ExponentialProfile@current stored from wreg
  3585  001474  6E2A               	movwf	ExponentialProfile@current,c
  3586                           
  3587                           ;pwm.c: 118: unsigned char change = 0;
  3588  001476  0E00               	movlw	0
  3589  001478  6E29               	movwf	ExponentialProfile@change,c
  3590                           
  3591                           ;pwm.c: 119: if (current > target) {
  3592  00147A  502A               	movf	ExponentialProfile@current,w,c
  3593  00147C  5C1F               	subwf	ExponentialProfile@target,w,c
  3594  00147E  B0D8               	btfsc	status,0,c
  3595  001480  D0FD               	goto	l1473
  3596                           
  3597                           ;pwm.c: 121: if (current-Motors[index].minimumDuty > 200) {
  3598  001482  C020  F019         	movff	ExponentialProfile@index,___wmul@multiplier
  3599  001486  C021  F01A         	movff	ExponentialProfile@index+1,___wmul@multiplier+1
  3600  00148A  0E00               	movlw	0
  3601  00148C  6E1C               	movwf	___wmul@multiplicand+1,c
  3602  00148E  0E0C               	movlw	12
  3603  001490  6E1B               	movwf	___wmul@multiplicand,c
  3604  001492  EC5E  F010         	call	___wmul	;wreg free
  3605  001496  0E0A               	movlw	10
  3606  001498  2619               	addwf	?___wmul,f,c
  3607  00149A  0E00               	movlw	0
  3608  00149C  221A               	addwfc	?___wmul+1,f,c
  3609  00149E  0E60               	movlw	low _Motors
  3610  0014A0  2419               	addwf	?___wmul,w,c
  3611  0014A2  6ED9               	movwf	fsr2l,c
  3612  0014A4  0E00               	movlw	high _Motors
  3613  0014A6  201A               	addwfc	?___wmul+1,w,c
  3614  0014A8  6EDA               	movwf	fsr2h,c
  3615  0014AA  50DF               	movf	indf2,w,c
  3616  0014AC  6E22               	movwf	??_ExponentialProfile& (0+255),c
  3617  0014AE  6A23               	clrf	(??_ExponentialProfile+1)& (0+255),c
  3618  0014B0  1E22               	comf	??_ExponentialProfile,f,c
  3619  0014B2  1E23               	comf	??_ExponentialProfile+1,f,c
  3620  0014B4  4A22               	infsnz	??_ExponentialProfile,f,c
  3621  0014B6  2A23               	incf	??_ExponentialProfile+1,f,c
  3622  0014B8  502A               	movf	ExponentialProfile@current,w,c
  3623  0014BA  6E24               	movwf	(??_ExponentialProfile+2)& (0+255),c
  3624  0014BC  6A25               	clrf	(??_ExponentialProfile+3)& (0+255),c
  3625  0014BE  5022               	movf	??_ExponentialProfile,w,c
  3626  0014C0  2624               	addwf	??_ExponentialProfile+2,f,c
  3627  0014C2  5023               	movf	??_ExponentialProfile+1,w,c
  3628  0014C4  2225               	addwfc	??_ExponentialProfile+3,f,c
  3629  0014C6  BE25               	btfsc	??_ExponentialProfile+3,7,c
  3630  0014C8  D008               	goto	l1451
  3631  0014CA  5025               	movf	??_ExponentialProfile+3,w,c
  3632  0014CC  E104               	bnz	u1410
  3633  0014CE  0EC9               	movlw	201
  3634  0014D0  5C24               	subwf	??_ExponentialProfile+2,w,c
  3635  0014D2  A0D8               	btfss	status,0,c
  3636  0014D4  D002               	goto	l1451
  3637  0014D6                     u1410:
  3638                           
  3639                           ;pwm.c: 122: change = 50;
  3640  0014D6  0E32               	movlw	50
  3641  0014D8  D0B1               	goto	L7
  3642  0014DA                     l1451:
  3643  0014DA  C020  F019         	movff	ExponentialProfile@index,___wmul@multiplier
  3644  0014DE  C021  F01A         	movff	ExponentialProfile@index+1,___wmul@multiplier+1
  3645  0014E2  0E00               	movlw	0
  3646  0014E4  6E1C               	movwf	___wmul@multiplicand+1,c
  3647  0014E6  0E0C               	movlw	12
  3648  0014E8  6E1B               	movwf	___wmul@multiplicand,c
  3649  0014EA  EC5E  F010         	call	___wmul	;wreg free
  3650  0014EE  0E0A               	movlw	10
  3651  0014F0  2619               	addwf	?___wmul,f,c
  3652  0014F2  0E00               	movlw	0
  3653  0014F4  221A               	addwfc	?___wmul+1,f,c
  3654  0014F6  0E60               	movlw	low _Motors
  3655  0014F8  2419               	addwf	?___wmul,w,c
  3656  0014FA  6ED9               	movwf	fsr2l,c
  3657  0014FC  0E00               	movlw	high _Motors
  3658  0014FE  201A               	addwfc	?___wmul+1,w,c
  3659  001500  6EDA               	movwf	fsr2h,c
  3660  001502  50DF               	movf	indf2,w,c
  3661  001504  6E22               	movwf	??_ExponentialProfile& (0+255),c
  3662  001506  6A23               	clrf	(??_ExponentialProfile+1)& (0+255),c
  3663  001508  1E22               	comf	??_ExponentialProfile,f,c
  3664  00150A  1E23               	comf	??_ExponentialProfile+1,f,c
  3665  00150C  4A22               	infsnz	??_ExponentialProfile,f,c
  3666  00150E  2A23               	incf	??_ExponentialProfile+1,f,c
  3667  001510  502A               	movf	ExponentialProfile@current,w,c
  3668  001512  6E24               	movwf	(??_ExponentialProfile+2)& (0+255),c
  3669  001514  6A25               	clrf	(??_ExponentialProfile+3)& (0+255),c
  3670  001516  5022               	movf	??_ExponentialProfile,w,c
  3671  001518  2624               	addwf	??_ExponentialProfile+2,f,c
  3672  00151A  5023               	movf	??_ExponentialProfile+1,w,c
  3673  00151C  2225               	addwfc	??_ExponentialProfile+3,f,c
  3674  00151E  BE25               	btfsc	??_ExponentialProfile+3,7,c
  3675  001520  D008               	goto	l1455
  3676  001522  5025               	movf	??_ExponentialProfile+3,w,c
  3677  001524  E104               	bnz	u1420
  3678  001526  0E97               	movlw	151
  3679  001528  5C24               	subwf	??_ExponentialProfile+2,w,c
  3680  00152A  A0D8               	btfss	status,0,c
  3681  00152C  D002               	goto	l1455
  3682  00152E                     u1420:
  3683                           
  3684                           ;pwm.c: 124: change = 25;
  3685  00152E  0E19               	movlw	25
  3686  001530  D085               	goto	L7
  3687  001532                     l1455:
  3688  001532  C020  F019         	movff	ExponentialProfile@index,___wmul@multiplier
  3689  001536  C021  F01A         	movff	ExponentialProfile@index+1,___wmul@multiplier+1
  3690  00153A  0E00               	movlw	0
  3691  00153C  6E1C               	movwf	___wmul@multiplicand+1,c
  3692  00153E  0E0C               	movlw	12
  3693  001540  6E1B               	movwf	___wmul@multiplicand,c
  3694  001542  EC5E  F010         	call	___wmul	;wreg free
  3695  001546  0E0A               	movlw	10
  3696  001548  2619               	addwf	?___wmul,f,c
  3697  00154A  0E00               	movlw	0
  3698  00154C  221A               	addwfc	?___wmul+1,f,c
  3699  00154E  0E60               	movlw	low _Motors
  3700  001550  2419               	addwf	?___wmul,w,c
  3701  001552  6ED9               	movwf	fsr2l,c
  3702  001554  0E00               	movlw	high _Motors
  3703  001556  201A               	addwfc	?___wmul+1,w,c
  3704  001558  6EDA               	movwf	fsr2h,c
  3705  00155A  50DF               	movf	indf2,w,c
  3706  00155C  6E22               	movwf	??_ExponentialProfile& (0+255),c
  3707  00155E  6A23               	clrf	(??_ExponentialProfile+1)& (0+255),c
  3708  001560  1E22               	comf	??_ExponentialProfile,f,c
  3709  001562  1E23               	comf	??_ExponentialProfile+1,f,c
  3710  001564  4A22               	infsnz	??_ExponentialProfile,f,c
  3711  001566  2A23               	incf	??_ExponentialProfile+1,f,c
  3712  001568  502A               	movf	ExponentialProfile@current,w,c
  3713  00156A  6E24               	movwf	(??_ExponentialProfile+2)& (0+255),c
  3714  00156C  6A25               	clrf	(??_ExponentialProfile+3)& (0+255),c
  3715  00156E  5022               	movf	??_ExponentialProfile,w,c
  3716  001570  2624               	addwf	??_ExponentialProfile+2,f,c
  3717  001572  5023               	movf	??_ExponentialProfile+1,w,c
  3718  001574  2225               	addwfc	??_ExponentialProfile+3,f,c
  3719  001576  BE25               	btfsc	??_ExponentialProfile+3,7,c
  3720  001578  D008               	goto	l1459
  3721  00157A  5025               	movf	??_ExponentialProfile+3,w,c
  3722  00157C  E104               	bnz	u1430
  3723  00157E  0E65               	movlw	101
  3724  001580  5C24               	subwf	??_ExponentialProfile+2,w,c
  3725  001582  A0D8               	btfss	status,0,c
  3726  001584  D002               	goto	l1459
  3727  001586                     u1430:
  3728                           
  3729                           ;pwm.c: 126: change = 20;
  3730  001586  0E14               	movlw	20
  3731  001588  D059               	goto	L7
  3732  00158A                     l1459:
  3733  00158A  C020  F019         	movff	ExponentialProfile@index,___wmul@multiplier
  3734  00158E  C021  F01A         	movff	ExponentialProfile@index+1,___wmul@multiplier+1
  3735  001592  0E00               	movlw	0
  3736  001594  6E1C               	movwf	___wmul@multiplicand+1,c
  3737  001596  0E0C               	movlw	12
  3738  001598  6E1B               	movwf	___wmul@multiplicand,c
  3739  00159A  EC5E  F010         	call	___wmul	;wreg free
  3740  00159E  0E0A               	movlw	10
  3741  0015A0  2619               	addwf	?___wmul,f,c
  3742  0015A2  0E00               	movlw	0
  3743  0015A4  221A               	addwfc	?___wmul+1,f,c
  3744  0015A6  0E60               	movlw	low _Motors
  3745  0015A8  2419               	addwf	?___wmul,w,c
  3746  0015AA  6ED9               	movwf	fsr2l,c
  3747  0015AC  0E00               	movlw	high _Motors
  3748  0015AE  201A               	addwfc	?___wmul+1,w,c
  3749  0015B0  6EDA               	movwf	fsr2h,c
  3750  0015B2  50DF               	movf	indf2,w,c
  3751  0015B4  6E22               	movwf	??_ExponentialProfile& (0+255),c
  3752  0015B6  6A23               	clrf	(??_ExponentialProfile+1)& (0+255),c
  3753  0015B8  1E22               	comf	??_ExponentialProfile,f,c
  3754  0015BA  1E23               	comf	??_ExponentialProfile+1,f,c
  3755  0015BC  4A22               	infsnz	??_ExponentialProfile,f,c
  3756  0015BE  2A23               	incf	??_ExponentialProfile+1,f,c
  3757  0015C0  502A               	movf	ExponentialProfile@current,w,c
  3758  0015C2  6E24               	movwf	(??_ExponentialProfile+2)& (0+255),c
  3759  0015C4  6A25               	clrf	(??_ExponentialProfile+3)& (0+255),c
  3760  0015C6  5022               	movf	??_ExponentialProfile,w,c
  3761  0015C8  2624               	addwf	??_ExponentialProfile+2,f,c
  3762  0015CA  5023               	movf	??_ExponentialProfile+1,w,c
  3763  0015CC  2225               	addwfc	??_ExponentialProfile+3,f,c
  3764  0015CE  BE25               	btfsc	??_ExponentialProfile+3,7,c
  3765  0015D0  D008               	goto	l1463
  3766  0015D2  5025               	movf	??_ExponentialProfile+3,w,c
  3767  0015D4  E104               	bnz	u1440
  3768  0015D6  0E4C               	movlw	76
  3769  0015D8  5C24               	subwf	??_ExponentialProfile+2,w,c
  3770  0015DA  A0D8               	btfss	status,0,c
  3771  0015DC  D002               	goto	l1463
  3772  0015DE                     u1440:
  3773                           
  3774                           ;pwm.c: 128: change = 10;
  3775  0015DE  0E0A               	movlw	10
  3776  0015E0  D02D               	goto	L7
  3777  0015E2                     l1463:
  3778  0015E2  C020  F019         	movff	ExponentialProfile@index,___wmul@multiplier
  3779  0015E6  C021  F01A         	movff	ExponentialProfile@index+1,___wmul@multiplier+1
  3780  0015EA  0E00               	movlw	0
  3781  0015EC  6E1C               	movwf	___wmul@multiplicand+1,c
  3782  0015EE  0E0C               	movlw	12
  3783  0015F0  6E1B               	movwf	___wmul@multiplicand,c
  3784  0015F2  EC5E  F010         	call	___wmul	;wreg free
  3785  0015F6  0E0A               	movlw	10
  3786  0015F8  2619               	addwf	?___wmul,f,c
  3787  0015FA  0E00               	movlw	0
  3788  0015FC  221A               	addwfc	?___wmul+1,f,c
  3789  0015FE  0E60               	movlw	low _Motors
  3790  001600  2419               	addwf	?___wmul,w,c
  3791  001602  6ED9               	movwf	fsr2l,c
  3792  001604  0E00               	movlw	high _Motors
  3793  001606  201A               	addwfc	?___wmul+1,w,c
  3794  001608  6EDA               	movwf	fsr2h,c
  3795  00160A  50DF               	movf	indf2,w,c
  3796  00160C  6E22               	movwf	??_ExponentialProfile& (0+255),c
  3797  00160E  6A23               	clrf	(??_ExponentialProfile+1)& (0+255),c
  3798  001610  1E22               	comf	??_ExponentialProfile,f,c
  3799  001612  1E23               	comf	??_ExponentialProfile+1,f,c
  3800  001614  4A22               	infsnz	??_ExponentialProfile,f,c
  3801  001616  2A23               	incf	??_ExponentialProfile+1,f,c
  3802  001618  502A               	movf	ExponentialProfile@current,w,c
  3803  00161A  6E24               	movwf	(??_ExponentialProfile+2)& (0+255),c
  3804  00161C  6A25               	clrf	(??_ExponentialProfile+3)& (0+255),c
  3805  00161E  5022               	movf	??_ExponentialProfile,w,c
  3806  001620  2624               	addwf	??_ExponentialProfile+2,f,c
  3807  001622  5023               	movf	??_ExponentialProfile+1,w,c
  3808  001624  2225               	addwfc	??_ExponentialProfile+3,f,c
  3809  001626  BE25               	btfsc	??_ExponentialProfile+3,7,c
  3810  001628  D008               	goto	l1467
  3811  00162A  5025               	movf	??_ExponentialProfile+3,w,c
  3812  00162C  E104               	bnz	u1450
  3813  00162E  0E33               	movlw	51
  3814  001630  5C24               	subwf	??_ExponentialProfile+2,w,c
  3815  001632  A0D8               	btfss	status,0,c
  3816  001634  D002               	goto	l1467
  3817  001636                     u1450:
  3818                           
  3819                           ;pwm.c: 130: change = 5;
  3820  001636  0E05               	movlw	5
  3821  001638  D001               	goto	L7
  3822  00163A                     l1467:
  3823                           
  3824                           ;pwm.c: 132: change = 1;
  3825  00163A  0E01               	movlw	1
  3826  00163C                     L7:
  3827  00163C  6E29               	movwf	ExponentialProfile@change,c
  3828                           
  3829                           ;pwm.c: 133: }
  3830                           ;pwm.c: 136: if (current-target < change) {
  3831  00163E  5029               	movf	ExponentialProfile@change,w,c
  3832  001640  6E22               	movwf	??_ExponentialProfile& (0+255),c
  3833  001642  6A23               	clrf	(??_ExponentialProfile+1)& (0+255),c
  3834  001644  501F               	movf	ExponentialProfile@target,w,c
  3835  001646  6E24               	movwf	(??_ExponentialProfile+2)& (0+255),c
  3836  001648  6A25               	clrf	(??_ExponentialProfile+3)& (0+255),c
  3837  00164A  1E24               	comf	??_ExponentialProfile+2,f,c
  3838  00164C  1E25               	comf	??_ExponentialProfile+3,f,c
  3839  00164E  4A24               	infsnz	??_ExponentialProfile+2,f,c
  3840  001650  2A25               	incf	??_ExponentialProfile+3,f,c
  3841  001652  502A               	movf	ExponentialProfile@current,w,c
  3842  001654  6E26               	movwf	(??_ExponentialProfile+4)& (0+255),c
  3843  001656  6A27               	clrf	(??_ExponentialProfile+5)& (0+255),c
  3844  001658  5024               	movf	??_ExponentialProfile+2,w,c
  3845  00165A  2626               	addwf	??_ExponentialProfile+4,f,c
  3846  00165C  5025               	movf	??_ExponentialProfile+3,w,c
  3847  00165E  2227               	addwfc	??_ExponentialProfile+5,f,c
  3848  001660  5022               	movf	??_ExponentialProfile,w,c
  3849  001662  5C26               	subwf	??_ExponentialProfile+4,w,c
  3850  001664  5027               	movf	??_ExponentialProfile+5,w,c
  3851  001666  0A80               	xorlw	128
  3852  001668  6E28               	movwf	(??_ExponentialProfile+6)& (0+255),c
  3853  00166A  5023               	movf	??_ExponentialProfile+1,w,c
  3854  00166C  0A80               	xorlw	128
  3855  00166E  5828               	subwfb	(??_ExponentialProfile+6)& (0+255),w,c
  3856  001670  B0D8               	btfsc	status,0,c
  3857  001672  D103               	goto	l1499
  3858                           
  3859                           ;pwm.c: 137: change = (unsigned) current-target;
  3860  001674  501F               	movf	ExponentialProfile@target,w,c
  3861  001676  0800               	sublw	0
  3862  001678  242A               	addwf	ExponentialProfile@current,w,c
  3863  00167A  D0FE               	goto	L8
  3864  00167C                     l1473:
  3865                           
  3866                           ;pwm.c: 141: if (current-Motors[index].minimumDuty > 200) {
  3867  00167C  C020  F019         	movff	ExponentialProfile@index,___wmul@multiplier
  3868  001680  C021  F01A         	movff	ExponentialProfile@index+1,___wmul@multiplier+1
  3869  001684  0E00               	movlw	0
  3870  001686  6E1C               	movwf	___wmul@multiplicand+1,c
  3871  001688  0E0C               	movlw	12
  3872  00168A  6E1B               	movwf	___wmul@multiplicand,c
  3873  00168C  EC5E  F010         	call	___wmul	;wreg free
  3874  001690  0E0A               	movlw	10
  3875  001692  2619               	addwf	?___wmul,f,c
  3876  001694  0E00               	movlw	0
  3877  001696  221A               	addwfc	?___wmul+1,f,c
  3878  001698  0E60               	movlw	low _Motors
  3879  00169A  2419               	addwf	?___wmul,w,c
  3880  00169C  6ED9               	movwf	fsr2l,c
  3881  00169E  0E00               	movlw	high _Motors
  3882  0016A0  201A               	addwfc	?___wmul+1,w,c
  3883  0016A2  6EDA               	movwf	fsr2h,c
  3884  0016A4  50DF               	movf	indf2,w,c
  3885  0016A6  6E22               	movwf	??_ExponentialProfile& (0+255),c
  3886  0016A8  6A23               	clrf	(??_ExponentialProfile+1)& (0+255),c
  3887  0016AA  1E22               	comf	??_ExponentialProfile,f,c
  3888  0016AC  1E23               	comf	??_ExponentialProfile+1,f,c
  3889  0016AE  4A22               	infsnz	??_ExponentialProfile,f,c
  3890  0016B0  2A23               	incf	??_ExponentialProfile+1,f,c
  3891  0016B2  502A               	movf	ExponentialProfile@current,w,c
  3892  0016B4  6E24               	movwf	(??_ExponentialProfile+2)& (0+255),c
  3893  0016B6  6A25               	clrf	(??_ExponentialProfile+3)& (0+255),c
  3894  0016B8  5022               	movf	??_ExponentialProfile,w,c
  3895  0016BA  2624               	addwf	??_ExponentialProfile+2,f,c
  3896  0016BC  5023               	movf	??_ExponentialProfile+1,w,c
  3897  0016BE  2225               	addwfc	??_ExponentialProfile+3,f,c
  3898  0016C0  BE25               	btfsc	??_ExponentialProfile+3,7,c
  3899  0016C2  D00A               	goto	l1477
  3900  0016C4  5025               	movf	??_ExponentialProfile+3,w,c
  3901  0016C6  E104               	bnz	u1470
  3902  0016C8  0EC9               	movlw	201
  3903  0016CA  5C24               	subwf	??_ExponentialProfile+2,w,c
  3904  0016CC  A0D8               	btfss	status,0,c
  3905  0016CE  D004               	goto	l1477
  3906  0016D0                     u1470:
  3907                           
  3908                           ;pwm.c: 142: change = (unsigned) current-target;
  3909  0016D0  501F               	movf	ExponentialProfile@target,w,c
  3910  0016D2  0800               	sublw	0
  3911  0016D4  242A               	addwf	ExponentialProfile@current,w,c
  3912  0016D6  D0B1               	goto	L13
  3913  0016D8                     l1477:
  3914  0016D8  C020  F019         	movff	ExponentialProfile@index,___wmul@multiplier
  3915  0016DC  C021  F01A         	movff	ExponentialProfile@index+1,___wmul@multiplier+1
  3916  0016E0  0E00               	movlw	0
  3917  0016E2  6E1C               	movwf	___wmul@multiplicand+1,c
  3918  0016E4  0E0C               	movlw	12
  3919  0016E6  6E1B               	movwf	___wmul@multiplicand,c
  3920  0016E8  EC5E  F010         	call	___wmul	;wreg free
  3921  0016EC  0E0A               	movlw	10
  3922  0016EE  2619               	addwf	?___wmul,f,c
  3923  0016F0  0E00               	movlw	0
  3924  0016F2  221A               	addwfc	?___wmul+1,f,c
  3925  0016F4  0E60               	movlw	low _Motors
  3926  0016F6  2419               	addwf	?___wmul,w,c
  3927  0016F8  6ED9               	movwf	fsr2l,c
  3928  0016FA  0E00               	movlw	high _Motors
  3929  0016FC  201A               	addwfc	?___wmul+1,w,c
  3930  0016FE  6EDA               	movwf	fsr2h,c
  3931  001700  50DF               	movf	indf2,w,c
  3932  001702  6E22               	movwf	??_ExponentialProfile& (0+255),c
  3933  001704  6A23               	clrf	(??_ExponentialProfile+1)& (0+255),c
  3934  001706  1E22               	comf	??_ExponentialProfile,f,c
  3935  001708  1E23               	comf	??_ExponentialProfile+1,f,c
  3936  00170A  4A22               	infsnz	??_ExponentialProfile,f,c
  3937  00170C  2A23               	incf	??_ExponentialProfile+1,f,c
  3938  00170E  502A               	movf	ExponentialProfile@current,w,c
  3939  001710  6E24               	movwf	(??_ExponentialProfile+2)& (0+255),c
  3940  001712  6A25               	clrf	(??_ExponentialProfile+3)& (0+255),c
  3941  001714  5022               	movf	??_ExponentialProfile,w,c
  3942  001716  2624               	addwf	??_ExponentialProfile+2,f,c
  3943  001718  5023               	movf	??_ExponentialProfile+1,w,c
  3944  00171A  2225               	addwfc	??_ExponentialProfile+3,f,c
  3945  00171C  BE25               	btfsc	??_ExponentialProfile+3,7,c
  3946  00171E  D008               	goto	l1481
  3947  001720  5025               	movf	??_ExponentialProfile+3,w,c
  3948  001722  E104               	bnz	u1480
  3949  001724  0E97               	movlw	151
  3950  001726  5C24               	subwf	??_ExponentialProfile+2,w,c
  3951  001728  A0D8               	btfss	status,0,c
  3952  00172A  D002               	goto	l1481
  3953  00172C                     u1480:
  3954                           
  3955                           ;pwm.c: 144: change = 25;
  3956  00172C  0E19               	movlw	25
  3957  00172E  D085               	goto	L13
  3958  001730                     l1481:
  3959  001730  C020  F019         	movff	ExponentialProfile@index,___wmul@multiplier
  3960  001734  C021  F01A         	movff	ExponentialProfile@index+1,___wmul@multiplier+1
  3961  001738  0E00               	movlw	0
  3962  00173A  6E1C               	movwf	___wmul@multiplicand+1,c
  3963  00173C  0E0C               	movlw	12
  3964  00173E  6E1B               	movwf	___wmul@multiplicand,c
  3965  001740  EC5E  F010         	call	___wmul	;wreg free
  3966  001744  0E0A               	movlw	10
  3967  001746  2619               	addwf	?___wmul,f,c
  3968  001748  0E00               	movlw	0
  3969  00174A  221A               	addwfc	?___wmul+1,f,c
  3970  00174C  0E60               	movlw	low _Motors
  3971  00174E  2419               	addwf	?___wmul,w,c
  3972  001750  6ED9               	movwf	fsr2l,c
  3973  001752  0E00               	movlw	high _Motors
  3974  001754  201A               	addwfc	?___wmul+1,w,c
  3975  001756  6EDA               	movwf	fsr2h,c
  3976  001758  50DF               	movf	indf2,w,c
  3977  00175A  6E22               	movwf	??_ExponentialProfile& (0+255),c
  3978  00175C  6A23               	clrf	(??_ExponentialProfile+1)& (0+255),c
  3979  00175E  1E22               	comf	??_ExponentialProfile,f,c
  3980  001760  1E23               	comf	??_ExponentialProfile+1,f,c
  3981  001762  4A22               	infsnz	??_ExponentialProfile,f,c
  3982  001764  2A23               	incf	??_ExponentialProfile+1,f,c
  3983  001766  502A               	movf	ExponentialProfile@current,w,c
  3984  001768  6E24               	movwf	(??_ExponentialProfile+2)& (0+255),c
  3985  00176A  6A25               	clrf	(??_ExponentialProfile+3)& (0+255),c
  3986  00176C  5022               	movf	??_ExponentialProfile,w,c
  3987  00176E  2624               	addwf	??_ExponentialProfile+2,f,c
  3988  001770  5023               	movf	??_ExponentialProfile+1,w,c
  3989  001772  2225               	addwfc	??_ExponentialProfile+3,f,c
  3990  001774  BE25               	btfsc	??_ExponentialProfile+3,7,c
  3991  001776  D008               	goto	l1485
  3992  001778  5025               	movf	??_ExponentialProfile+3,w,c
  3993  00177A  E104               	bnz	u1490
  3994  00177C  0E65               	movlw	101
  3995  00177E  5C24               	subwf	??_ExponentialProfile+2,w,c
  3996  001780  A0D8               	btfss	status,0,c
  3997  001782  D002               	goto	l1485
  3998  001784                     u1490:
  3999                           
  4000                           ;pwm.c: 146: change = 20;
  4001  001784  0E14               	movlw	20
  4002  001786  D059               	goto	L13
  4003  001788                     l1485:
  4004  001788  C020  F019         	movff	ExponentialProfile@index,___wmul@multiplier
  4005  00178C  C021  F01A         	movff	ExponentialProfile@index+1,___wmul@multiplier+1
  4006  001790  0E00               	movlw	0
  4007  001792  6E1C               	movwf	___wmul@multiplicand+1,c
  4008  001794  0E0C               	movlw	12
  4009  001796  6E1B               	movwf	___wmul@multiplicand,c
  4010  001798  EC5E  F010         	call	___wmul	;wreg free
  4011  00179C  0E0A               	movlw	10
  4012  00179E  2619               	addwf	?___wmul,f,c
  4013  0017A0  0E00               	movlw	0
  4014  0017A2  221A               	addwfc	?___wmul+1,f,c
  4015  0017A4  0E60               	movlw	low _Motors
  4016  0017A6  2419               	addwf	?___wmul,w,c
  4017  0017A8  6ED9               	movwf	fsr2l,c
  4018  0017AA  0E00               	movlw	high _Motors
  4019  0017AC  201A               	addwfc	?___wmul+1,w,c
  4020  0017AE  6EDA               	movwf	fsr2h,c
  4021  0017B0  50DF               	movf	indf2,w,c
  4022  0017B2  6E22               	movwf	??_ExponentialProfile& (0+255),c
  4023  0017B4  6A23               	clrf	(??_ExponentialProfile+1)& (0+255),c
  4024  0017B6  1E22               	comf	??_ExponentialProfile,f,c
  4025  0017B8  1E23               	comf	??_ExponentialProfile+1,f,c
  4026  0017BA  4A22               	infsnz	??_ExponentialProfile,f,c
  4027  0017BC  2A23               	incf	??_ExponentialProfile+1,f,c
  4028  0017BE  502A               	movf	ExponentialProfile@current,w,c
  4029  0017C0  6E24               	movwf	(??_ExponentialProfile+2)& (0+255),c
  4030  0017C2  6A25               	clrf	(??_ExponentialProfile+3)& (0+255),c
  4031  0017C4  5022               	movf	??_ExponentialProfile,w,c
  4032  0017C6  2624               	addwf	??_ExponentialProfile+2,f,c
  4033  0017C8  5023               	movf	??_ExponentialProfile+1,w,c
  4034  0017CA  2225               	addwfc	??_ExponentialProfile+3,f,c
  4035  0017CC  BE25               	btfsc	??_ExponentialProfile+3,7,c
  4036  0017CE  D008               	goto	l1489
  4037  0017D0  5025               	movf	??_ExponentialProfile+3,w,c
  4038  0017D2  E104               	bnz	u1500
  4039  0017D4  0E4C               	movlw	76
  4040  0017D6  5C24               	subwf	??_ExponentialProfile+2,w,c
  4041  0017D8  A0D8               	btfss	status,0,c
  4042  0017DA  D002               	goto	l1489
  4043  0017DC                     u1500:
  4044                           
  4045                           ;pwm.c: 148: change = 10;
  4046  0017DC  0E0A               	movlw	10
  4047  0017DE  D02D               	goto	L13
  4048  0017E0                     l1489:
  4049  0017E0  C020  F019         	movff	ExponentialProfile@index,___wmul@multiplier
  4050  0017E4  C021  F01A         	movff	ExponentialProfile@index+1,___wmul@multiplier+1
  4051  0017E8  0E00               	movlw	0
  4052  0017EA  6E1C               	movwf	___wmul@multiplicand+1,c
  4053  0017EC  0E0C               	movlw	12
  4054  0017EE  6E1B               	movwf	___wmul@multiplicand,c
  4055  0017F0  EC5E  F010         	call	___wmul	;wreg free
  4056  0017F4  0E0A               	movlw	10
  4057  0017F6  2619               	addwf	?___wmul,f,c
  4058  0017F8  0E00               	movlw	0
  4059  0017FA  221A               	addwfc	?___wmul+1,f,c
  4060  0017FC  0E60               	movlw	low _Motors
  4061  0017FE  2419               	addwf	?___wmul,w,c
  4062  001800  6ED9               	movwf	fsr2l,c
  4063  001802  0E00               	movlw	high _Motors
  4064  001804  201A               	addwfc	?___wmul+1,w,c
  4065  001806  6EDA               	movwf	fsr2h,c
  4066  001808  50DF               	movf	indf2,w,c
  4067  00180A  6E22               	movwf	??_ExponentialProfile& (0+255),c
  4068  00180C  6A23               	clrf	(??_ExponentialProfile+1)& (0+255),c
  4069  00180E  1E22               	comf	??_ExponentialProfile,f,c
  4070  001810  1E23               	comf	??_ExponentialProfile+1,f,c
  4071  001812  4A22               	infsnz	??_ExponentialProfile,f,c
  4072  001814  2A23               	incf	??_ExponentialProfile+1,f,c
  4073  001816  502A               	movf	ExponentialProfile@current,w,c
  4074  001818  6E24               	movwf	(??_ExponentialProfile+2)& (0+255),c
  4075  00181A  6A25               	clrf	(??_ExponentialProfile+3)& (0+255),c
  4076  00181C  5022               	movf	??_ExponentialProfile,w,c
  4077  00181E  2624               	addwf	??_ExponentialProfile+2,f,c
  4078  001820  5023               	movf	??_ExponentialProfile+1,w,c
  4079  001822  2225               	addwfc	??_ExponentialProfile+3,f,c
  4080  001824  BE25               	btfsc	??_ExponentialProfile+3,7,c
  4081  001826  D008               	goto	l1493
  4082  001828  5025               	movf	??_ExponentialProfile+3,w,c
  4083  00182A  E104               	bnz	u1510
  4084  00182C  0E33               	movlw	51
  4085  00182E  5C24               	subwf	??_ExponentialProfile+2,w,c
  4086  001830  A0D8               	btfss	status,0,c
  4087  001832  D002               	goto	l1493
  4088  001834                     u1510:
  4089                           
  4090                           ;pwm.c: 150: change = 5;
  4091  001834  0E05               	movlw	5
  4092  001836  D001               	goto	L13
  4093  001838                     l1493:
  4094                           
  4095                           ;pwm.c: 152: change = 1;
  4096  001838  0E01               	movlw	1
  4097  00183A                     L13:
  4098  00183A  6E29               	movwf	ExponentialProfile@change,c
  4099                           
  4100                           ;pwm.c: 153: }
  4101                           ;pwm.c: 155: if (target-current < change) {
  4102  00183C  5029               	movf	ExponentialProfile@change,w,c
  4103  00183E  6E22               	movwf	??_ExponentialProfile& (0+255),c
  4104  001840  6A23               	clrf	(??_ExponentialProfile+1)& (0+255),c
  4105  001842  502A               	movf	ExponentialProfile@current,w,c
  4106  001844  6E24               	movwf	(??_ExponentialProfile+2)& (0+255),c
  4107  001846  6A25               	clrf	(??_ExponentialProfile+3)& (0+255),c
  4108  001848  1E24               	comf	??_ExponentialProfile+2,f,c
  4109  00184A  1E25               	comf	??_ExponentialProfile+3,f,c
  4110  00184C  4A24               	infsnz	??_ExponentialProfile+2,f,c
  4111  00184E  2A25               	incf	??_ExponentialProfile+3,f,c
  4112  001850  501F               	movf	ExponentialProfile@target,w,c
  4113  001852  6E26               	movwf	(??_ExponentialProfile+4)& (0+255),c
  4114  001854  6A27               	clrf	(??_ExponentialProfile+5)& (0+255),c
  4115  001856  5024               	movf	??_ExponentialProfile+2,w,c
  4116  001858  2626               	addwf	??_ExponentialProfile+4,f,c
  4117  00185A  5025               	movf	??_ExponentialProfile+3,w,c
  4118  00185C  2227               	addwfc	??_ExponentialProfile+5,f,c
  4119  00185E  5022               	movf	??_ExponentialProfile,w,c
  4120  001860  5C26               	subwf	??_ExponentialProfile+4,w,c
  4121  001862  5027               	movf	??_ExponentialProfile+5,w,c
  4122  001864  0A80               	xorlw	128
  4123  001866  6E28               	movwf	(??_ExponentialProfile+6)& (0+255),c
  4124  001868  5023               	movf	??_ExponentialProfile+1,w,c
  4125  00186A  0A80               	xorlw	128
  4126  00186C  5828               	subwfb	(??_ExponentialProfile+6)& (0+255),w,c
  4127  00186E  B0D8               	btfsc	status,0,c
  4128  001870  D004               	goto	l1499
  4129                           
  4130                           ;pwm.c: 156: change = (unsigned) target-current;
  4131  001872  502A               	movf	ExponentialProfile@current,w,c
  4132  001874  0800               	sublw	0
  4133  001876  241F               	addwf	ExponentialProfile@target,w,c
  4134  001878                     L8:
  4135  001878  6E29               	movwf	ExponentialProfile@change,c
  4136  00187A                     l1499:
  4137                           
  4138                           ;pwm.c: 157: }
  4139                           ;pwm.c: 158: }
  4140                           ;pwm.c: 159: return change;
  4141  00187A  5029               	movf	ExponentialProfile@change,w,c
  4142  00187C  0012               	return	
  4143  00187E                     __end_of_ExponentialProfile:
  4144                           	opt stack 0
  4145                           tblptru	equ	0xFF8
  4146                           tblptrh	equ	0xFF7
  4147                           tblptrl	equ	0xFF6
  4148                           tablat	equ	0xFF5
  4149                           intcon	equ	0xFF2
  4150                           intcon2	equ	0xFF1
  4151                           postinc0	equ	0xFEE
  4152                           wreg	equ	0xFE8
  4153                           indf1	equ	0xFE7
  4154                           postinc1	equ	0xFE6
  4155                           fsr1h	equ	0xFE2
  4156                           fsr1l	equ	0xFE1
  4157                           indf2	equ	0xFDF
  4158                           postinc2	equ	0xFDE
  4159                           fsr2h	equ	0xFDA
  4160                           fsr2l	equ	0xFD9
  4161                           status	equ	0xFD8
  4162                           
  4163 ;; *************** function ___wmul *****************
  4164 ;; Defined at:
  4165 ;;		line 15 in file "/Applications/microchip/xc8/v1.42/sources/common/Umul16.c"
  4166 ;; Parameters:    Size  Location     Type
  4167 ;;  multiplier      2   24[COMRAM] unsigned int 
  4168 ;;  multiplicand    2   26[COMRAM] unsigned int 
  4169 ;; Auto vars:     Size  Location     Type
  4170 ;;  product         2   28[COMRAM] unsigned int 
  4171 ;; Return value:  Size  Location     Type
  4172 ;;                  2   24[COMRAM] unsigned int 
  4173 ;; Registers used:
  4174 ;;		wreg, status,2, status,0, prodl, prodh
  4175 ;; Tracked objects:
  4176 ;;		On entry : 0/0
  4177 ;;		On exit  : 0/0
  4178 ;;		Unchanged: 0/0
  4179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4180 ;;      Params:         4       0       0       0
  4181 ;;      Locals:         2       0       0       0
  4182 ;;      Temps:          0       0       0       0
  4183 ;;      Totals:         6       0       0       0
  4184 ;;Total ram usage:        6 bytes
  4185 ;; Hardware stack levels used:    1
  4186 ;; Hardware stack levels required when called:    2
  4187 ;; This function calls:
  4188 ;;		Nothing
  4189 ;; This function is called by:
  4190 ;;		_InitPWM
  4191 ;;		_ExponentialProfile
  4192 ;;		_StopMotor
  4193 ;;		_AccelerateMotor
  4194 ;;		_AcceleratePWM
  4195 ;;		_CheckPWMOutput
  4196 ;; This function uses a non-reentrant model
  4197 ;;
  4198                           
  4199                           	psect	text10
  4200  0020BC                     __ptext10:
  4201                           	opt stack 0
  4202  0020BC                     ___wmul:
  4203                           	opt stack 27
  4204                           
  4205                           ;incstack = 0
  4206  0020BC  5019               	movf	___wmul@multiplier,w,c
  4207  0020BE  021B               	mulwf	___wmul@multiplicand,c
  4208  0020C0  CFF3 F01D          	movff	prodl,___wmul@product
  4209  0020C4  CFF4 F01E          	movff	prodh,___wmul@product+1
  4210  0020C8  5019               	movf	___wmul@multiplier,w,c
  4211  0020CA  021C               	mulwf	___wmul@multiplicand+1,c
  4212  0020CC  50F3               	movf	prodl,w,c
  4213  0020CE  261E               	addwf	___wmul@product+1,f,c
  4214  0020D0  501A               	movf	___wmul@multiplier+1,w,c
  4215  0020D2  021B               	mulwf	___wmul@multiplicand,c
  4216  0020D4  50F3               	movf	prodl,w,c
  4217  0020D6  261E               	addwf	___wmul@product+1,f,c
  4218  0020D8  C01D  F019         	movff	___wmul@product,?___wmul
  4219  0020DC  C01E  F01A         	movff	___wmul@product+1,?___wmul+1
  4220  0020E0  0012               	return	
  4221  0020E2                     __end_of___wmul:
  4222                           	opt stack 0
  4223                           tblptru	equ	0xFF8
  4224                           tblptrh	equ	0xFF7
  4225                           tblptrl	equ	0xFF6
  4226                           tablat	equ	0xFF5
  4227                           prodh	equ	0xFF4
  4228                           prodl	equ	0xFF3
  4229                           intcon	equ	0xFF2
  4230                           intcon2	equ	0xFF1
  4231                           postinc0	equ	0xFEE
  4232                           wreg	equ	0xFE8
  4233                           indf1	equ	0xFE7
  4234                           postinc1	equ	0xFE6
  4235                           fsr1h	equ	0xFE2
  4236                           fsr1l	equ	0xFE1
  4237                           indf2	equ	0xFDF
  4238                           postinc2	equ	0xFDE
  4239                           fsr2h	equ	0xFDA
  4240                           fsr2l	equ	0xFD9
  4241                           status	equ	0xFD8
  4242                           
  4243 ;; *************** function _I2C_Slave_Read *****************
  4244 ;; Defined at:
  4245 ;;		line 90 in file "i2c.c"
  4246 ;; Parameters:    Size  Location     Type
  4247 ;;		None
  4248 ;; Auto vars:     Size  Location     Type
  4249 ;;		None
  4250 ;; Return value:  Size  Location     Type
  4251 ;;                  1    wreg      void 
  4252 ;; Registers used:
  4253 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4254 ;; Tracked objects:
  4255 ;;		On entry : 0/0
  4256 ;;		On exit  : 0/0
  4257 ;;		Unchanged: 0/0
  4258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4259 ;;      Params:         0       0       0       0
  4260 ;;      Locals:         0       0       0       0
  4261 ;;      Temps:         18       0       0       0
  4262 ;;      Totals:        18       0       0       0
  4263 ;;Total ram usage:       18 bytes
  4264 ;; Hardware stack levels used:    1
  4265 ;; Hardware stack levels required when called:    1
  4266 ;; This function calls:
  4267 ;;		i2___wmul
  4268 ;; This function is called by:
  4269 ;;		Interrupt level 2
  4270 ;; This function uses a non-reentrant model
  4271 ;;
  4272                           
  4273                           	psect	intcode
  4274  000008                     __pintcode:
  4275                           	opt stack 0
  4276  000008                     _I2C_Slave_Read:
  4277                           	opt stack 24
  4278                           
  4279                           ;incstack = 0
  4280  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4281  00000A  CFFA F00B          	movff	pclath,??_I2C_Slave_Read+4
  4282  00000E  CFFB F00C          	movff	pclatu,??_I2C_Slave_Read+5
  4283  000012  CFE9 F00D          	movff	fsr0l,??_I2C_Slave_Read+6
  4284  000016  CFEA F00E          	movff	fsr0h,??_I2C_Slave_Read+7
  4285  00001A  CFE1 F00F          	movff	fsr1l,??_I2C_Slave_Read+8
  4286  00001E  CFE2 F010          	movff	fsr1h,??_I2C_Slave_Read+9
  4287  000022  CFD9 F011          	movff	fsr2l,??_I2C_Slave_Read+10
  4288  000026  CFDA F012          	movff	fsr2h,??_I2C_Slave_Read+11
  4289  00002A  CFF3 F013          	movff	prodl,??_I2C_Slave_Read+12
  4290  00002E  CFF4 F014          	movff	prodh,??_I2C_Slave_Read+13
  4291  000032  CFF6 F015          	movff	tblptrl,??_I2C_Slave_Read+14
  4292  000036  CFF7 F016          	movff	tblptrh,??_I2C_Slave_Read+15
  4293  00003A  CFF8 F017          	movff	tblptru,??_I2C_Slave_Read+16
  4294  00003E  CFF5 F018          	movff	tablat,??_I2C_Slave_Read+17
  4295                           
  4296                           ;i2c.c: 92: if(PIR1bits.SSPIF == 1) {
  4297  000042  A69E               	btfss	3998,3,c	;volatile
  4298  000044  D3EF               	goto	i2l212
  4299                           
  4300                           ;i2c.c: 94: currentByte = SSPBUF;
  4301  000046  CFC9 F03E          	movff	4041,_currentByte	;volatile
  4302                           
  4303                           ;i2c.c: 96: SSPCON1bits.CKP = 0;
  4304  00004A  98C6               	bcf	4038,4,c	;volatile
  4305                           
  4306                           ;i2c.c: 98: if ((SSPCON1bits.SSPOV) || (SSPCON1bits.WCOL)) {
  4307  00004C  BCC6               	btfsc	4038,6,c	;volatile
  4308  00004E  D002               	goto	i2l90
  4309  000050  AEC6               	btfss	4038,7,c	;volatile
  4310  000052  D003               	goto	i2l88
  4311  000054                     i2l90:
  4312                           
  4313                           ;i2c.c: 100: SSPCON1bits.SSPOV = 0;
  4314  000054  9CC6               	bcf	4038,6,c	;volatile
  4315                           
  4316                           ;i2c.c: 102: SSPCON1bits.WCOL = 0;
  4317  000056  9EC6               	bcf	4038,7,c	;volatile
  4318  000058  D299               	goto	i2l1825
  4319  00005A                     i2l88:
  4320  00005A  AAC7               	btfss	4039,5,c	;volatile
  4321  00005C  B4C7               	btfsc	4039,2,c	;volatile
  4322  00005E  D001               	goto	i2l92
  4323  000060  D293               	goto	i2l1823
  4324  000062                     i2l92:
  4325  000062  BAC7               	btfsc	4039,5,c	;volatile
  4326  000064  B4C7               	btfsc	4039,2,c	;volatile
  4327  000066  D294               	goto	i2l94
  4328                           
  4329                           ;i2c.c: 111: if (state == 0) {
  4330  000068  503D               	movf	_state,w,c
  4331  00006A  A4D8               	btfss	status,2,c
  4332  00006C  D214               	goto	i2l1821
  4333                           
  4334                           ;i2c.c: 113: state = currentByte;
  4335  00006E  C03E  F03D         	movff	_currentByte,_state
  4336                           
  4337                           ;i2c.c: 114: } else {
  4338  000072  D28C               	goto	i2l1825
  4339  000074                     i2l1719:
  4340                           
  4341                           ;i2c.c: 118: for (i = 0; i < 4; i++) {
  4342  000074  0E00               	movlw	0
  4343  000076  6E3A               	movwf	_i+1,c
  4344  000078  0E00               	movlw	0
  4345  00007A  6E39               	movwf	_i,c
  4346  00007C  503A               	movf	_i+1,w,c
  4347  00007E  E105               	bnz	i2u212_40
  4348  000080  0E04               	movlw	4
  4349  000082  5C39               	subwf	_i,w,c
  4350  000084  B0D8               	btfsc	status,0,c
  4351  000086  D280               	goto	i2l1823
  4352  000088  D001               	goto	i2l1725
  4353  00008A                     i2u212_40:
  4354  00008A  D27E               	goto	i2l1823
  4355  00008C                     i2l1725:
  4356                           
  4357                           ;i2c.c: 119: if (currentByte < Motors[i].minimumDuty) {
  4358  00008C  C039  F001         	movff	_i,i2___wmul@multiplier
  4359  000090  C03A  F002         	movff	_i+1,i2___wmul@multiplier+1
  4360  000094  0E00               	movlw	0
  4361  000096  6E04               	movwf	i2___wmul@multiplicand+1,c
  4362  000098  0E0C               	movlw	12
  4363  00009A  6E03               	movwf	i2___wmul@multiplicand,c
  4364  00009C  EC71  F010         	call	i2___wmul	;wreg free
  4365  0000A0  0E0A               	movlw	10
  4366  0000A2  2601               	addwf	?i2___wmul,f,c
  4367  0000A4  0E00               	movlw	0
  4368  0000A6  2202               	addwfc	?i2___wmul+1,f,c
  4369  0000A8  0E60               	movlw	low _Motors
  4370  0000AA  2401               	addwf	?i2___wmul,w,c
  4371  0000AC  6ED9               	movwf	fsr2l,c
  4372  0000AE  0E00               	movlw	high _Motors
  4373  0000B0  2002               	addwfc	?i2___wmul+1,w,c
  4374  0000B2  6EDA               	movwf	fsr2h,c
  4375  0000B4  50DE               	movf	postinc2,w,c
  4376  0000B6  5C3E               	subwf	_currentByte,w,c
  4377  0000B8  B0D8               	btfsc	status,0,c
  4378  0000BA  D017               	goto	i2l1729
  4379                           
  4380                           ;i2c.c: 120: Motors[i].target = 0;
  4381  0000BC  C039  F001         	movff	_i,i2___wmul@multiplier
  4382  0000C0  C03A  F002         	movff	_i+1,i2___wmul@multiplier+1
  4383  0000C4  0E00               	movlw	0
  4384  0000C6  6E04               	movwf	i2___wmul@multiplicand+1,c
  4385  0000C8  0E0C               	movlw	12
  4386  0000CA  6E03               	movwf	i2___wmul@multiplicand,c
  4387  0000CC  EC71  F010         	call	i2___wmul	;wreg free
  4388  0000D0  0E06               	movlw	6
  4389  0000D2  2601               	addwf	?i2___wmul,f,c
  4390  0000D4  0E00               	movlw	0
  4391  0000D6  2202               	addwfc	?i2___wmul+1,f,c
  4392  0000D8  0E60               	movlw	low _Motors
  4393  0000DA  2401               	addwf	?i2___wmul,w,c
  4394  0000DC  6ED9               	movwf	fsr2l,c
  4395  0000DE  0E00               	movlw	high _Motors
  4396  0000E0  2002               	addwfc	?i2___wmul+1,w,c
  4397  0000E2  6EDA               	movwf	fsr2h,c
  4398  0000E4  0E00               	movlw	0
  4399  0000E6  6EDF               	movwf	indf2,c
  4400                           
  4401                           ;i2c.c: 121: } else {
  4402  0000E8  D016               	goto	i2l1731
  4403  0000EA                     i2l1729:
  4404                           
  4405                           ;i2c.c: 122: Motors[i].target = currentByte;
  4406  0000EA  C039  F001         	movff	_i,i2___wmul@multiplier
  4407  0000EE  C03A  F002         	movff	_i+1,i2___wmul@multiplier+1
  4408  0000F2  0E00               	movlw	0
  4409  0000F4  6E04               	movwf	i2___wmul@multiplicand+1,c
  4410  0000F6  0E0C               	movlw	12
  4411  0000F8  6E03               	movwf	i2___wmul@multiplicand,c
  4412  0000FA  EC71  F010         	call	i2___wmul	;wreg free
  4413  0000FE  0E06               	movlw	6
  4414  000100  2601               	addwf	?i2___wmul,f,c
  4415  000102  0E00               	movlw	0
  4416  000104  2202               	addwfc	?i2___wmul+1,f,c
  4417  000106  0E60               	movlw	low _Motors
  4418  000108  2401               	addwf	?i2___wmul,w,c
  4419  00010A  6ED9               	movwf	fsr2l,c
  4420  00010C  0E00               	movlw	high _Motors
  4421  00010E  2002               	addwfc	?i2___wmul+1,w,c
  4422  000110  6EDA               	movwf	fsr2h,c
  4423  000112  C03E  FFDF         	movff	_currentByte,indf2
  4424  000116                     i2l1731:
  4425  000116  4A39               	infsnz	_i,f,c
  4426  000118  2A3A               	incf	_i+1,f,c
  4427  00011A  503A               	movf	_i+1,w,c
  4428  00011C  E101               	bnz	i2u214_40
  4429  00011E  D7B0               	goto	L14
  4430  000120                     i2u214_40:
  4431                           
  4432                           ;i2c.c: 123: }
  4433                           ;i2c.c: 124: }
  4434                           ;i2c.c: 125: break;
  4435  000120  D233               	goto	i2l1823
  4436  000122                     i2l1735:
  4437                           
  4438                           ;i2c.c: 127: if (currentByte < Motors[0].minimumDuty) {
  4439  000122  0100               	movlb	0	; () banked
  4440  000124  516A               	movf	(_Motors+10)& (0+255),w,b
  4441  000126  5C3E               	subwf	_currentByte,w,c
  4442  000128  B0D8               	btfsc	status,0,c
  4443  00012A  D004               	goto	i2l105
  4444                           
  4445                           ; BSR set to: 0
  4446                           ;i2c.c: 128: Motors[0].target = 0;
  4447  00012C  0E00               	movlw	0
  4448  00012E  0100               	movlb	0	; () banked
  4449  000130  6F66               	movwf	(_Motors+6)& (0+255),b
  4450                           
  4451                           ;i2c.c: 129: } else {
  4452  000132  D22A               	goto	i2l1823
  4453  000134                     i2l105:
  4454                           
  4455                           ; BSR set to: 0
  4456                           ;i2c.c: 130: Motors[0].target = currentByte;
  4457  000134  C03E  F066         	movff	_currentByte,_Motors+6
  4458                           
  4459                           ; BSR set to: 0
  4460                           ;i2c.c: 131: }
  4461                           ;i2c.c: 132: break;
  4462  000138  D227               	goto	i2l1823
  4463  00013A                     i2l1739:
  4464                           
  4465                           ;i2c.c: 134: if (currentByte < Motors[1].minimumDuty) {
  4466  00013A  0100               	movlb	0	; () banked
  4467  00013C  5176               	movf	(_Motors+22)& (0+255),w,b
  4468  00013E  5C3E               	subwf	_currentByte,w,c
  4469  000140  B0D8               	btfsc	status,0,c
  4470  000142  D004               	goto	i2l108
  4471                           
  4472                           ; BSR set to: 0
  4473                           ;i2c.c: 135: Motors[1].target = 0;
  4474  000144  0E00               	movlw	0
  4475  000146  0100               	movlb	0	; () banked
  4476  000148  6F72               	movwf	(_Motors+18)& (0+255),b
  4477                           
  4478                           ;i2c.c: 136: } else {
  4479  00014A  D21E               	goto	i2l1823
  4480  00014C                     i2l108:
  4481                           
  4482                           ; BSR set to: 0
  4483                           ;i2c.c: 137: Motors[1].target = currentByte;
  4484  00014C  C03E  F072         	movff	_currentByte,_Motors+18
  4485                           
  4486                           ; BSR set to: 0
  4487                           ;i2c.c: 138: }
  4488                           ;i2c.c: 139: break;
  4489  000150  D21B               	goto	i2l1823
  4490  000152                     i2l1743:
  4491                           
  4492                           ;i2c.c: 141: if (currentByte < Motors[2].minimumDuty) {
  4493  000152  0100               	movlb	0	; () banked
  4494  000154  5182               	movf	(_Motors+34)& (0+255),w,b
  4495  000156  5C3E               	subwf	_currentByte,w,c
  4496  000158  B0D8               	btfsc	status,0,c
  4497  00015A  D004               	goto	i2l111
  4498                           
  4499                           ; BSR set to: 0
  4500                           ;i2c.c: 142: Motors[2].target = 0;
  4501  00015C  0E00               	movlw	0
  4502  00015E  0100               	movlb	0	; () banked
  4503  000160  6F7E               	movwf	(_Motors+30)& (0+255),b
  4504                           
  4505                           ;i2c.c: 143: } else {
  4506  000162  D212               	goto	i2l1823
  4507  000164                     i2l111:
  4508                           
  4509                           ; BSR set to: 0
  4510                           ;i2c.c: 144: Motors[2].target = currentByte;
  4511  000164  C03E  F07E         	movff	_currentByte,_Motors+30
  4512                           
  4513                           ; BSR set to: 0
  4514                           ;i2c.c: 145: }
  4515                           ;i2c.c: 146: break;
  4516  000168  D20F               	goto	i2l1823
  4517  00016A                     i2l1747:
  4518                           
  4519                           ;i2c.c: 148: if (currentByte < Motors[3].minimumDuty) {
  4520  00016A  0100               	movlb	0	; () banked
  4521  00016C  518E               	movf	(_Motors+46)& (0+255),w,b
  4522  00016E  5C3E               	subwf	_currentByte,w,c
  4523  000170  B0D8               	btfsc	status,0,c
  4524  000172  D004               	goto	i2l114
  4525                           
  4526                           ; BSR set to: 0
  4527                           ;i2c.c: 149: Motors[3].target = 0;
  4528  000174  0E00               	movlw	0
  4529  000176  0100               	movlb	0	; () banked
  4530  000178  6F8A               	movwf	(_Motors+42)& (0+255),b
  4531                           
  4532                           ;i2c.c: 150: } else {
  4533  00017A  D206               	goto	i2l1823
  4534  00017C                     i2l114:
  4535                           
  4536                           ; BSR set to: 0
  4537                           ;i2c.c: 151: Motors[3].target = currentByte;
  4538  00017C  C03E  F08A         	movff	_currentByte,_Motors+42
  4539                           
  4540                           ; BSR set to: 0
  4541                           ;i2c.c: 152: }
  4542                           ;i2c.c: 153: break;
  4543  000180  D203               	goto	i2l1823
  4544  000182                     i2l1751:
  4545                           
  4546                           ;i2c.c: 156: for (i = 0; i < 4; i++) {
  4547  000182  0E00               	movlw	0
  4548  000184  6E3A               	movwf	_i+1,c
  4549  000186  0E00               	movlw	0
  4550  000188  6E39               	movwf	_i,c
  4551  00018A  503A               	movf	_i+1,w,c
  4552  00018C  E105               	bnz	i2u219_40
  4553  00018E  0E04               	movlw	4
  4554  000190  5C39               	subwf	_i,w,c
  4555  000192  B0D8               	btfsc	status,0,c
  4556  000194  D1F9               	goto	i2l1823
  4557  000196  D001               	goto	i2l1757
  4558  000198                     i2u219_40:
  4559  000198  D1F7               	goto	i2l1823
  4560  00019A                     i2l1757:
  4561                           
  4562                           ;i2c.c: 157: Motors[i].motorType = (unsigned) (currentByte>>(2*i)) & 0b00000011;
  4563  00019A  C039  F001         	movff	_i,i2___wmul@multiplier
  4564  00019E  C03A  F002         	movff	_i+1,i2___wmul@multiplier+1
  4565  0001A2  0E00               	movlw	0
  4566  0001A4  6E04               	movwf	i2___wmul@multiplicand+1,c
  4567  0001A6  0E0C               	movlw	12
  4568  0001A8  6E03               	movwf	i2___wmul@multiplicand,c
  4569  0001AA  EC71  F010         	call	i2___wmul	;wreg free
  4570  0001AE  0E01               	movlw	1
  4571  0001B0  2601               	addwf	?i2___wmul,f,c
  4572  0001B2  0E00               	movlw	0
  4573  0001B4  2202               	addwfc	?i2___wmul+1,f,c
  4574  0001B6  0E60               	movlw	low _Motors
  4575  0001B8  2401               	addwf	?i2___wmul,w,c
  4576  0001BA  6ED9               	movwf	fsr2l,c
  4577  0001BC  0E00               	movlw	high _Motors
  4578  0001BE  2002               	addwfc	?i2___wmul+1,w,c
  4579  0001C0  6EDA               	movwf	fsr2h,c
  4580  0001C2  90D8               	bcf	status,0,c
  4581  0001C4  3439               	rlcf	_i,w,c
  4582  0001C6  6E07               	movwf	??_I2C_Slave_Read& (0+255),c
  4583  0001C8  C03E  F008         	movff	_currentByte,??_I2C_Slave_Read+1
  4584  0001CC  2A07               	incf	??_I2C_Slave_Read,f,c
  4585  0001CE  D002               	goto	i2u220_44
  4586  0001D0                     i2u220_45:
  4587  0001D0  90D8               	bcf	status,0,c
  4588  0001D2  3208               	rrcf	??_I2C_Slave_Read+1,f,c
  4589  0001D4                     i2u220_44:
  4590  0001D4  2E07               	decfsz	??_I2C_Slave_Read,f,c
  4591  0001D6  D7FC               	goto	i2u220_45
  4592  0001D8  5008               	movf	??_I2C_Slave_Read+1,w,c
  4593  0001DA  0B03               	andlw	3
  4594  0001DC  6EDF               	movwf	indf2,c
  4595  0001DE  4A39               	infsnz	_i,f,c
  4596  0001E0  2A3A               	incf	_i+1,f,c
  4597  0001E2  503A               	movf	_i+1,w,c
  4598  0001E4  E101               	bnz	i2u221_40
  4599  0001E6  D7D3               	goto	L15
  4600  0001E8                     i2u221_40:
  4601                           
  4602                           ;i2c.c: 158: }
  4603                           ;i2c.c: 159: break;
  4604  0001E8  D1CF               	goto	i2l1823
  4605  0001EA                     i2l119:
  4606                           
  4607                           ;i2c.c: 161: Motors[0].motorType = currentByte;
  4608  0001EA  C03E  F061         	movff	_currentByte,_Motors+1
  4609                           
  4610                           ;i2c.c: 162: break;
  4611  0001EE  D1CC               	goto	i2l1823
  4612  0001F0                     i2l120:
  4613                           
  4614                           ;i2c.c: 164: Motors[1].motorType = currentByte;
  4615  0001F0  C03E  F06D         	movff	_currentByte,_Motors+13
  4616                           
  4617                           ;i2c.c: 165: break;
  4618  0001F4  D1C9               	goto	i2l1823
  4619  0001F6                     i2l121:
  4620                           
  4621                           ;i2c.c: 167: Motors[2].motorType = currentByte;
  4622  0001F6  C03E  F079         	movff	_currentByte,_Motors+25
  4623                           
  4624                           ;i2c.c: 168: break;
  4625  0001FA  D1C6               	goto	i2l1823
  4626  0001FC                     i2l122:
  4627                           
  4628                           ;i2c.c: 170: Motors[3].motorType = currentByte;
  4629  0001FC  C03E  F085         	movff	_currentByte,_Motors+37
  4630                           
  4631                           ;i2c.c: 171: break;
  4632  000200  D1C3               	goto	i2l1823
  4633  000202                     i2l1763:
  4634                           
  4635                           ;i2c.c: 173: for (i = 0; i < 4; i++) {
  4636  000202  0E00               	movlw	0
  4637  000204  6E3A               	movwf	_i+1,c
  4638  000206  0E00               	movlw	0
  4639  000208  6E39               	movwf	_i,c
  4640  00020A  503A               	movf	_i+1,w,c
  4641  00020C  E105               	bnz	i2u222_40
  4642  00020E  0E04               	movlw	4
  4643  000210  5C39               	subwf	_i,w,c
  4644  000212  B0D8               	btfsc	status,0,c
  4645  000214  D1B9               	goto	i2l1823
  4646  000216  D001               	goto	i2l1769
  4647  000218                     i2u222_40:
  4648  000218  D1B7               	goto	i2l1823
  4649  00021A                     i2l1769:
  4650                           
  4651                           ;i2c.c: 174: if ((currentByte>>(2*i)) & 0b00000011) {
  4652  00021A  90D8               	bcf	status,0,c
  4653  00021C  3439               	rlcf	_i,w,c
  4654  00021E  6E07               	movwf	??_I2C_Slave_Read& (0+255),c
  4655  000220  C03E  F008         	movff	_currentByte,??_I2C_Slave_Read+1
  4656  000224  2A07               	incf	??_I2C_Slave_Read,f,c
  4657  000226  D002               	goto	i2u223_44
  4658  000228                     i2u223_45:
  4659  000228  90D8               	bcf	status,0,c
  4660  00022A  3208               	rrcf	??_I2C_Slave_Read+1,f,c
  4661  00022C                     i2u223_44:
  4662  00022C  2E07               	decfsz	??_I2C_Slave_Read,f,c
  4663  00022E  D7FC               	goto	i2u223_45
  4664  000230  0E03               	movlw	3
  4665  000232  1608               	andwf	??_I2C_Slave_Read+1,f,c
  4666  000234  B4D8               	btfsc	status,2,c
  4667  000236  D013               	goto	i2l1773
  4668                           
  4669                           ;i2c.c: 175: Motors[i].targetDirection = 1;
  4670  000238  C039  F001         	movff	_i,i2___wmul@multiplier
  4671  00023C  C03A  F002         	movff	_i+1,i2___wmul@multiplier+1
  4672  000240  0E00               	movlw	0
  4673  000242  6E04               	movwf	i2___wmul@multiplicand+1,c
  4674  000244  0E0C               	movlw	12
  4675  000246  6E03               	movwf	i2___wmul@multiplicand,c
  4676  000248  EC71  F010         	call	i2___wmul	;wreg free
  4677  00024C  0E60               	movlw	low _Motors
  4678  00024E  2401               	addwf	?i2___wmul,w,c
  4679  000250  6ED9               	movwf	fsr2l,c
  4680  000252  0E00               	movlw	high _Motors
  4681  000254  2002               	addwfc	?i2___wmul+1,w,c
  4682  000256  6EDA               	movwf	fsr2h,c
  4683  000258  0100               	movlb	0	; () banked
  4684  00025A  88DF               	bsf	indf2,4,c
  4685                           
  4686                           ;i2c.c: 176: } else {
  4687  00025C  D012               	goto	i2l1775
  4688  00025E                     i2l1773:
  4689                           
  4690                           ;i2c.c: 177: Motors[i].targetDirection = 0;
  4691  00025E  C039  F001         	movff	_i,i2___wmul@multiplier
  4692  000262  C03A  F002         	movff	_i+1,i2___wmul@multiplier+1
  4693  000266  0E00               	movlw	0
  4694  000268  6E04               	movwf	i2___wmul@multiplicand+1,c
  4695  00026A  0E0C               	movlw	12
  4696  00026C  6E03               	movwf	i2___wmul@multiplicand,c
  4697  00026E  EC71  F010         	call	i2___wmul	;wreg free
  4698  000272  0E60               	movlw	low _Motors
  4699  000274  2401               	addwf	?i2___wmul,w,c
  4700  000276  6ED9               	movwf	fsr2l,c
  4701  000278  0E00               	movlw	high _Motors
  4702  00027A  2002               	addwfc	?i2___wmul+1,w,c
  4703  00027C  6EDA               	movwf	fsr2h,c
  4704  00027E  0100               	movlb	0	; () banked
  4705  000280  98DF               	bcf	indf2,4,c
  4706  000282                     i2l1775:
  4707                           
  4708                           ; BSR set to: 0
  4709  000282  4A39               	infsnz	_i,f,c
  4710  000284  2A3A               	incf	_i+1,f,c
  4711                           
  4712                           ; BSR set to: 0
  4713  000286  503A               	movf	_i+1,w,c
  4714  000288  E101               	bnz	i2u225_40
  4715  00028A  D7C1               	goto	L16
  4716  00028C                     i2u225_40:
  4717                           
  4718                           ; BSR set to: 0
  4719                           ;i2c.c: 178: }
  4720                           ;i2c.c: 179: }
  4721                           ;i2c.c: 180: break;
  4722  00028C  D17D               	goto	i2l1823
  4723  00028E                     i2l128:
  4724                           
  4725                           ;i2c.c: 182: Motors[0].targetDirection = currentByte;
  4726  00028E  B03E               	btfsc	_currentByte,0,c
  4727  000290  D003               	bra	i2u226_45
  4728  000292  0100               	movlb	0	; () banked
  4729  000294  9960               	bcf	_Motors& (0+255),4,b
  4730  000296  D002               	bra	i2u226_46
  4731  000298                     i2u226_45:
  4732  000298  0100               	movlb	0	; () banked
  4733  00029A  8960               	bsf	_Motors& (0+255),4,b
  4734  00029C                     i2u226_46:
  4735                           
  4736                           ;i2c.c: 183: break;
  4737  00029C  D175               	goto	i2l1823
  4738  00029E                     i2l129:
  4739                           
  4740                           ;i2c.c: 185: Motors[1].targetDirection = currentByte;
  4741  00029E  B03E               	btfsc	_currentByte,0,c
  4742  0002A0  D003               	bra	i2u227_45
  4743  0002A2  0100               	movlb	0	; () banked
  4744  0002A4  996C               	bcf	(_Motors+12)& (0+255),4,b
  4745  0002A6  D002               	bra	i2u227_46
  4746  0002A8                     i2u227_45:
  4747  0002A8  0100               	movlb	0	; () banked
  4748  0002AA  896C               	bsf	(_Motors+12)& (0+255),4,b
  4749  0002AC                     i2u227_46:
  4750                           
  4751                           ;i2c.c: 186: break;
  4752  0002AC  D16D               	goto	i2l1823
  4753  0002AE                     i2l130:
  4754                           
  4755                           ;i2c.c: 188: Motors[2].targetDirection = currentByte;
  4756  0002AE  B03E               	btfsc	_currentByte,0,c
  4757  0002B0  D003               	bra	i2u228_45
  4758  0002B2  0100               	movlb	0	; () banked
  4759  0002B4  9978               	bcf	(_Motors+24)& (0+255),4,b
  4760  0002B6  D002               	bra	i2u228_46
  4761  0002B8                     i2u228_45:
  4762  0002B8  0100               	movlb	0	; () banked
  4763  0002BA  8978               	bsf	(_Motors+24)& (0+255),4,b
  4764  0002BC                     i2u228_46:
  4765                           
  4766                           ;i2c.c: 189: break;
  4767  0002BC  D165               	goto	i2l1823
  4768  0002BE                     i2l131:
  4769                           
  4770                           ;i2c.c: 191: Motors[3].targetDirection = currentByte;
  4771  0002BE  B03E               	btfsc	_currentByte,0,c
  4772  0002C0  D003               	bra	i2u229_45
  4773  0002C2  0100               	movlb	0	; () banked
  4774  0002C4  9984               	bcf	(_Motors+36)& (0+255),4,b
  4775  0002C6  D002               	bra	i2u229_46
  4776  0002C8                     i2u229_45:
  4777  0002C8  0100               	movlb	0	; () banked
  4778  0002CA  8984               	bsf	(_Motors+36)& (0+255),4,b
  4779  0002CC                     i2u229_46:
  4780                           
  4781                           ;i2c.c: 192: break;
  4782  0002CC  D15D               	goto	i2l1823
  4783  0002CE                     i2l1779:
  4784                           
  4785                           ;i2c.c: 194: PWMEnable = (unsigned)(currentByte & 0b00000011);
  4786  0002CE  503E               	movf	_currentByte,w,c
  4787  0002D0  0B03               	andlw	3
  4788  0002D2  6E44               	movwf	_PWMEnable,c
  4789                           
  4790                           ;i2c.c: 195: break;
  4791  0002D4  D159               	goto	i2l1823
  4792  0002D6                     i2l133:
  4793                           
  4794                           ;i2c.c: 197: Motors[0].enabled = currentByte;
  4795  0002D6  B03E               	btfsc	_currentByte,0,c
  4796  0002D8  D003               	bra	i2u230_45
  4797  0002DA  0100               	movlb	0	; () banked
  4798  0002DC  9360               	bcf	_Motors& (0+255),1,b
  4799  0002DE  D002               	bra	i2u230_46
  4800  0002E0                     i2u230_45:
  4801  0002E0  0100               	movlb	0	; () banked
  4802  0002E2  8360               	bsf	_Motors& (0+255),1,b
  4803  0002E4                     i2u230_46:
  4804                           
  4805                           ;i2c.c: 198: break;
  4806  0002E4  D151               	goto	i2l1823
  4807  0002E6                     i2l134:
  4808                           
  4809                           ;i2c.c: 200: Motors[1].enabled = currentByte;
  4810  0002E6  B03E               	btfsc	_currentByte,0,c
  4811  0002E8  D003               	bra	i2u231_45
  4812  0002EA  0100               	movlb	0	; () banked
  4813  0002EC  936C               	bcf	(_Motors+12)& (0+255),1,b
  4814  0002EE  D002               	bra	i2u231_46
  4815  0002F0                     i2u231_45:
  4816  0002F0  0100               	movlb	0	; () banked
  4817  0002F2  836C               	bsf	(_Motors+12)& (0+255),1,b
  4818  0002F4                     i2u231_46:
  4819                           
  4820                           ;i2c.c: 201: break;
  4821  0002F4  D149               	goto	i2l1823
  4822  0002F6                     i2l135:
  4823                           
  4824                           ;i2c.c: 203: Motors[2].enabled = currentByte;
  4825  0002F6  B03E               	btfsc	_currentByte,0,c
  4826  0002F8  D003               	bra	i2u232_45
  4827  0002FA  0100               	movlb	0	; () banked
  4828  0002FC  9378               	bcf	(_Motors+24)& (0+255),1,b
  4829  0002FE  D002               	bra	i2u232_46
  4830  000300                     i2u232_45:
  4831  000300  0100               	movlb	0	; () banked
  4832  000302  8378               	bsf	(_Motors+24)& (0+255),1,b
  4833  000304                     i2u232_46:
  4834                           
  4835                           ;i2c.c: 204: break;
  4836  000304  D141               	goto	i2l1823
  4837  000306                     i2l136:
  4838                           
  4839                           ;i2c.c: 206: Motors[3].enabled = currentByte;
  4840  000306  B03E               	btfsc	_currentByte,0,c
  4841  000308  D003               	bra	i2u233_45
  4842  00030A  0100               	movlb	0	; () banked
  4843  00030C  9384               	bcf	(_Motors+36)& (0+255),1,b
  4844  00030E  D002               	bra	i2u233_46
  4845  000310                     i2u233_45:
  4846  000310  0100               	movlb	0	; () banked
  4847  000312  8384               	bsf	(_Motors+36)& (0+255),1,b
  4848  000314                     i2u233_46:
  4849                           
  4850                           ;i2c.c: 207: break;
  4851  000314  D139               	goto	i2l1823
  4852  000316                     i2l1781:
  4853                           
  4854                           ;i2c.c: 209: PWMPause = (unsigned) currentByte & 0b00000011;
  4855  000316  503E               	movf	_currentByte,w,c
  4856  000318  0B03               	andlw	3
  4857  00031A  6E41               	movwf	_PWMPause,c
  4858                           
  4859                           ;i2c.c: 210: break;
  4860  00031C  D135               	goto	i2l1823
  4861  00031E                     i2l138:
  4862                           
  4863                           ;i2c.c: 212: Motors[0].paused = currentByte;
  4864  00031E  B03E               	btfsc	_currentByte,0,c
  4865  000320  D003               	bra	i2u234_45
  4866  000322  0100               	movlb	0	; () banked
  4867  000324  9560               	bcf	_Motors& (0+255),2,b
  4868  000326  D002               	bra	i2u234_46
  4869  000328                     i2u234_45:
  4870  000328  0100               	movlb	0	; () banked
  4871  00032A  8560               	bsf	_Motors& (0+255),2,b
  4872  00032C                     i2u234_46:
  4873                           
  4874                           ;i2c.c: 213: break;
  4875  00032C  D12D               	goto	i2l1823
  4876  00032E                     i2l139:
  4877                           
  4878                           ;i2c.c: 215: Motors[1].paused = currentByte;
  4879  00032E  B03E               	btfsc	_currentByte,0,c
  4880  000330  D003               	bra	i2u235_45
  4881  000332  0100               	movlb	0	; () banked
  4882  000334  956C               	bcf	(_Motors+12)& (0+255),2,b
  4883  000336  D002               	bra	i2u235_46
  4884  000338                     i2u235_45:
  4885  000338  0100               	movlb	0	; () banked
  4886  00033A  856C               	bsf	(_Motors+12)& (0+255),2,b
  4887  00033C                     i2u235_46:
  4888                           
  4889                           ;i2c.c: 216: break;
  4890  00033C  D125               	goto	i2l1823
  4891  00033E                     i2l140:
  4892                           
  4893                           ;i2c.c: 218: Motors[2].paused = currentByte;
  4894  00033E  B03E               	btfsc	_currentByte,0,c
  4895  000340  D003               	bra	i2u236_45
  4896  000342  0100               	movlb	0	; () banked
  4897  000344  9578               	bcf	(_Motors+24)& (0+255),2,b
  4898  000346  D002               	bra	i2u236_46
  4899  000348                     i2u236_45:
  4900  000348  0100               	movlb	0	; () banked
  4901  00034A  8578               	bsf	(_Motors+24)& (0+255),2,b
  4902  00034C                     i2u236_46:
  4903                           
  4904                           ;i2c.c: 219: break;
  4905  00034C  D11D               	goto	i2l1823
  4906  00034E                     i2l141:
  4907                           
  4908                           ;i2c.c: 221: Motors[3].paused = currentByte;
  4909  00034E  B03E               	btfsc	_currentByte,0,c
  4910  000350  D003               	bra	i2u237_45
  4911  000352  0100               	movlb	0	; () banked
  4912  000354  9584               	bcf	(_Motors+36)& (0+255),2,b
  4913  000356  D002               	bra	i2u237_46
  4914  000358                     i2u237_45:
  4915  000358  0100               	movlb	0	; () banked
  4916  00035A  8584               	bsf	(_Motors+36)& (0+255),2,b
  4917  00035C                     i2u237_46:
  4918                           
  4919                           ;i2c.c: 222: break;
  4920  00035C  D115               	goto	i2l1823
  4921  00035E                     i2l1783:
  4922                           
  4923                           ;i2c.c: 224: for (i = 0; i < 4; i++) {
  4924  00035E  0E00               	movlw	0
  4925  000360  6E3A               	movwf	_i+1,c
  4926  000362  0E00               	movlw	0
  4927  000364  6E39               	movwf	_i,c
  4928  000366  503A               	movf	_i+1,w,c
  4929  000368  E105               	bnz	i2u238_40
  4930  00036A  0E04               	movlw	4
  4931  00036C  5C39               	subwf	_i,w,c
  4932  00036E  B0D8               	btfsc	status,0,c
  4933  000370  D10B               	goto	i2l1823
  4934  000372  D001               	goto	i2l1789
  4935  000374                     i2u238_40:
  4936  000374  D109               	goto	i2l1823
  4937  000376                     i2l1789:
  4938                           
  4939                           ;i2c.c: 225: Motors[i].accelType = currentByte;
  4940  000376  C039  F001         	movff	_i,i2___wmul@multiplier
  4941  00037A  C03A  F002         	movff	_i+1,i2___wmul@multiplier+1
  4942  00037E  0E00               	movlw	0
  4943  000380  6E04               	movwf	i2___wmul@multiplicand+1,c
  4944  000382  0E0C               	movlw	12
  4945  000384  6E03               	movwf	i2___wmul@multiplicand,c
  4946  000386  EC71  F010         	call	i2___wmul	;wreg free
  4947  00038A  0E08               	movlw	8
  4948  00038C  2601               	addwf	?i2___wmul,f,c
  4949  00038E  0E00               	movlw	0
  4950  000390  2202               	addwfc	?i2___wmul+1,f,c
  4951  000392  0E60               	movlw	low _Motors
  4952  000394  2401               	addwf	?i2___wmul,w,c
  4953  000396  6ED9               	movwf	fsr2l,c
  4954  000398  0E00               	movlw	high _Motors
  4955  00039A  2002               	addwfc	?i2___wmul+1,w,c
  4956  00039C  6EDA               	movwf	fsr2h,c
  4957  00039E  C03E  FFDF         	movff	_currentByte,indf2
  4958  0003A2  4A39               	infsnz	_i,f,c
  4959  0003A4  2A3A               	incf	_i+1,f,c
  4960  0003A6  503A               	movf	_i+1,w,c
  4961  0003A8  E101               	bnz	i2u239_40
  4962  0003AA  D7DF               	goto	L17
  4963  0003AC                     i2u239_40:
  4964                           
  4965                           ;i2c.c: 226: }
  4966                           ;i2c.c: 227: break;
  4967  0003AC  D0ED               	goto	i2l1823
  4968  0003AE                     i2l145:
  4969                           
  4970                           ;i2c.c: 229: Motors[0].accelType = currentByte;
  4971  0003AE  C03E  F068         	movff	_currentByte,_Motors+8
  4972                           
  4973                           ;i2c.c: 230: break;
  4974  0003B2  D0EA               	goto	i2l1823
  4975  0003B4                     i2l146:
  4976                           
  4977                           ;i2c.c: 232: Motors[1].accelType = currentByte;
  4978  0003B4  C03E  F074         	movff	_currentByte,_Motors+20
  4979                           
  4980                           ;i2c.c: 233: break;
  4981  0003B8  D0E7               	goto	i2l1823
  4982  0003BA                     i2l147:
  4983                           
  4984                           ;i2c.c: 235: Motors[2].accelType = currentByte;
  4985  0003BA  C03E  F080         	movff	_currentByte,_Motors+32
  4986                           
  4987                           ;i2c.c: 236: break;
  4988  0003BE  D0E4               	goto	i2l1823
  4989  0003C0                     i2l148:
  4990                           
  4991                           ;i2c.c: 238: Motors[3].accelType = currentByte;
  4992  0003C0  C03E  F08C         	movff	_currentByte,_Motors+44
  4993                           
  4994                           ;i2c.c: 239: break;
  4995  0003C4  D0E1               	goto	i2l1823
  4996  0003C6                     i2l1795:
  4997                           
  4998                           ;i2c.c: 241: for (i = 0; i < 4; i++) {
  4999  0003C6  0E00               	movlw	0
  5000  0003C8  6E3A               	movwf	_i+1,c
  5001  0003CA  0E00               	movlw	0
  5002  0003CC  6E39               	movwf	_i,c
  5003  0003CE  503A               	movf	_i+1,w,c
  5004  0003D0  E105               	bnz	i2u240_40
  5005  0003D2  0E04               	movlw	4
  5006  0003D4  5C39               	subwf	_i,w,c
  5007  0003D6  B0D8               	btfsc	status,0,c
  5008  0003D8  D0D7               	goto	i2l1823
  5009  0003DA  D001               	goto	i2l1801
  5010  0003DC                     i2u240_40:
  5011  0003DC  D0D5               	goto	i2l1823
  5012  0003DE                     i2l1801:
  5013                           
  5014                           ;i2c.c: 242: Motors[i].accelRate = currentByte;
  5015  0003DE  C039  F001         	movff	_i,i2___wmul@multiplier
  5016  0003E2  C03A  F002         	movff	_i+1,i2___wmul@multiplier+1
  5017  0003E6  0E00               	movlw	0
  5018  0003E8  6E04               	movwf	i2___wmul@multiplicand+1,c
  5019  0003EA  0E0C               	movlw	12
  5020  0003EC  6E03               	movwf	i2___wmul@multiplicand,c
  5021  0003EE  EC71  F010         	call	i2___wmul	;wreg free
  5022  0003F2  0E09               	movlw	9
  5023  0003F4  2601               	addwf	?i2___wmul,f,c
  5024  0003F6  0E00               	movlw	0
  5025  0003F8  2202               	addwfc	?i2___wmul+1,f,c
  5026  0003FA  0E60               	movlw	low _Motors
  5027  0003FC  2401               	addwf	?i2___wmul,w,c
  5028  0003FE  6ED9               	movwf	fsr2l,c
  5029  000400  0E00               	movlw	high _Motors
  5030  000402  2002               	addwfc	?i2___wmul+1,w,c
  5031  000404  6EDA               	movwf	fsr2h,c
  5032  000406  C03E  FFDF         	movff	_currentByte,indf2
  5033  00040A  4A39               	infsnz	_i,f,c
  5034  00040C  2A3A               	incf	_i+1,f,c
  5035  00040E  503A               	movf	_i+1,w,c
  5036  000410  E101               	bnz	i2u241_40
  5037  000412  D7DF               	goto	L18
  5038  000414                     i2u241_40:
  5039                           
  5040                           ;i2c.c: 243: }
  5041                           ;i2c.c: 244: break;
  5042  000414  D0B9               	goto	i2l1823
  5043  000416                     i2l152:
  5044                           
  5045                           ;i2c.c: 246: Motors[0].accelRate = currentByte;
  5046  000416  C03E  F069         	movff	_currentByte,_Motors+9
  5047                           
  5048                           ;i2c.c: 247: break;
  5049  00041A  D0B6               	goto	i2l1823
  5050  00041C                     i2l153:
  5051                           
  5052                           ;i2c.c: 249: Motors[1].accelRate = currentByte;
  5053  00041C  C03E  F075         	movff	_currentByte,_Motors+21
  5054                           
  5055                           ;i2c.c: 250: break;
  5056  000420  D0B3               	goto	i2l1823
  5057  000422                     i2l154:
  5058                           
  5059                           ;i2c.c: 252: Motors[2].accelRate = currentByte;
  5060  000422  C03E  F081         	movff	_currentByte,_Motors+33
  5061                           
  5062                           ;i2c.c: 253: break;
  5063  000426  D0B0               	goto	i2l1823
  5064  000428                     i2l155:
  5065                           
  5066                           ;i2c.c: 255: Motors[3].accelRate = currentByte;
  5067  000428  C03E  F08D         	movff	_currentByte,_Motors+45
  5068                           
  5069                           ;i2c.c: 256: break;
  5070  00042C  D0AD               	goto	i2l1823
  5071  00042E                     i2l1807:
  5072                           
  5073                           ;i2c.c: 258: for (i = 0; i < 4; i++) {
  5074  00042E  0E00               	movlw	0
  5075  000430  6E3A               	movwf	_i+1,c
  5076  000432  0E00               	movlw	0
  5077  000434  6E39               	movwf	_i,c
  5078  000436  503A               	movf	_i+1,w,c
  5079  000438  E105               	bnz	i2u242_40
  5080  00043A  0E04               	movlw	4
  5081  00043C  5C39               	subwf	_i,w,c
  5082  00043E  B0D8               	btfsc	status,0,c
  5083  000440  D0A3               	goto	i2l1823
  5084  000442  D001               	goto	i2l1813
  5085  000444                     i2u242_40:
  5086  000444  D0A1               	goto	i2l1823
  5087  000446                     i2l1813:
  5088                           
  5089                           ;i2c.c: 259: Motors[i].minimumDuty = currentByte;
  5090  000446  C039  F001         	movff	_i,i2___wmul@multiplier
  5091  00044A  C03A  F002         	movff	_i+1,i2___wmul@multiplier+1
  5092  00044E  0E00               	movlw	0
  5093  000450  6E04               	movwf	i2___wmul@multiplicand+1,c
  5094  000452  0E0C               	movlw	12
  5095  000454  6E03               	movwf	i2___wmul@multiplicand,c
  5096  000456  EC71  F010         	call	i2___wmul	;wreg free
  5097  00045A  0E0A               	movlw	10
  5098  00045C  2601               	addwf	?i2___wmul,f,c
  5099  00045E  0E00               	movlw	0
  5100  000460  2202               	addwfc	?i2___wmul+1,f,c
  5101  000462  0E60               	movlw	low _Motors
  5102  000464  2401               	addwf	?i2___wmul,w,c
  5103  000466  6ED9               	movwf	fsr2l,c
  5104  000468  0E00               	movlw	high _Motors
  5105  00046A  2002               	addwfc	?i2___wmul+1,w,c
  5106  00046C  6EDA               	movwf	fsr2h,c
  5107  00046E  C03E  FFDF         	movff	_currentByte,indf2
  5108  000472  4A39               	infsnz	_i,f,c
  5109  000474  2A3A               	incf	_i+1,f,c
  5110  000476  503A               	movf	_i+1,w,c
  5111  000478  E101               	bnz	i2u243_40
  5112  00047A  D7DF               	goto	L19
  5113  00047C                     i2u243_40:
  5114                           
  5115                           ;i2c.c: 260: }
  5116                           ;i2c.c: 261: break;
  5117  00047C  D085               	goto	i2l1823
  5118  00047E                     i2l159:
  5119                           
  5120                           ;i2c.c: 263: Motors[0].minimumDuty = currentByte;
  5121  00047E  C03E  F06A         	movff	_currentByte,_Motors+10
  5122                           
  5123                           ;i2c.c: 264: break;
  5124  000482  D082               	goto	i2l1823
  5125  000484                     i2l160:
  5126                           
  5127                           ;i2c.c: 266: Motors[1].minimumDuty = currentByte;
  5128  000484  C03E  F076         	movff	_currentByte,_Motors+22
  5129                           
  5130                           ;i2c.c: 267: break;
  5131  000488  D07F               	goto	i2l1823
  5132  00048A                     i2l161:
  5133                           
  5134                           ;i2c.c: 269: Motors[2].minimumDuty = currentByte;
  5135  00048A  C03E  F082         	movff	_currentByte,_Motors+34
  5136                           
  5137                           ;i2c.c: 270: break;
  5138  00048E  D07C               	goto	i2l1823
  5139  000490                     i2l162:
  5140                           
  5141                           ;i2c.c: 272: Motors[3].minimumDuty = currentByte;
  5142  000490  C03E  F08E         	movff	_currentByte,_Motors+46
  5143                           
  5144                           ;i2c.c: 274: }
  5145                           
  5146                           ;i2c.c: 273: break;
  5147  000494  D079               	goto	i2l1823
  5148  000496                     i2l1821:
  5149  000496  503D               	movf	_state,w,c
  5150                           
  5151                           ; Switch size 1, requested type "space"
  5152                           ; Number of cases is 40, Range of values is 1 to 40
  5153                           ; switch strategies available:
  5154                           ; Name         Instructions Cycles
  5155                           ; simple_byte          121    61 (average)
  5156                           ;	Chosen strategy is simple_byte
  5157  000498  0A01               	xorlw	1	; case 1
  5158  00049A  B4D8               	btfsc	status,2,c
  5159  00049C  D5EB               	goto	i2l1719
  5160  00049E  0A03               	xorlw	3	; case 2
  5161  0004A0  B4D8               	btfsc	status,2,c
  5162  0004A2  D63F               	goto	i2l1735
  5163  0004A4  0A01               	xorlw	1	; case 3
  5164  0004A6  B4D8               	btfsc	status,2,c
  5165  0004A8  D648               	goto	i2l1739
  5166  0004AA  0A07               	xorlw	7	; case 4
  5167  0004AC  B4D8               	btfsc	status,2,c
  5168  0004AE  D651               	goto	i2l1743
  5169  0004B0  0A01               	xorlw	1	; case 5
  5170  0004B2  B4D8               	btfsc	status,2,c
  5171  0004B4  D65A               	goto	i2l1747
  5172  0004B6  0A03               	xorlw	3	; case 6
  5173  0004B8  B4D8               	btfsc	status,2,c
  5174  0004BA  D663               	goto	i2l1751
  5175  0004BC  0A01               	xorlw	1	; case 7
  5176  0004BE  B4D8               	btfsc	status,2,c
  5177  0004C0  D6A0               	goto	i2l1763
  5178  0004C2  0A0F               	xorlw	15	; case 8
  5179  0004C4  B4D8               	btfsc	status,2,c
  5180  0004C6  D727               	goto	i2l1781
  5181  0004C8  0A01               	xorlw	1	; case 9
  5182  0004CA  B4D8               	btfsc	status,2,c
  5183  0004CC  D700               	goto	i2l1779
  5184  0004CE  0A03               	xorlw	3	; case 10
  5185  0004D0  B4D8               	btfsc	status,2,c
  5186  0004D2  D745               	goto	i2l1783
  5187  0004D4  0A01               	xorlw	1	; case 11
  5188  0004D6  B4D8               	btfsc	status,2,c
  5189  0004D8  D776               	goto	i2l1795
  5190  0004DA  0A07               	xorlw	7	; case 12
  5191  0004DC  B4D8               	btfsc	status,2,c
  5192  0004DE  D7A7               	goto	i2l1807
  5193  0004E0  0A01               	xorlw	1	; case 13
  5194  0004E2  B4D8               	btfsc	status,2,c
  5195  0004E4  D682               	goto	i2l119
  5196  0004E6  0A03               	xorlw	3	; case 14
  5197  0004E8  B4D8               	btfsc	status,2,c
  5198  0004EA  D682               	goto	i2l120
  5199  0004EC  0A01               	xorlw	1	; case 15
  5200  0004EE  B4D8               	btfsc	status,2,c
  5201  0004F0  D682               	goto	i2l121
  5202  0004F2  0A1F               	xorlw	31	; case 16
  5203  0004F4  B4D8               	btfsc	status,2,c
  5204  0004F6  D682               	goto	i2l122
  5205  0004F8  0A01               	xorlw	1	; case 17
  5206  0004FA  B4D8               	btfsc	status,2,c
  5207  0004FC  D6EC               	goto	i2l133
  5208  0004FE  0A03               	xorlw	3	; case 18
  5209  000500  B4D8               	btfsc	status,2,c
  5210  000502  D6F1               	goto	i2l134
  5211  000504  0A01               	xorlw	1	; case 19
  5212  000506  B4D8               	btfsc	status,2,c
  5213  000508  D6F6               	goto	i2l135
  5214  00050A  0A07               	xorlw	7	; case 20
  5215  00050C  B4D8               	btfsc	status,2,c
  5216  00050E  D6FB               	goto	i2l136
  5217  000510  0A01               	xorlw	1	; case 21
  5218  000512  B4D8               	btfsc	status,2,c
  5219  000514  D704               	goto	i2l138
  5220  000516  0A03               	xorlw	3	; case 22
  5221  000518  B4D8               	btfsc	status,2,c
  5222  00051A  D709               	goto	i2l139
  5223  00051C  0A01               	xorlw	1	; case 23
  5224  00051E  B4D8               	btfsc	status,2,c
  5225  000520  D70E               	goto	i2l140
  5226  000522  0A0F               	xorlw	15	; case 24
  5227  000524  B4D8               	btfsc	status,2,c
  5228  000526  D713               	goto	i2l141
  5229  000528  0A01               	xorlw	1	; case 25
  5230  00052A  B4D8               	btfsc	status,2,c
  5231  00052C  D6B0               	goto	i2l128
  5232  00052E  0A03               	xorlw	3	; case 26
  5233  000530  B4D8               	btfsc	status,2,c
  5234  000532  D6B5               	goto	i2l129
  5235  000534  0A01               	xorlw	1	; case 27
  5236  000536  B4D8               	btfsc	status,2,c
  5237  000538  D6BA               	goto	i2l130
  5238  00053A  0A07               	xorlw	7	; case 28
  5239  00053C  B4D8               	btfsc	status,2,c
  5240  00053E  D6BF               	goto	i2l131
  5241  000540  0A01               	xorlw	1	; case 29
  5242  000542  B4D8               	btfsc	status,2,c
  5243  000544  D734               	goto	i2l145
  5244  000546  0A03               	xorlw	3	; case 30
  5245  000548  B4D8               	btfsc	status,2,c
  5246  00054A  D734               	goto	i2l146
  5247  00054C  0A01               	xorlw	1	; case 31
  5248  00054E  B4D8               	btfsc	status,2,c
  5249  000550  D734               	goto	i2l147
  5250  000552  0A3F               	xorlw	63	; case 32
  5251  000554  B4D8               	btfsc	status,2,c
  5252  000556  D734               	goto	i2l148
  5253  000558  0A01               	xorlw	1	; case 33
  5254  00055A  B4D8               	btfsc	status,2,c
  5255  00055C  D75C               	goto	i2l152
  5256  00055E  0A03               	xorlw	3	; case 34
  5257  000560  B4D8               	btfsc	status,2,c
  5258  000562  D75C               	goto	i2l153
  5259  000564  0A01               	xorlw	1	; case 35
  5260  000566  B4D8               	btfsc	status,2,c
  5261  000568  D75C               	goto	i2l154
  5262  00056A  0A07               	xorlw	7	; case 36
  5263  00056C  B4D8               	btfsc	status,2,c
  5264  00056E  D75C               	goto	i2l155
  5265  000570  0A01               	xorlw	1	; case 37
  5266  000572  B4D8               	btfsc	status,2,c
  5267  000574  D784               	goto	i2l159
  5268  000576  0A03               	xorlw	3	; case 38
  5269  000578  B4D8               	btfsc	status,2,c
  5270  00057A  D784               	goto	i2l160
  5271  00057C  0A01               	xorlw	1	; case 39
  5272  00057E  B4D8               	btfsc	status,2,c
  5273  000580  D784               	goto	i2l161
  5274  000582  0A0F               	xorlw	15	; case 40
  5275  000584  B4D8               	btfsc	status,2,c
  5276  000586  D784               	goto	i2l162
  5277  000588                     i2l1823:
  5278                           
  5279                           ;i2c.c: 275: state = 0;
  5280  000588  0E00               	movlw	0
  5281  00058A  6E3D               	movwf	_state,c
  5282  00058C                     i2l1825:
  5283                           
  5284                           ;i2c.c: 276: }
  5285                           ;i2c.c: 277: SSPCON1bits.CKP = 1;
  5286  00058C  88C6               	bsf	4038,4,c	;volatile
  5287                           
  5288                           ;i2c.c: 278: } else if(!SSPSTATbits.D_nA && SSPSTATbits.R_nW) {
  5289  00058E  D149               	goto	i2l91
  5290  000590                     i2l94:
  5291  000590  AAC7               	btfss	4039,5,c	;volatile
  5292  000592  A4C7               	btfss	4039,2,c	;volatile
  5293  000594  D146               	goto	i2l91
  5294                           
  5295                           ;i2c.c: 279: if (state == 0) {
  5296  000596  503D               	movf	_state,w,c
  5297  000598  A4D8               	btfss	status,2,c
  5298  00059A  D0C5               	goto	i2l1863
  5299                           
  5300                           ;i2c.c: 281: state = currentByte;
  5301  00059C  C03E  F03D         	movff	_currentByte,_state
  5302                           
  5303                           ;i2c.c: 282: } else {
  5304  0005A0  D13D               	goto	i2l1867
  5305  0005A2                     i2l170:
  5306                           
  5307                           ;i2c.c: 289: SSPBUF = Motors[0].duty;
  5308  0005A2  C065  FFC9         	movff	_Motors+5,4041	;volatile
  5309                           
  5310                           ;i2c.c: 290: break;
  5311  0005A6  D138               	goto	i2l1865
  5312  0005A8                     i2l171:
  5313                           
  5314                           ;i2c.c: 292: SSPBUF = Motors[1].duty;
  5315  0005A8  C071  FFC9         	movff	_Motors+17,4041	;volatile
  5316                           
  5317                           ;i2c.c: 293: break;
  5318  0005AC  D135               	goto	i2l1865
  5319  0005AE                     i2l172:
  5320                           
  5321                           ;i2c.c: 295: SSPBUF = Motors[2].duty;
  5322  0005AE  C07D  FFC9         	movff	_Motors+29,4041	;volatile
  5323                           
  5324                           ;i2c.c: 296: break;
  5325  0005B2  D132               	goto	i2l1865
  5326  0005B4                     i2l173:
  5327                           
  5328                           ;i2c.c: 298: SSPBUF = Motors[3].duty;
  5329  0005B4  C089  FFC9         	movff	_Motors+41,4041	;volatile
  5330                           
  5331                           ;i2c.c: 299: break;
  5332  0005B8  D12F               	goto	i2l1865
  5333  0005BA                     i2l1833:
  5334                           
  5335                           ;i2c.c: 302: SSPBUF = (unsigned)((Motors[0].motorType & 0b00000011) | (Motors[1].motorTy
      +                          pe & 0b00000011)<<2 | (Motors[2].motorType & 0b00000011)<<4 | (Motors[3].motorType & 0b0
      +                          0000011)<<6);
  5336  0005BA  C085  F007         	movff	_Motors+37,??_I2C_Slave_Read
  5337  0005BE  0E03               	movlw	3
  5338  0005C0  1607               	andwf	??_I2C_Slave_Read,f,c
  5339  0005C2  0E06               	movlw	6
  5340  0005C4  6E08               	movwf	(??_I2C_Slave_Read+1)& (0+255),c
  5341  0005C6                     i2u247_45:
  5342  0005C6  90D8               	bcf	status,0,c
  5343  0005C8  3607               	rlcf	??_I2C_Slave_Read,f,c
  5344  0005CA  2E08               	decfsz	(??_I2C_Slave_Read+1)& (0+255),f,c
  5345  0005CC  D7FC               	goto	i2u247_45
  5346  0005CE  C079  F009         	movff	_Motors+25,??_I2C_Slave_Read+2
  5347  0005D2  0E03               	movlw	3
  5348  0005D4  1609               	andwf	??_I2C_Slave_Read+2,f,c
  5349  0005D6  3A09               	swapf	??_I2C_Slave_Read+2,f,c
  5350  0005D8  0EF0               	movlw	240
  5351  0005DA  1609               	andwf	??_I2C_Slave_Read+2,f,c
  5352  0005DC  C06D  F00A         	movff	_Motors+13,??_I2C_Slave_Read+3
  5353  0005E0  0E03               	movlw	3
  5354  0005E2  160A               	andwf	??_I2C_Slave_Read+3,f,c
  5355  0005E4  90D8               	bcf	status,0,c
  5356  0005E6  360A               	rlcf	??_I2C_Slave_Read+3,f,c
  5357  0005E8  90D8               	bcf	status,0,c
  5358  0005EA  360A               	rlcf	??_I2C_Slave_Read+3,f,c
  5359  0005EC  0100               	movlb	0	; () banked
  5360  0005EE  5161               	movf	(_Motors+1)& (0+255),w,b
  5361  0005F0  0B03               	andlw	3
  5362  0005F2  100A               	iorwf	??_I2C_Slave_Read+3,w,c
  5363  0005F4  1009               	iorwf	??_I2C_Slave_Read+2,w,c
  5364  0005F6  D02E               	goto	L20
  5365  0005F8                     i2l175:
  5366                           
  5367                           ;i2c.c: 305: SSPBUF = Motors[0].motorType;
  5368  0005F8  C061  FFC9         	movff	_Motors+1,4041	;volatile
  5369                           
  5370                           ;i2c.c: 306: break;
  5371  0005FC  D10D               	goto	i2l1865
  5372  0005FE                     i2l176:
  5373                           
  5374                           ;i2c.c: 308: SSPBUF = Motors[1].motorType;
  5375  0005FE  C06D  FFC9         	movff	_Motors+13,4041	;volatile
  5376                           
  5377                           ;i2c.c: 309: break;
  5378  000602  D10A               	goto	i2l1865
  5379  000604                     i2l177:
  5380                           
  5381                           ;i2c.c: 311: SSPBUF = Motors[2].motorType;
  5382  000604  C079  FFC9         	movff	_Motors+25,4041	;volatile
  5383                           
  5384                           ;i2c.c: 312: break;
  5385  000608  D107               	goto	i2l1865
  5386  00060A                     i2l178:
  5387                           
  5388                           ;i2c.c: 314: SSPBUF = Motors[3].motorType;
  5389  00060A  C085  FFC9         	movff	_Motors+37,4041	;volatile
  5390                           
  5391                           ;i2c.c: 315: break;
  5392  00060E  D104               	goto	i2l1865
  5393  000610                     i2l1835:
  5394                           
  5395                           ;i2c.c: 317: SSPBUF = (unsigned)((Motors[0].direction & 0b00000011) | (Motors[1].directi
      +                          on & 0b00000011)<<2 | (Motors[2].direction & 0b00000011)<<4 | (Motors[3].direction & 0b0
      +                          0000011)<<6);
  5396  000610  0100               	movlb	0	; () banked
  5397  000612  A760               	btfss	_Motors& (0+255),3,b
  5398  000614  D003               	goto	i2u248_40
  5399  000616  6A07               	clrf	??_I2C_Slave_Read& (0+255),c
  5400  000618  2A07               	incf	??_I2C_Slave_Read& (0+255),f,c
  5401  00061A  D001               	goto	i2u248_48
  5402  00061C                     i2u248_40:
  5403  00061C  6A07               	clrf	??_I2C_Slave_Read& (0+255),c
  5404  00061E                     i2u248_48:
  5405  00061E  0100               	movlb	0	; () banked
  5406  000620  A784               	btfss	(_Motors+36)& (0+255),3,b
  5407  000622  D003               	goto	i2u249_40
  5408  000624  0E40               	movlw	64
  5409  000626  6E08               	movwf	(??_I2C_Slave_Read+1)& (0+255),c
  5410  000628  D001               	goto	i2u250_45
  5411  00062A                     i2u249_40:
  5412  00062A  6A08               	clrf	(??_I2C_Slave_Read+1)& (0+255),c
  5413  00062C                     i2u250_45:
  5414  00062C  0100               	movlb	0	; () banked
  5415  00062E  A778               	btfss	(_Motors+24)& (0+255),3,b
  5416  000630  D003               	goto	i2u251_40
  5417  000632  0E10               	movlw	16
  5418  000634  6E09               	movwf	(??_I2C_Slave_Read+2)& (0+255),c
  5419  000636  D001               	goto	i2u252_45
  5420  000638                     i2u251_40:
  5421  000638  6A09               	clrf	(??_I2C_Slave_Read+2)& (0+255),c
  5422  00063A                     i2u252_45:
  5423  00063A  0100               	movlb	0	; () banked
  5424  00063C  A76C               	btfss	(_Motors+12)& (0+255),3,b
  5425  00063E  D003               	goto	i2u253_40
  5426  000640  6A0A               	clrf	(??_I2C_Slave_Read+3)& (0+255),c
  5427  000642  2A0A               	incf	(??_I2C_Slave_Read+3)& (0+255),f,c
  5428  000644  D001               	goto	i2u253_48
  5429  000646                     i2u253_40:
  5430  000646  6A0A               	clrf	(??_I2C_Slave_Read+3)& (0+255),c
  5431  000648                     i2u253_48:
  5432  000648  90D8               	bcf	status,0,c
  5433  00064A  360A               	rlcf	??_I2C_Slave_Read+3,f,c
  5434  00064C  90D8               	bcf	status,0,c
  5435  00064E  340A               	rlcf	??_I2C_Slave_Read+3,w,c
  5436  000650  1009               	iorwf	??_I2C_Slave_Read+2,w,c
  5437  000652  1008               	iorwf	??_I2C_Slave_Read+1,w,c
  5438  000654                     L20:
  5439  000654  1007               	iorwf	??_I2C_Slave_Read,w,c
  5440  000656  D041               	goto	L32
  5441  000658                     i2l1837:
  5442                           
  5443                           ;i2c.c: 320: SSPBUF = Motors[0].direction;
  5444  000658  0100               	movlb	0	; () banked
  5445  00065A  0E00               	movlw	0
  5446  00065C  B760               	btfsc	_Motors& (0+255),3,b
  5447  00065E  0E01               	movlw	1
  5448  000660  D03C               	goto	L32
  5449  000662                     i2l1839:
  5450                           
  5451                           ;i2c.c: 323: SSPBUF = Motors[1].direction;
  5452  000662  0100               	movlb	0	; () banked
  5453  000664  0E00               	movlw	0
  5454  000666  B76C               	btfsc	(_Motors+12)& (0+255),3,b
  5455  000668  0E01               	movlw	1
  5456  00066A  D037               	goto	L32
  5457  00066C                     i2l1841:
  5458                           
  5459                           ;i2c.c: 326: SSPBUF = Motors[2].direction;
  5460  00066C  0100               	movlb	0	; () banked
  5461  00066E  0E00               	movlw	0
  5462  000670  B778               	btfsc	(_Motors+24)& (0+255),3,b
  5463  000672  0E01               	movlw	1
  5464  000674  D032               	goto	L32
  5465  000676                     i2l1843:
  5466                           
  5467                           ;i2c.c: 329: SSPBUF = Motors[3].direction;
  5468  000676  0100               	movlb	0	; () banked
  5469  000678  0E00               	movlw	0
  5470  00067A  B784               	btfsc	(_Motors+36)& (0+255),3,b
  5471  00067C  0E01               	movlw	1
  5472  00067E  D02D               	goto	L32
  5473  000680                     i2l184:
  5474                           
  5475                           ;i2c.c: 332: SSPBUF = PWMEnable;
  5476  000680  C044  FFC9         	movff	_PWMEnable,4041	;volatile
  5477                           
  5478                           ;i2c.c: 333: break;
  5479  000684  D0C9               	goto	i2l1865
  5480  000686                     i2l1845:
  5481                           
  5482                           ;i2c.c: 335: SSPBUF = Motors[0].enabled;
  5483  000686  0100               	movlb	0	; () banked
  5484  000688  0E00               	movlw	0
  5485  00068A  B360               	btfsc	_Motors& (0+255),1,b
  5486  00068C  0E01               	movlw	1
  5487  00068E  D025               	goto	L32
  5488  000690                     i2l1847:
  5489                           
  5490                           ;i2c.c: 338: SSPBUF = Motors[1].enabled;
  5491  000690  0100               	movlb	0	; () banked
  5492  000692  0E00               	movlw	0
  5493  000694  B36C               	btfsc	(_Motors+12)& (0+255),1,b
  5494  000696  0E01               	movlw	1
  5495  000698  D020               	goto	L32
  5496  00069A                     i2l1849:
  5497                           
  5498                           ;i2c.c: 341: SSPBUF = Motors[2].enabled;
  5499  00069A  0100               	movlb	0	; () banked
  5500  00069C  0E00               	movlw	0
  5501  00069E  B378               	btfsc	(_Motors+24)& (0+255),1,b
  5502  0006A0  0E01               	movlw	1
  5503  0006A2  D01B               	goto	L32
  5504  0006A4                     i2l1851:
  5505                           
  5506                           ;i2c.c: 344: SSPBUF = Motors[3].enabled;
  5507  0006A4  0100               	movlb	0	; () banked
  5508  0006A6  0E00               	movlw	0
  5509  0006A8  B384               	btfsc	(_Motors+36)& (0+255),1,b
  5510  0006AA  0E01               	movlw	1
  5511  0006AC  D016               	goto	L32
  5512  0006AE                     i2l189:
  5513                           
  5514                           ;i2c.c: 347: SSPBUF = PWMPause;
  5515  0006AE  C041  FFC9         	movff	_PWMPause,4041	;volatile
  5516                           
  5517                           ;i2c.c: 348: break;
  5518  0006B2  D0B2               	goto	i2l1865
  5519  0006B4                     i2l1853:
  5520                           
  5521                           ;i2c.c: 350: SSPBUF = Motors[0].paused;
  5522  0006B4  0100               	movlb	0	; () banked
  5523  0006B6  0E00               	movlw	0
  5524  0006B8  B560               	btfsc	_Motors& (0+255),2,b
  5525  0006BA  0E01               	movlw	1
  5526  0006BC  D00E               	goto	L32
  5527  0006BE                     i2l1855:
  5528                           
  5529                           ;i2c.c: 353: SSPBUF = Motors[1].paused;
  5530  0006BE  0100               	movlb	0	; () banked
  5531  0006C0  0E00               	movlw	0
  5532  0006C2  B56C               	btfsc	(_Motors+12)& (0+255),2,b
  5533  0006C4  0E01               	movlw	1
  5534  0006C6  D009               	goto	L32
  5535  0006C8                     i2l1857:
  5536                           
  5537                           ;i2c.c: 356: SSPBUF = Motors[2].paused;
  5538  0006C8  0100               	movlb	0	; () banked
  5539  0006CA  0E00               	movlw	0
  5540  0006CC  B578               	btfsc	(_Motors+24)& (0+255),2,b
  5541  0006CE  0E01               	movlw	1
  5542  0006D0  D004               	goto	L32
  5543  0006D2                     i2l1859:
  5544                           
  5545                           ;i2c.c: 359: SSPBUF = Motors[3].paused;
  5546  0006D2  0100               	movlb	0	; () banked
  5547  0006D4  0E00               	movlw	0
  5548  0006D6  B584               	btfsc	(_Motors+36)& (0+255),2,b
  5549  0006D8  0E01               	movlw	1
  5550  0006DA                     L32:
  5551  0006DA  6EC9               	movwf	4041,c	;volatile
  5552                           
  5553                           ;i2c.c: 360: break;
  5554  0006DC  D09D               	goto	i2l1865
  5555  0006DE                     i2l195:
  5556                           
  5557                           ;i2c.c: 365: SSPBUF = Motors[0].accelType;
  5558  0006DE  C068  FFC9         	movff	_Motors+8,4041	;volatile
  5559                           
  5560                           ;i2c.c: 366: break;
  5561  0006E2  D09A               	goto	i2l1865
  5562  0006E4                     i2l196:
  5563                           
  5564                           ;i2c.c: 368: SSPBUF = Motors[1].accelType;
  5565  0006E4  C074  FFC9         	movff	_Motors+20,4041	;volatile
  5566                           
  5567                           ;i2c.c: 369: break;
  5568  0006E8  D097               	goto	i2l1865
  5569  0006EA                     i2l197:
  5570                           
  5571                           ;i2c.c: 371: SSPBUF = Motors[2].accelType;
  5572  0006EA  C080  FFC9         	movff	_Motors+32,4041	;volatile
  5573                           
  5574                           ;i2c.c: 372: break;
  5575  0006EE  D094               	goto	i2l1865
  5576  0006F0                     i2l198:
  5577                           
  5578                           ;i2c.c: 374: SSPBUF = Motors[3].accelType;
  5579  0006F0  C08C  FFC9         	movff	_Motors+44,4041	;volatile
  5580                           
  5581                           ;i2c.c: 375: break;
  5582  0006F4  D091               	goto	i2l1865
  5583  0006F6                     i2l200:
  5584                           
  5585                           ;i2c.c: 380: SSPBUF = Motors[0].accelRate;
  5586  0006F6  C069  FFC9         	movff	_Motors+9,4041	;volatile
  5587                           
  5588                           ;i2c.c: 381: break;
  5589  0006FA  D08E               	goto	i2l1865
  5590  0006FC                     i2l201:
  5591                           
  5592                           ;i2c.c: 383: SSPBUF = Motors[1].accelRate;
  5593  0006FC  C075  FFC9         	movff	_Motors+21,4041	;volatile
  5594                           
  5595                           ;i2c.c: 384: break;
  5596  000700  D08B               	goto	i2l1865
  5597  000702                     i2l202:
  5598                           
  5599                           ;i2c.c: 386: SSPBUF = Motors[2].accelRate;
  5600  000702  C081  FFC9         	movff	_Motors+33,4041	;volatile
  5601                           
  5602                           ;i2c.c: 387: break;
  5603  000706  D088               	goto	i2l1865
  5604  000708                     i2l203:
  5605                           
  5606                           ;i2c.c: 389: SSPBUF = Motors[3].accelRate;
  5607  000708  C08D  FFC9         	movff	_Motors+45,4041	;volatile
  5608                           
  5609                           ;i2c.c: 390: break;
  5610  00070C  D085               	goto	i2l1865
  5611  00070E                     i2l205:
  5612                           
  5613                           ;i2c.c: 395: SSPBUF = Motors[0].minimumDuty;
  5614  00070E  C06A  FFC9         	movff	_Motors+10,4041	;volatile
  5615                           
  5616                           ;i2c.c: 396: break;
  5617  000712  D082               	goto	i2l1865
  5618  000714                     i2l206:
  5619                           
  5620                           ;i2c.c: 398: SSPBUF = Motors[1].minimumDuty;
  5621  000714  C076  FFC9         	movff	_Motors+22,4041	;volatile
  5622                           
  5623                           ;i2c.c: 399: break;
  5624  000718  D07F               	goto	i2l1865
  5625  00071A                     i2l207:
  5626                           
  5627                           ;i2c.c: 401: SSPBUF = Motors[2].minimumDuty;
  5628  00071A  C082  FFC9         	movff	_Motors+34,4041	;volatile
  5629                           
  5630                           ;i2c.c: 402: break;
  5631  00071E  D07C               	goto	i2l1865
  5632  000720                     i2l208:
  5633                           
  5634                           ;i2c.c: 404: SSPBUF = Motors[3].minimumDuty;
  5635  000720  C08E  FFC9         	movff	_Motors+46,4041	;volatile
  5636                           
  5637                           ;i2c.c: 406: }
  5638                           
  5639                           ;i2c.c: 405: break;
  5640  000724  D079               	goto	i2l1865
  5641  000726                     i2l1863:
  5642  000726  503D               	movf	_state,w,c
  5643                           
  5644                           ; Switch size 1, requested type "space"
  5645                           ; Number of cases is 40, Range of values is 1 to 40
  5646                           ; switch strategies available:
  5647                           ; Name         Instructions Cycles
  5648                           ; simple_byte          121    61 (average)
  5649                           ;	Chosen strategy is simple_byte
  5650  000728  0A01               	xorlw	1	; case 1
  5651  00072A  B4D8               	btfsc	status,2,c
  5652  00072C  D73A               	goto	i2l170
  5653  00072E  0A03               	xorlw	3	; case 2
  5654  000730  B4D8               	btfsc	status,2,c
  5655  000732  D737               	goto	i2l170
  5656  000734  0A01               	xorlw	1	; case 3
  5657  000736  B4D8               	btfsc	status,2,c
  5658  000738  D737               	goto	i2l171
  5659  00073A  0A07               	xorlw	7	; case 4
  5660  00073C  B4D8               	btfsc	status,2,c
  5661  00073E  D737               	goto	i2l172
  5662  000740  0A01               	xorlw	1	; case 5
  5663  000742  B4D8               	btfsc	status,2,c
  5664  000744  D737               	goto	i2l173
  5665  000746  0A03               	xorlw	3	; case 6
  5666  000748  B4D8               	btfsc	status,2,c
  5667  00074A  D737               	goto	i2l1833
  5668  00074C  0A01               	xorlw	1	; case 7
  5669  00074E  B4D8               	btfsc	status,2,c
  5670  000750  D75F               	goto	i2l1835
  5671  000752  0A0F               	xorlw	15	; case 8
  5672  000754  B4D8               	btfsc	status,2,c
  5673  000756  D7AB               	goto	i2l189
  5674  000758  0A01               	xorlw	1	; case 9
  5675  00075A  B4D8               	btfsc	status,2,c
  5676  00075C  D791               	goto	i2l184
  5677  00075E  0A03               	xorlw	3	; case 10
  5678  000760  B4D8               	btfsc	status,2,c
  5679  000762  D7BD               	goto	i2l195
  5680  000764  0A01               	xorlw	1	; case 11
  5681  000766  B4D8               	btfsc	status,2,c
  5682  000768  D7C6               	goto	i2l200
  5683  00076A  0A07               	xorlw	7	; case 12
  5684  00076C  B4D8               	btfsc	status,2,c
  5685  00076E  D7CF               	goto	i2l205
  5686  000770  0A01               	xorlw	1	; case 13
  5687  000772  B4D8               	btfsc	status,2,c
  5688  000774  D741               	goto	i2l175
  5689  000776  0A03               	xorlw	3	; case 14
  5690  000778  B4D8               	btfsc	status,2,c
  5691  00077A  D741               	goto	i2l176
  5692  00077C  0A01               	xorlw	1	; case 15
  5693  00077E  B4D8               	btfsc	status,2,c
  5694  000780  D741               	goto	i2l177
  5695  000782  0A1F               	xorlw	31	; case 16
  5696  000784  B4D8               	btfsc	status,2,c
  5697  000786  D741               	goto	i2l178
  5698  000788  0A01               	xorlw	1	; case 17
  5699  00078A  B4D8               	btfsc	status,2,c
  5700  00078C  D77C               	goto	i2l1845
  5701  00078E  0A03               	xorlw	3	; case 18
  5702  000790  B4D8               	btfsc	status,2,c
  5703  000792  D77E               	goto	i2l1847
  5704  000794  0A01               	xorlw	1	; case 19
  5705  000796  B4D8               	btfsc	status,2,c
  5706  000798  D780               	goto	i2l1849
  5707  00079A  0A07               	xorlw	7	; case 20
  5708  00079C  B4D8               	btfsc	status,2,c
  5709  00079E  D782               	goto	i2l1851
  5710  0007A0  0A01               	xorlw	1	; case 21
  5711  0007A2  B4D8               	btfsc	status,2,c
  5712  0007A4  D787               	goto	i2l1853
  5713  0007A6  0A03               	xorlw	3	; case 22
  5714  0007A8  B4D8               	btfsc	status,2,c
  5715  0007AA  D789               	goto	i2l1855
  5716  0007AC  0A01               	xorlw	1	; case 23
  5717  0007AE  B4D8               	btfsc	status,2,c
  5718  0007B0  D78B               	goto	i2l1857
  5719  0007B2  0A0F               	xorlw	15	; case 24
  5720  0007B4  B4D8               	btfsc	status,2,c
  5721  0007B6  D78D               	goto	i2l1859
  5722  0007B8  0A01               	xorlw	1	; case 25
  5723  0007BA  B4D8               	btfsc	status,2,c
  5724  0007BC  D74D               	goto	i2l1837
  5725  0007BE  0A03               	xorlw	3	; case 26
  5726  0007C0  B4D8               	btfsc	status,2,c
  5727  0007C2  D74F               	goto	i2l1839
  5728  0007C4  0A01               	xorlw	1	; case 27
  5729  0007C6  B4D8               	btfsc	status,2,c
  5730  0007C8  D751               	goto	i2l1841
  5731  0007CA  0A07               	xorlw	7	; case 28
  5732  0007CC  B4D8               	btfsc	status,2,c
  5733  0007CE  D753               	goto	i2l1843
  5734  0007D0  0A01               	xorlw	1	; case 29
  5735  0007D2  B4D8               	btfsc	status,2,c
  5736  0007D4  D784               	goto	i2l195
  5737  0007D6  0A03               	xorlw	3	; case 30
  5738  0007D8  B4D8               	btfsc	status,2,c
  5739  0007DA  D784               	goto	i2l196
  5740  0007DC  0A01               	xorlw	1	; case 31
  5741  0007DE  B4D8               	btfsc	status,2,c
  5742  0007E0  D784               	goto	i2l197
  5743  0007E2  0A3F               	xorlw	63	; case 32
  5744  0007E4  B4D8               	btfsc	status,2,c
  5745  0007E6  D784               	goto	i2l198
  5746  0007E8  0A01               	xorlw	1	; case 33
  5747  0007EA  B4D8               	btfsc	status,2,c
  5748  0007EC  D784               	goto	i2l200
  5749  0007EE  0A03               	xorlw	3	; case 34
  5750  0007F0  B4D8               	btfsc	status,2,c
  5751  0007F2  D784               	goto	i2l201
  5752  0007F4  0A01               	xorlw	1	; case 35
  5753  0007F6  B4D8               	btfsc	status,2,c
  5754  0007F8  D784               	goto	i2l202
  5755  0007FA  0A07               	xorlw	7	; case 36
  5756  0007FC  B4D8               	btfsc	status,2,c
  5757  0007FE  D784               	goto	i2l203
  5758  000800  0A01               	xorlw	1	; case 37
  5759  000802  B4D8               	btfsc	status,2,c
  5760  000804  D784               	goto	i2l205
  5761  000806  0A03               	xorlw	3	; case 38
  5762  000808  B4D8               	btfsc	status,2,c
  5763  00080A  D784               	goto	i2l206
  5764  00080C  0A01               	xorlw	1	; case 39
  5765  00080E  B4D8               	btfsc	status,2,c
  5766  000810  D784               	goto	i2l207
  5767  000812  0A0F               	xorlw	15	; case 40
  5768  000814  B4D8               	btfsc	status,2,c
  5769  000816  D784               	goto	i2l208
  5770  000818                     i2l1865:
  5771                           
  5772                           ;i2c.c: 407: state = 0;
  5773  000818  0E00               	movlw	0
  5774  00081A  6E3D               	movwf	_state,c
  5775  00081C                     i2l1867:
  5776                           
  5777                           ;i2c.c: 408: }
  5778                           ;i2c.c: 410: SSPCON1bits.CKP = 1;
  5779  00081C  88C6               	bsf	4038,4,c	;volatile
  5780  00081E                     i2l209:
  5781  00081E  B0C7               	btfsc	4039,0,c	;volatile
  5782  000820  D7FE               	goto	i2l209
  5783  000822                     i2l91:
  5784                           
  5785                           ;i2c.c: 413: }
  5786                           ;i2c.c: 415: PIR1bits.SSPIF = 0;
  5787  000822  969E               	bcf	3998,3,c	;volatile
  5788  000824                     i2l212:
  5789  000824  C018  FFF5         	movff	??_I2C_Slave_Read+17,tablat
  5790  000828  C017  FFF8         	movff	??_I2C_Slave_Read+16,tblptru
  5791  00082C  C016  FFF7         	movff	??_I2C_Slave_Read+15,tblptrh
  5792  000830  C015  FFF6         	movff	??_I2C_Slave_Read+14,tblptrl
  5793  000834  C014  FFF4         	movff	??_I2C_Slave_Read+13,prodh
  5794  000838  C013  FFF3         	movff	??_I2C_Slave_Read+12,prodl
  5795  00083C  C012  FFDA         	movff	??_I2C_Slave_Read+11,fsr2h
  5796  000840  C011  FFD9         	movff	??_I2C_Slave_Read+10,fsr2l
  5797  000844  C010  FFE2         	movff	??_I2C_Slave_Read+9,fsr1h
  5798  000848  C00F  FFE1         	movff	??_I2C_Slave_Read+8,fsr1l
  5799  00084C  C00E  FFEA         	movff	??_I2C_Slave_Read+7,fsr0h
  5800  000850  C00D  FFE9         	movff	??_I2C_Slave_Read+6,fsr0l
  5801  000854  C00C  FFFB         	movff	??_I2C_Slave_Read+5,pclatu
  5802  000858  C00B  FFFA         	movff	??_I2C_Slave_Read+4,pclath
  5803  00085C  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5804  00085E  0011               	retfie		f
  5805  000860                     __end_of_I2C_Slave_Read:
  5806                           	opt stack 0
  5807                           pclatu	equ	0xFFB
  5808                           pclath	equ	0xFFA
  5809                           tblptru	equ	0xFF8
  5810                           tblptrh	equ	0xFF7
  5811                           tblptrl	equ	0xFF6
  5812                           tablat	equ	0xFF5
  5813                           prodh	equ	0xFF4
  5814                           prodl	equ	0xFF3
  5815                           intcon	equ	0xFF2
  5816                           intcon2	equ	0xFF1
  5817                           postinc0	equ	0xFEE
  5818                           fsr0h	equ	0xFEA
  5819                           fsr0l	equ	0xFE9
  5820                           wreg	equ	0xFE8
  5821                           indf1	equ	0xFE7
  5822                           postinc1	equ	0xFE6
  5823                           fsr1h	equ	0xFE2
  5824                           fsr1l	equ	0xFE1
  5825                           indf2	equ	0xFDF
  5826                           postinc2	equ	0xFDE
  5827                           fsr2h	equ	0xFDA
  5828                           fsr2l	equ	0xFD9
  5829                           status	equ	0xFD8
  5830                           
  5831 ;; *************** function i2___wmul *****************
  5832 ;; Defined at:
  5833 ;;		line 15 in file "/Applications/microchip/xc8/v1.42/sources/common/Umul16.c"
  5834 ;; Parameters:    Size  Location     Type
  5835 ;;  multiplier      2    0[COMRAM] unsigned int 
  5836 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5837 ;; Auto vars:     Size  Location     Type
  5838 ;;  __wmul          2    4[COMRAM] unsigned int 
  5839 ;; Return value:  Size  Location     Type
  5840 ;;                  2    0[COMRAM] unsigned int 
  5841 ;; Registers used:
  5842 ;;		wreg, status,2, status,0, prodl, prodh
  5843 ;; Tracked objects:
  5844 ;;		On entry : 0/0
  5845 ;;		On exit  : 0/0
  5846 ;;		Unchanged: 0/0
  5847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5848 ;;      Params:         4       0       0       0
  5849 ;;      Locals:         2       0       0       0
  5850 ;;      Temps:          0       0       0       0
  5851 ;;      Totals:         6       0       0       0
  5852 ;;Total ram usage:        6 bytes
  5853 ;; Hardware stack levels used:    1
  5854 ;; This function calls:
  5855 ;;		Nothing
  5856 ;; This function is called by:
  5857 ;;		_I2C_Slave_Read
  5858 ;; This function uses a non-reentrant model
  5859 ;;
  5860                           
  5861                           	psect	text12
  5862  0020E2                     __ptext12:
  5863                           	opt stack 0
  5864  0020E2                     i2___wmul:
  5865                           	opt stack 24
  5866                           
  5867                           ;incstack = 0
  5868  0020E2  5001               	movf	i2___wmul@multiplier,w,c
  5869  0020E4  0203               	mulwf	i2___wmul@multiplicand,c
  5870  0020E6  CFF3 F005          	movff	prodl,i2___wmul@product
  5871  0020EA  CFF4 F006          	movff	prodh,i2___wmul@product+1
  5872  0020EE  5001               	movf	i2___wmul@multiplier,w,c
  5873  0020F0  0204               	mulwf	i2___wmul@multiplicand+1,c
  5874  0020F2  50F3               	movf	prodl,w,c
  5875  0020F4  2606               	addwf	i2___wmul@product+1,f,c
  5876  0020F6  5002               	movf	i2___wmul@multiplier+1,w,c
  5877  0020F8  0203               	mulwf	i2___wmul@multiplicand,c
  5878  0020FA  50F3               	movf	prodl,w,c
  5879  0020FC  2606               	addwf	i2___wmul@product+1,f,c
  5880  0020FE  C005  F001         	movff	i2___wmul@product,?i2___wmul
  5881  002102  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  5882  002106  0012               	return	
  5883  002108                     __end_ofi2___wmul:
  5884                           	opt stack 0
  5885  0000                     pclatu	equ	0xFFB
  5886                           pclath	equ	0xFFA
  5887                           tblptru	equ	0xFF8
  5888                           tblptrh	equ	0xFF7
  5889                           tblptrl	equ	0xFF6
  5890                           tablat	equ	0xFF5
  5891                           prodh	equ	0xFF4
  5892                           prodl	equ	0xFF3
  5893                           intcon	equ	0xFF2
  5894                           intcon2	equ	0xFF1
  5895                           postinc0	equ	0xFEE
  5896                           fsr0h	equ	0xFEA
  5897                           fsr0l	equ	0xFE9
  5898                           wreg	equ	0xFE8
  5899                           indf1	equ	0xFE7
  5900                           postinc1	equ	0xFE6
  5901                           fsr1h	equ	0xFE2
  5902                           fsr1l	equ	0xFE1
  5903                           indf2	equ	0xFDF
  5904                           postinc2	equ	0xFDE
  5905                           fsr2h	equ	0xFDA
  5906                           fsr2l	equ	0xFD9
  5907                           status	equ	0xFD8
  5908                           pclatu	equ	0xFFB
  5909                           pclath	equ	0xFFA
  5910                           tblptru	equ	0xFF8
  5911                           tblptrh	equ	0xFF7
  5912                           tblptrl	equ	0xFF6
  5913                           tablat	equ	0xFF5
  5914                           prodh	equ	0xFF4
  5915                           prodl	equ	0xFF3
  5916                           intcon	equ	0xFF2
  5917                           intcon2	equ	0xFF1
  5918                           postinc0	equ	0xFEE
  5919                           fsr0h	equ	0xFEA
  5920                           fsr0l	equ	0xFE9
  5921                           wreg	equ	0xFE8
  5922                           indf1	equ	0xFE7
  5923                           postinc1	equ	0xFE6
  5924                           fsr1h	equ	0xFE2
  5925                           fsr1l	equ	0xFE1
  5926                           indf2	equ	0xFDF
  5927                           postinc2	equ	0xFDE
  5928                           fsr2h	equ	0xFDA
  5929                           fsr2l	equ	0xFD9
  5930                           status	equ	0xFD8
  5931                           
  5932                           	psect	rparam
  5933  0000                     pclatu	equ	0xFFB
  5934                           pclath	equ	0xFFA
  5935                           tblptru	equ	0xFF8
  5936                           tblptrh	equ	0xFF7
  5937                           tblptrl	equ	0xFF6
  5938                           tablat	equ	0xFF5
  5939                           prodh	equ	0xFF4
  5940                           prodl	equ	0xFF3
  5941                           intcon	equ	0xFF2
  5942                           intcon2	equ	0xFF1
  5943                           postinc0	equ	0xFEE
  5944                           fsr0h	equ	0xFEA
  5945                           fsr0l	equ	0xFE9
  5946                           wreg	equ	0xFE8
  5947                           indf1	equ	0xFE7
  5948                           postinc1	equ	0xFE6
  5949                           fsr1h	equ	0xFE2
  5950                           fsr1l	equ	0xFE1
  5951                           indf2	equ	0xFDF
  5952                           postinc2	equ	0xFDE
  5953                           fsr2h	equ	0xFDA
  5954                           fsr2l	equ	0xFD9
  5955                           status	equ	0xFD8
  5956                           
  5957                           	psect	temp
  5958  000045                     btemp:
  5959                           	opt stack 0
  5960  000045                     	ds	1
  5961  0000                     int$flags	set	btemp
  5962                           pclatu	equ	0xFFB
  5963                           pclath	equ	0xFFA
  5964                           tblptru	equ	0xFF8
  5965                           tblptrh	equ	0xFF7
  5966                           tblptrl	equ	0xFF6
  5967                           tablat	equ	0xFF5
  5968                           prodh	equ	0xFF4
  5969                           prodl	equ	0xFF3
  5970                           intcon	equ	0xFF2
  5971                           intcon2	equ	0xFF1
  5972                           postinc0	equ	0xFEE
  5973                           fsr0h	equ	0xFEA
  5974                           fsr0l	equ	0xFE9
  5975                           wreg	equ	0xFE8
  5976                           indf1	equ	0xFE7
  5977                           postinc1	equ	0xFE6
  5978                           fsr1h	equ	0xFE2
  5979                           fsr1l	equ	0xFE1
  5980                           indf2	equ	0xFDF
  5981                           postinc2	equ	0xFDE
  5982                           fsr2h	equ	0xFDA
  5983                           fsr2l	equ	0xFD9
  5984                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        3
    BSS         57
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     56      68
    BANK0           160      0      48
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_CheckPWMOutput
    _InitPWM->_SetPin
    _CheckPWMOutput->_AcceleratePWM
    _AcceleratePWM->_AccelerateMotor
    _AcceleratePWM->_StopMotor
    _StopMotor->_ExponentialProfile
    _SetPin->___wmul
    _AccelerateMotor->_ExponentialProfile
    _ExponentialProfile->___wmul

Critical Paths under _I2C_Slave_Read in COMRAM

    _I2C_Slave_Read->i2___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _I2C_Slave_Read in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _I2C_Slave_Read in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _I2C_Slave_Read in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  136143
                     _CheckPWMOutput
                            _InitI2C
                            _InitPWM
                          _InitPorts
 ---------------------------------------------------------------------------------
 (1) _InitPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitPWM                                              4     4      0   19519
                                             32 COMRAM     4     4      0
                             _SetPin
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _InitI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckPWMOutput                                       4     4      0  116624
                                             52 COMRAM     4     4      0
                      _AcceleratePWM
                             _SetPin
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _AcceleratePWM                                        4     2      2   96535
                                             48 COMRAM     4     2      2
                    _AccelerateMotor
                          _StopMotor
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _StopMotor                                            6     4      2   39367
                                             42 COMRAM     6     4      2
                 _ExponentialProfile
                             _SetPin
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _SetPin                                               2     1      1     970
                                             30 COMRAM     2     1      1
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _AccelerateMotor                                      8     6      2   38679
                                             42 COMRAM     6     4      2
                 _ExponentialProfile
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _ExponentialProfile                                  12     9      3   19478
                                             30 COMRAM    12     9      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4   18237
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _I2C_Slave_Read                                      18    18      0     625
                                              6 COMRAM    18    18      0
                           i2___wmul
 ---------------------------------------------------------------------------------
 (7) i2___wmul                                             6     2      4     625
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CheckPWMOutput
     _AcceleratePWM
       _AccelerateMotor
         _ExponentialProfile
           ___wmul
         ___wmul
       _StopMotor
         _ExponentialProfile
           ___wmul
         _SetPin
           ___wmul (ARG)
         ___wmul
       ___wmul
     _SetPin
       ___wmul (ARG)
     ___wmul
   _InitI2C
   _InitPWM
     _SetPin
       ___wmul (ARG)
     ___wmul
   _InitPorts

 _I2C_Slave_Read (ROOT)
   i2___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       6        0.0%
BANK2              100      0       0       7        0.0%
BITBANK1           100      0       0       9        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      30       4       30.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     38      44       1       72.3%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      74       8        0.0%
DATA                 0      0      74      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Thu Jun 15 19:19:13 2017

                          _i 0039                  _SSPSTATbits 000FC7          ___wmul@multiplicand 001B  
               __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000                          l240 1F9C  
                        l250 2008                          l242 1FA8                          l251 2014  
                        l243 1FB4                          l252 2020                          l244 1FC0  
                        l260 1E88                          l245 1FCC                          l246 1FD8  
                        l247 1FE4                          l248 1FF0                          l249 1FFC  
                        l353 0F0E                 __CFG_CPB$OFF 000000                 __CFG_CPD$OFF 000000  
               __CFG_BORV$19 000000                          wreg 000FE8                 __CFG_LVP$OFF 000000  
                       l1441 202C                         l1513 1A12                         l1451 14DA  
                       l1523 1AF4                         l1603 1DC2                         l1541 1016  
                       l1525 1B22                         l1517 1A42                         l1533 1C42  
                       l1621 087C                         l1605 1E12                         l1463 15E2  
                       l1455 1532                         l1519 1A70                         l1481 1730  
                       l1473 167C                         l1561 1344                         l1553 11CE  
                       l1529 1C14                         l1467 163A                         l1459 158A  
                       l1547 10F4                         l1651 0B4C                         l1643 0A98  
                       l1635 09B2                         l1493 1838                         l1485 1788  
                       l1477 16D8                         l1557 1252                         l1549 114A  
                       l1573 1EB6                         l1567 1436                         l1575 1EC4  
                       l1671 0DCC                         l1489 17E0                         l1681 0EDA  
                       l1665 0D14                         l1499 187A                         l1579 1F32  
                       l1683 0F04                         l1675 0E48                         l1659 0C5E  
                       l1597 1C80                         l1699 213C                         u1305 1FBC  
                       u1410 14D6                         u1306 1FBE                         u1315 1FC8  
                       u1500 17DC                         u1420 152E                         u1316 1FCA  
                       u1325 1FD4                         u1510 1834                         u1430 1586  
                       u1326 1FD6                         u1335 1FE0                         u1440 15DE  
                       u1336 1FE2                         u1345 1FEC                         u1450 1636  
                       u1346 1FEE                         u1355 1FF8                         u1356 1FFA  
                       u1540 18D6                         u1365 2004                         u1285 1FA4  
                       u1470 16D0                         u1366 2006                         u1286 1FA6  
                       u1550 1904                         u1542 18D8                         u1375 2010  
                       u1295 1FB0                         u1480 172C                         u1376 2012  
                       u1296 1FB2                         u1552 1906                         u1385 201C  
                       u1490 1784                         u1386 201E                         u1730 1EEE  
                       u1810 087A                         u1395 2028                         u1396 202A  
                       u1580 19DE                         u1740 1F1C                         u1732 1EF0  
                       u1590 19E0                         u1742 1F1E                         u1575 1958  
                       u1576 195C                         u1770 1C7E                         i2l90 0054  
                       i2l91 0822                         i2l92 0062                         i2l94 0590  
                       i2l88 005A               _StopMotor$1270 0030                _AcceleratePWM 1E8A  
             _StopMotor$1269 002F                         _TMR0 000FD6                         _main 212A  
                       fsr0h 000FEA                         fsr1h 000FE2                         fsr2h 000FDA  
                       fsr0l 000FE9                         indf1 000FE7                         indf2 000FDF  
                       fsr1l 000FE1                         fsr2l 000FD9                         btemp 0045  
                       prodh 000FF4                         prodl 000FF3                         start 0860  
              __CFG_IESO$OFF 000000                __CFG_FOSC$IRC 000000                 ___param_bank 000000  
            __end_of_InitI2C 212A           _ExponentialProfile 1474              __end_of_InitPWM 1E8A  
       _AccelerateMotor$1271 002F         _AccelerateMotor$1272 0030      ExponentialProfile@index 0020  
                      ?_main 0001          ?_ExponentialProfile 001F                        i2l111 0164  
                      i2l200 06F6                        i2l120 01F0                        i2l201 06FC  
                      i2l121 01F6                        i2l105 0134                        i2l202 0702  
                      i2l130 02AE                        i2l122 01FC                        i2l114 017C  
                      i2l203 0708                        i2l131 02BE                        i2l140 033E  
                      i2l108 014C                        i2l212 0824                        i2l205 070E  
                      i2l141 034E                        i2l133 02D6                        i2l206 0714  
                      i2l134 02E6                        i2l207 071A                        i2l135 02F6  
                      i2l119 01EA                        i2l208 0720                        i2l160 0484  
                      i2l152 0416                        i2l136 0306                        i2l128 028E  
                      i2l209 081E                        i2l161 048A                        i2l153 041C  
                      i2l145 03AE                        i2l129 029E                        i2l170 05A2  
                      i2l162 0490                        i2l154 0422                        i2l146 03B4  
                      i2l138 031E                        i2l171 05A8                        i2l155 0428  
                      i2l147 03BA                        i2l139 032E                        i2l172 05AE  
                      i2l148 03C0                        i2l173 05B4                        i2l175 05F8  
                      i2l159 047E                        i2l184 0680                        i2l176 05FE  
                      i2l177 0604                        i2l178 060A                        i2l195 06DE  
                      i2l196 06E4                        i2l197 06EA                        i2l189 06AE  
                      i2l198 06F0               __CFG_BBSIZ$OFF 000000                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
             __CFG_EBTR1$OFF 000000                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000               __CFG_EBTRB$OFF 000000               ?_AcceleratePWM 0031  
                      _state 003D                        pclath 000FFA                        tablat 000FF5  
           __end_ofi2___wmul 2108         ??_ExponentialProfile 0022                        status 000FD8  
             __CFG_HFOFST$ON 000000               __CFG_MCLRE$OFF 000000              __initialization 2078  
               __end_of_main 2142     ExponentialProfile@change 0029               __CFG_PCLKEN$ON 000000  
   ExponentialProfile@target 001F                       ??_main 0039                __activetblptr 000002  
             __CFG_PLLEN$OFF 000000                       i2l1801 03DE                       i2l1731 0116  
                     i2l1813 0446                       i2l1725 008C                       i2l1821 0496  
             __CFG_WDTEN$OFF 000000                       i2l1807 042E                       i2l1751 0182  
                     i2l1743 0152                       i2l1735 0122                       i2l1823 0588  
                     i2l1719 0074                       i2l1841 066C                       i2l1833 05BA  
                     i2l1729 00EA                       i2l1825 058C                       i2l1851 06A4  
                     i2l1843 0676                       i2l1835 0610                       i2l1763 0202  
                     i2l1747 016A                       i2l1739 013A                       i2l1853 06B4  
                     i2l1845 0686                       i2l1837 0658                       i2l1781 0316  
                     i2l1773 025E                       i2l1757 019A                       i2l1855 06BE  
                     i2l1847 0690                       i2l1839 0662                       i2l1863 0726  
                     i2l1783 035E                       i2l1775 0282                       i2l1857 06C8  
                     i2l1849 069A                       i2l1865 0818                       i2l1769 021A  
                     i2l1859 06D2                       i2l1867 081C                       i2l1795 03C6  
                     i2l1779 02CE                       i2l1789 0376                       _SSPADD 000FC8  
                     _SSPBUF 000FC9           __size_of_InitPorts 000E                    ??_InitI2C 0019  
                  ??_InitPWM 0021              _AccelerateMotor 0F10               __CFG_XINST$OFF 000000  
                     _SetPin 1F98                       _Motors 0060                       ___wmul 20BC  
             __CFG_STVREN$ON 000000                       clear_0 209C                       clear_1 20A8  
               __pdataCOMRAM 0042                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8              ??_AcceleratePWM 0033           __size_of_StopMotor 03DA  
                 __accesstop 0060      __end_of__initialization 20AE                ___rparam_used 000001  
             __pcstackCOMRAM 0001                  SetPin@value 001F      __size_of_I2C_Slave_Read 0858  
                  ?i2___wmul 0001            __end_of_InitPorts 2150              CheckPWMOutput@i 0037  
    __end_of_AccelerateMotor 1474                   __pbssBANK0 0060                  _MinimumDuty 003F  
                    ?_SetPin 001F                      ?___wmul 0019            __end_of_StopMotor 1C58  
    __size_of_CheckPWMOutput 06AC                   ??i2___wmul 0005              __CFG_USBDIV$OFF 000000  
                    _InitI2C 2108                      _InitPWM 1C58              __CFG_PWRTEN$OFF 000000  
                    __Hparam 0000                      __Lparam 0000              __size_of_SetPin 00E0  
            __size_of___wmul 0026                      __pcinit 2078                      __ramtop 0300  
                    __ptext0 212A                      __ptext1 2142                      __ptext2 1C58  
                    __ptext3 2108                      __ptext4 0864                      __ptext5 1E8A  
                    __ptext6 187E                      __ptext7 1F98                      __ptext8 0F10  
                    __ptext9 1474                    _T0CONbits 000FD5             ?_AccelerateMotor 002B  
       end_of_initialization 20AE                __Lmediumconst 0000          i2___wmul@multiplier 0001  
__size_of_ExponentialProfile 040A               _I2C_Slave_Read 0008                      postinc0 000FEE  
                    postinc1 000FE6                      postinc2 000FDE                    _AccelRate 0042  
                  _PWMEnable 0044                    _AccelType 0040       __end_of_I2C_Slave_Read 0860  
             __end_of_SetPin 2078               __end_of___wmul 20E2                __pidataCOMRAM 2150  
             _CheckPWMOutput 0864             i2___wmul@product 0005          start_initialization 2078  
          __size_ofi2___wmul 0026                    SetPin@pin 0020                    _InitPorts 2142  
      __end_of_AcceleratePWM 1F98           AcceleratePWM@index 0031              ?_I2C_Slave_Read 0001  
                   ??_SetPin 0020                     ??___wmul 001D       __end_of_CheckPWMOutput 0F10  
                  _StopMotor 187E                  __pbssCOMRAM 0039                   ?_InitPorts 0001  
                   ?_InitI2C 0001                     ?_InitPWM 0001                    __pintcode 0008  
             StopMotor@index 002B              ?_CheckPWMOutput 0001                   ?_StopMotor 002B  
             ___wmul@product 001D                     _LATAbits 000F89                     _LATBbits 000F8A  
                   _LATCbits 000F8B                     _PIE1bits 000F9D                     i2u212_40 008A  
                   i2u220_44 01D4                     i2u220_45 01D0                     i2u221_40 01E8  
                   i2u222_40 0218                     i2u214_40 0120                     i2u230_45 02E0  
                   i2u230_46 02E4                     i2u223_44 022C                     i2u231_45 02F0  
                   i2u223_45 0228                     i2u231_46 02F4                     i2u240_40 03DC  
                   i2u232_45 0300                     i2u232_46 0304                     i2u241_40 0414  
                   i2u225_40 028C                     i2u233_45 0310                     i2u233_46 0314  
                   i2u242_40 0444                     i2u250_45 062C                     i2u234_45 0328  
                   i2u226_45 0298                     i2u234_46 032C                     i2u226_46 029C  
                   i2u251_40 0638                     i2u243_40 047C                     i2u219_40 0198  
                   i2u235_45 0338                     i2u227_45 02A8                     i2u235_46 033C  
                   i2u227_46 02AC                     i2u252_45 063A                     i2u236_45 0348  
                   i2u228_45 02B8                     i2u236_46 034C                     i2u228_46 02BC  
                   i2u253_40 0646                     i2u237_45 0358                     i2u229_45 02C8  
                   i2u237_46 035C                     i2u229_46 02CC                     i2u253_48 0648  
                   i2u238_40 0374                     i2u239_40 03AC                     i2u247_45 05C6  
                   i2u248_40 061C                     i2u249_40 062A                     i2u248_48 061E  
                   _PIR1bits 000F9E             __CFG_WDTPS$32768 000000                     _PWMPause 0041  
          ___wmul@multiplier 0019         AccelerateMotor@index 002B                     i2___wmul 20E2  
                   InitPWM@i 0021                     InitPWM@n 0023                     _WPUBbits 000F78  
                ??_InitPorts 0019                  _INTCON2bits 000FF1   __end_of_ExponentialProfile 187E  
           __size_of_InitI2C 0022             __size_of_InitPWM 0232     __size_of_AccelerateMotor 0564  
                   __Hrparam 0000                     __Lrparam 0000           __CFG_BOREN$SBORDIS 000000  
      i2___wmul@multiplicand 0003                  _currentByte 003E                  ??_StopMotor 002D  
                   __ptext10 20BC                     __ptext12 20E2             ??_I2C_Slave_Read 0007  
              __size_of_main 0018                     int$flags 0045    ExponentialProfile@current 002A  
                 _INTCONbits 000FF2                     intlevel2 0000                   _OSCCONbits 000FD3  
           ??_CheckPWMOutput 0035         __CFG_CPUDIV$NOCLKDIV 000000            ??_AccelerateMotor 002D  
     __size_of_AcceleratePWM 010E                  _SSPCON1bits 000FC6                  _SSPCON2bits 000FC5  
                 _AccelCount 003B  
